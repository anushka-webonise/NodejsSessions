{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nconst skipWhiteSpaceInLine = /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\nconst skipWhiteSpaceToLineBreak = new RegExp(\"(?=(\" + skipWhiteSpaceInLine.source + \"))\\\\1\" + /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source, \"y\");\n\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nclass Position {\n  constructor(line, col) {\n    this.line = void 0;\n    this.column = void 0;\n    this.line = line;\n    this.column = col;\n  }\n\n}\n\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = void 0;\n    this.end = void 0;\n    this.filename = void 0;\n    this.identifierName = void 0;\n    this.start = start;\n    this.end = end;\n  }\n\n}\n\nfunction getLineInfo(input, offset) {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n\nclass BaseParser {\n  constructor() {\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n\n  hasPlugin(name) {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin, name) {\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n\n}\n\nfunction setTrailingComments(node, comments) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\nfunction setInnerComments(node, comments) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else if (comments !== undefined) {\n    node.innerComments.unshift(...comments);\n  }\n}\n\nfunction adjustInnerComments(node, elements, commentWS) {\n  let lastElement = null;\n  let i = elements.length;\n\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  processComment(node) {\n    const {\n      commentStack\n    } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const {\n      start: nodeStart\n    } = node;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n\n      if (commentEnd > nodeStart) {\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n\n        break;\n      }\n    }\n  }\n\n  finalizeComment(commentWS) {\n    const {\n      comments\n    } = commentWS;\n\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n\n      if (commentWS.trailingNode !== null) {\n        commentWS.trailingNode.leadingComments = comments;\n      }\n    } else {\n      const {\n        containingNode: node,\n        start: commentStart\n      } = commentWS;\n\n      if (this.input.charCodeAt(commentStart - 1) === 44) {\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n\n          default:\n            {\n              setInnerComments(node, comments);\n            }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  finalizeRemainingComments() {\n    const {\n      commentStack\n    } = this.state;\n\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n\n    this.state.commentStack = [];\n  }\n\n  resetPreviousNodeTrailingComments(node) {\n    const {\n      commentStack\n    } = this.state;\n    const {\n      length\n    } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n}\n\nconst ErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n});\nconst ErrorMessages = makeErrorTemplates({\n  AccessorIsGenerator: \"A %0ter cannot be a generator.\",\n  ArgumentsInClass: \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock: \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter: \"'await' is not allowed in async function parameters.\",\n  AwaitNotInAsyncContext: \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\n  BadSetterRestParameter: \"A 'set' accesor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: \"'%0' require an initialization value.\",\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?\",\n  ExportDefaultFromAsIdentifier: \"'from' is not allowed as an identifier after 'export default'.\",\n  ForInOfLoopInitializer: \"'%0' loop variable declaration may not have an initializer.\",\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block.\",\n  IllegalBreakContinue: \"Unsyntactic %0.\",\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportBindingIsString: 'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: \"`import()` requires exactly %0.\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: \"Expected number in radix %0.\",\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0.\",\n  InvalidIdentifier: \"Invalid identifier %0.\",\n  InvalidLhs: \"Invalid left-hand side in %0.\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0.\",\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent: \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'.\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined.\",\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty: \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: \"Label '%0' is already declared.\",\n  LetInLexicalBinding: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType: \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue: \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: 'Duplicate key \"%0\" is not allowed in module attributes.',\n  ModuleExportNameHasLoneSurrogate: \"An export name cannot include a lone surrogate, found '\\\\u%0'.\",\n  ModuleExportUndefined: \"Export '%0' is not defined.\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar: \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor: \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PipeBodyIsTighter: \"Unexpected %0 after pipeline body; any %0 expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound: \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: 'Invalid topic token %0. In order to use %0 as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"%0\" }.',\n  PipeTopicUnused: \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: \"Hack-style pipe body cannot be an unparenthesized %0 expression; please wrap it in parentheses.\",\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PrivateInExpectedIn: \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0.\",\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  StrictDelete: \"Deleting local variable in strict mode.\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode.\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode.\",\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block.\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n  StrictWith: \"'with' in strict mode.\",\n  SuperNotAllowed: \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'.\",\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget: \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'.\",\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: \"Unexpected token '%0'.\",\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1.\",\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper: \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  VarRedeclaration: \"Identifier '%0' has already been declared.\",\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0.\"\n}, ErrorCodes.SyntaxError);\nconst SourceTypeModuleErrorMessages = makeErrorTemplates({\n  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`\n}, ErrorCodes.SourceTypeModuleError);\n\nfunction keepReasonCodeCompat(reasonCode, syntaxPlugin) {\n  {\n    if (syntaxPlugin === \"flow\" && reasonCode === \"PatternIsOptional\") {\n      return \"OptionalBindingPattern\";\n    }\n  }\n  return reasonCode;\n}\n\nfunction makeErrorTemplates(messages, code, syntaxPlugin) {\n  const templates = {};\n  Object.keys(messages).forEach(reasonCode => {\n    templates[reasonCode] = Object.freeze({\n      code,\n      reasonCode: keepReasonCodeCompat(reasonCode, syntaxPlugin),\n      template: messages[reasonCode]\n    });\n  });\n  return Object.freeze(templates);\n}\n\nclass ParserError extends CommentsParser {\n  getLocationForPosition(pos) {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;else if (pos === this.state.end) loc = this.state.endLoc;else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;else loc = getLineInfo(this.input, pos);\n    return loc;\n  }\n\n  raise(pos, {\n    code,\n    reasonCode,\n    template\n  }, ...params) {\n    return this.raiseWithData(pos, {\n      code,\n      reasonCode\n    }, template, ...params);\n  }\n\n  raiseOverwrite(pos, {\n    code,\n    template\n  }, ...params) {\n    const loc = this.getLocationForPosition(pos);\n    const message = template.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n\n    if (this.options.errorRecovery) {\n      const errors = this.state.errors;\n\n      for (let i = errors.length - 1; i >= 0; i--) {\n        const error = errors[i];\n\n        if (error.pos === pos) {\n          return Object.assign(error, {\n            message\n          });\n        } else if (error.pos < pos) {\n          break;\n        }\n      }\n    }\n\n    return this._raise({\n      code,\n      loc,\n      pos\n    }, message);\n  }\n\n  raiseWithData(pos, data, errorTemplate, ...params) {\n    const loc = this.getLocationForPosition(pos);\n    const message = errorTemplate.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign({\n      loc,\n      pos\n    }, data), message);\n  }\n\n  _raise(errorContext, message) {\n    const err = new SyntaxError(message);\n    Object.assign(err, errorContext);\n\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n\n}\n\nvar estree = superClass => class extends superClass {\n  parseRegExpLiteral({\n    pattern,\n    flags\n  }) {\n    let regex = null;\n\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (e) {}\n\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n\n  parseBigIntLiteral(value) {\n    let bigInt;\n\n    try {\n      bigInt = BigInt(value);\n    } catch (_unused) {\n      bigInt = null;\n    }\n\n    const node = this.estreeParseLiteral(bigInt);\n    node.bigint = String(node.value || value);\n    return node;\n  }\n\n  parseDecimalLiteral(value) {\n    const decimal = null;\n    const node = this.estreeParseLiteral(decimal);\n    node.decimal = String(node.value || value);\n    return node;\n  }\n\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n\n  parseStringLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  parseNumericLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  parseNullLiteral() {\n    return this.estreeParseLiteral(null);\n  }\n\n  parseBooleanLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  directiveToStmt(directive) {\n    const directiveLiteral = directive.value;\n    const stmt = this.startNodeAt(directive.start, directive.loc.start);\n    const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n    expression.value = directiveLiteral.extra.expressionValue;\n    expression.raw = directiveLiteral.extra.raw;\n    stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\n    stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n    return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\n  }\n\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n\n  checkDeclaration(node) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.value.params;\n  }\n\n  isValidDirective(stmt) {\n    var _stmt$expression$extr;\n\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);\n  }\n\n  stmtToDirective(stmt) {\n    const value = stmt.expression.value;\n    const directive = super.stmtToDirective(stmt);\n    this.addExtra(directive.value, \"expressionValue\", value);\n    return directive;\n  }\n\n  parseBlockBody(node, ...args) {\n    super.parseBlockBody(node, ...args);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n\n    classBody.body.push(method);\n  }\n\n  parsePrivateName() {\n    const node = super.parsePrivateName();\n\n    if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n      return node;\n    }\n\n    return this.convertPrivateNameToPrivateIdentifier(node);\n  }\n\n  convertPrivateNameToPrivateIdentifier(node) {\n    const name = super.getPrivateNameSV(node);\n    node = node;\n    delete node.id;\n    node.name = name;\n    node.type = \"PrivateIdentifier\";\n    return node;\n  }\n\n  isPrivateName(node) {\n    if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n      return super.isPrivateName(node);\n    }\n\n    return node.type === \"PrivateIdentifier\";\n  }\n\n  getPrivateNameSV(node) {\n    if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n      return super.getPrivateNameSV(node);\n    }\n\n    return node.name;\n  }\n\n  parseLiteral(value, type) {\n    const node = super.parseLiteral(value, type);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = \"FunctionExpression\";\n    delete funcNode.kind;\n    node.value = funcNode;\n\n    if (type === \"ClassPrivateMethod\") {\n      node.computed = false;\n    }\n\n    type = \"MethodDefinition\";\n    return this.finishNode(node, type);\n  }\n\n  parseClassProperty(...args) {\n    const propertyNode = super.parseClassProperty(...args);\n\n    if (this.getPluginOption(\"estree\", \"classFeatures\")) {\n      propertyNode.type = \"PropertyDefinition\";\n    }\n\n    return propertyNode;\n  }\n\n  parseClassPrivateProperty(...args) {\n    const propertyNode = super.parseClassPrivateProperty(...args);\n\n    if (this.getPluginOption(\"estree\", \"classFeatures\")) {\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n    }\n\n    return propertyNode;\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);\n\n    if (node) {\n      node.type = \"Property\";\n      if (node.kind === \"method\") node.kind = \"init\";\n      node.shorthand = false;\n    }\n\n    return node;\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n\n    return node;\n  }\n\n  isAssignable(node, isBinding) {\n    if (node != null && this.isObjectProperty(node)) {\n      return this.isAssignable(node.value, isBinding);\n    }\n\n    return super.isAssignable(node, isBinding);\n  }\n\n  toAssignable(node, isLHS = false) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.toAssignable(node.value, isLHS);\n      return node;\n    }\n\n    return super.toAssignable(node, isLHS);\n  }\n\n  toAssignableObjectExpressionProp(prop, ...args) {\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\n      this.raise(prop.key.start, ErrorMessages.PatternHasAccessor);\n    } else if (prop.method) {\n      this.raise(prop.key.start, ErrorMessages.PatternHasMethod);\n    } else {\n      super.toAssignableObjectExpressionProp(prop, ...args);\n    }\n  }\n\n  finishCallExpression(node, optional) {\n    super.finishCallExpression(node, optional);\n\n    if (node.callee.type === \"Import\") {\n      node.type = \"ImportExpression\";\n      node.source = node.arguments[0];\n\n      if (this.hasPlugin(\"importAssertions\")) {\n        var _node$arguments$;\n\n        node.attributes = (_node$arguments$ = node.arguments[1]) != null ? _node$arguments$ : null;\n      }\n\n      delete node.arguments;\n      delete node.callee;\n    }\n\n    return node;\n  }\n\n  toReferencedArguments(node) {\n    if (node.type === \"ImportExpression\") {\n      return;\n    }\n\n    super.toReferencedArguments(node);\n  }\n\n  parseExport(node) {\n    super.parseExport(node);\n\n    switch (node.type) {\n      case \"ExportAllDeclaration\":\n        node.exported = null;\n        break;\n\n      case \"ExportNamedDeclaration\":\n        if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n          node.type = \"ExportAllDeclaration\";\n          node.exported = node.specifiers[0].exported;\n          delete node.specifiers;\n        }\n\n        break;\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    const node = super.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n    if (state.optionalChainMember) {\n      if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\n        node.type = node.type.substring(8);\n      }\n\n      if (state.stop) {\n        const chain = this.startNodeAtNode(node);\n        chain.expression = node;\n        return this.finishNode(chain, \"ChainExpression\");\n      }\n    } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\n      node.optional = false;\n    }\n\n    return node;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    if (node.type === \"ChainExpression\") {\n      node = node.expression;\n    }\n\n    return super.hasPropertyAsPrivateName(node);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"ChainExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n  }\n\n  isObjectMethod(node) {\n    return node.method || node.kind === \"get\" || node.kind === \"set\";\n  }\n\n};\n\nclass TokContext {\n  constructor(token, preserveSpace) {\n    this.token = void 0;\n    this.preserveSpace = void 0;\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n}\n\nconst types = {\n  brace: new TokContext(\"{\"),\n  template: new TokContext(\"`\", true)\n};\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\nclass ExportedTokenType {\n  constructor(label, conf = {}) {\n    this.label = void 0;\n    this.keyword = void 0;\n    this.beforeExpr = void 0;\n    this.startsExpr = void 0;\n    this.rightAssociative = void 0;\n    this.isLoop = void 0;\n    this.isAssign = void 0;\n    this.prefix = void 0;\n    this.postfix = void 0;\n    this.binop = void 0;\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    {\n      this.updateContext = null;\n    }\n  }\n\n}\n\nconst keywords$1 = new Map();\n\nfunction createKeyword(name, options = {}) {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords$1.set(name, token);\n  return token;\n}\n\nfunction createBinop(name, binop) {\n  return createToken(name, {\n    beforeExpr,\n    binop\n  });\n}\n\nlet tokenTypeCounter = -1;\nconst tokenTypes = [];\nconst tokenLabels = [];\nconst tokenBinops = [];\nconst tokenBeforeExprs = [];\nconst tokenStartsExprs = [];\nconst tokenPrefixes = [];\n\nfunction createToken(name, options = {}) {\n  var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;\n\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push((_options$binop = options.binop) != null ? _options$binop : -1);\n  tokenBeforeExprs.push((_options$beforeExpr = options.beforeExpr) != null ? _options$beforeExpr : false);\n  tokenStartsExprs.push((_options$startsExpr = options.startsExpr) != null ? _options$startsExpr : false);\n  tokenPrefixes.push((_options$prefix = options.prefix) != null ? _options$prefix : false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n  return tokenTypeCounter;\n}\n\nconst tt = {\n  num: createToken(\"num\", {\n    startsExpr\n  }),\n  bigint: createToken(\"bigint\", {\n    startsExpr\n  }),\n  decimal: createToken(\"decimal\", {\n    startsExpr\n  }),\n  regexp: createToken(\"regexp\", {\n    startsExpr\n  }),\n  string: createToken(\"string\", {\n    startsExpr\n  }),\n  name: createToken(\"name\", {\n    startsExpr\n  }),\n  privateName: createToken(\"#name\", {\n    startsExpr\n  }),\n  eof: createToken(\"eof\"),\n  bracketL: createToken(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketHashL: createToken(\"#[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketBarL: createToken(\"[|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: createToken(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceHashL: createToken(\"#{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: createToken(\"}\", {\n    beforeExpr\n  }),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", {\n    beforeExpr\n  }),\n  semi: createToken(\";\", {\n    beforeExpr\n  }),\n  colon: createToken(\":\", {\n    beforeExpr\n  }),\n  doubleColon: createToken(\"::\", {\n    beforeExpr\n  }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", {\n    beforeExpr\n  }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", {\n    beforeExpr\n  }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", {\n    beforeExpr\n  }),\n  backQuote: createToken(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: createToken(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: createToken(\"#!...\"),\n  eq: createToken(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  slashAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  moduloAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: createToken(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: createToken(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: createToken(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", {\n    beforeExpr,\n    binop: 9,\n    prefix,\n    startsExpr\n  }),\n  modulo: createToken(\"%\", {\n    binop: 10,\n    startsExpr\n  }),\n  star: createToken(\"*\", {\n    binop: 10\n  }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", {\n    startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  _for: createKeyword(\"for\", {\n    isLoop\n  }),\n  _while: createKeyword(\"while\", {\n    isLoop\n  }),\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", {\n    beforeExpr: true\n  }),\n  jsxTagStart: createToken(\"jsxTagStart\", {\n    startsExpr: true\n  }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n  placeholder: createToken(\"%%\", {\n    startsExpr: true\n  })\n};\n\nfunction tokenComesBeforeExpression(token) {\n  return tokenBeforeExprs[token];\n}\n\nfunction tokenCanStartExpression(token) {\n  return tokenStartsExprs[token];\n}\n\nfunction tokenIsAssignment(token) {\n  return token >= 35 && token <= 38;\n}\n\nfunction tokenIsLoop(token) {\n  return token >= 89 && token <= 91;\n}\n\nfunction tokenIsKeyword(token) {\n  return token >= 57 && token <= 91;\n}\n\nfunction tokenIsOperator(token) {\n  return token >= 42 && token <= 58;\n}\n\nfunction tokenIsPostfix(token) {\n  return token === 39;\n}\n\nfunction tokenIsPrefix(token) {\n  return tokenPrefixes[token];\n}\n\nfunction tokenLabelName(token) {\n  return tokenLabels[token];\n}\n\nfunction tokenOperatorPrecedence(token) {\n  return tokenBinops[token];\n}\n\nfunction tokenIsRightAssociative(token) {\n  return token === 56;\n}\n\nfunction getExportedToken(token) {\n  return tokenTypes[token];\n}\n\nfunction isTokenType(obj) {\n  return typeof obj === \"number\";\n}\n\n{\n  tokenTypes[16].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[13].updateContext = tokenTypes[15].updateContext = tokenTypes[31].updateContext = context => {\n    context.push(types.brace);\n  };\n\n  tokenTypes[30].updateContext = context => {\n    if (context[context.length - 1] === types.template) {\n      context.pop();\n    } else {\n      context.push(types.template);\n    }\n  };\n\n  tokenTypes[94].updateContext = context => {\n    context.push(types.j_expr, types.j_oTag);\n  };\n}\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1070, 4050, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 46, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 482, 44, 11, 6, 17, 0, 322, 29, 19, 43, 1269, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4152, 8, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 357, 0, 62, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nconst reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\n\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\n\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\n\nfunction isKeyword(word) {\n  return keywords.has(word);\n}\n\nfunction isIteratorStart(current, next) {\n  return current === 64 && next === 64;\n}\n\nconst reservedWordLikeSet = new Set([\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\", \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\", \"eval\", \"arguments\", \"enum\", \"await\"]);\n\nfunction canBeReservedWord(word) {\n  return reservedWordLikeSet.has(word);\n}\n\nconst SCOPE_OTHER = 0b000000000,\n      SCOPE_PROGRAM = 0b000000001,\n      SCOPE_FUNCTION = 0b000000010,\n      SCOPE_ARROW = 0b000000100,\n      SCOPE_SIMPLE_CATCH = 0b000001000,\n      SCOPE_SUPER = 0b000010000,\n      SCOPE_DIRECT_SUPER = 0b000100000,\n      SCOPE_CLASS = 0b001000000,\n      SCOPE_STATIC_BLOCK = 0b010000000,\n      SCOPE_TS_MODULE = 0b100000000,\n      SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\nconst BIND_KIND_VALUE = 0b000000000001,\n      BIND_KIND_TYPE = 0b000000000010,\n      BIND_SCOPE_VAR = 0b000000000100,\n      BIND_SCOPE_LEXICAL = 0b000000001000,\n      BIND_SCOPE_FUNCTION = 0b000000010000,\n      BIND_FLAGS_NONE = 0b000001000000,\n      BIND_FLAGS_CLASS = 0b000010000000,\n      BIND_FLAGS_TS_ENUM = 0b000100000000,\n      BIND_FLAGS_TS_CONST_ENUM = 0b001000000000,\n      BIND_FLAGS_TS_EXPORT_ONLY = 0b010000000000,\n      BIND_FLAGS_FLOW_DECLARE_FN = 0b100000000000;\nconst BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n      BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n      BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n      BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n      BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n      BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n      BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n      BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\nconst CLASS_ELEMENT_FLAG_STATIC = 0b100,\n      CLASS_ELEMENT_KIND_GETTER = 0b010,\n      CLASS_ELEMENT_KIND_SETTER = 0b001,\n      CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nconst CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n      CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n      CLASS_ELEMENT_OTHER = 0;\n\nclass Scope {\n  constructor(flags) {\n    this.var = new Set();\n    this.lexical = new Set();\n    this.functions = new Set();\n    this.flags = flags;\n  }\n\n}\n\nclass ScopeHandler {\n  constructor(raise, inModule) {\n    this.scopeStack = [];\n    this.undefinedExports = new Map();\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        return false;\n      }\n    }\n  }\n\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags) {\n    return new Scope(flags);\n  }\n\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);\n  }\n\n  declareName(name, bindingType, pos) {\n    let scope = this.currentScope();\n\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope, name) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(scope, name, bindingType, pos) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, ErrorMessages.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return scope.lexical.has(name) || scope.functions.has(name) || scope.var.has(name);\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return scope.lexical.has(name) || !this.treatFunctionsAsVarInScope(scope) && scope.var.has(name);\n    }\n\n    return scope.lexical.has(name) && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical.values().next().value === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name);\n  }\n\n  checkLocalExport(id) {\n    const {\n      name\n    } = id;\n    const topLevelScope = this.scopeStack[0];\n\n    if (!topLevelScope.lexical.has(name) && !topLevelScope.var.has(name) && !topLevelScope.functions.has(name)) {\n      this.undefinedExports.set(name, id.start);\n    }\n  }\n\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  currentThisScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n\n}\n\nclass FlowScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.declareFunctions = new Set();\n  }\n\n}\n\nclass FlowScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new FlowScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return !scope.declareFunctions.has(name) && (scope.lexical.has(name) || scope.functions.has(name));\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nclass State {\n  constructor() {\n    this.strict = void 0;\n    this.curLine = void 0;\n    this.startLoc = void 0;\n    this.endLoc = void 0;\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.maybeInArrowParameters = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.inPropertyName = false;\n    this.hasFlowComment = false;\n    this.isAmbientContext = false;\n    this.inAbstractClass = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.comments = [];\n    this.commentStack = [];\n    this.pos = 0;\n    this.lineStart = 0;\n    this.type = 7;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.lastTokEnd = 0;\n    this.context = [types.brace];\n    this.exprAllowed = true;\n    this.containsEsc = false;\n    this.strictErrors = new Map();\n    this.tokensLength = 0;\n  }\n\n  init(options) {\n    this.strict = options.strictMode === false ? false : options.strictMode === true ? true : options.sourceType === \"module\";\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays) {\n    const state = new State();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      state[key] = val;\n    }\n\n    return state;\n  }\n\n}\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\n\nconst VALID_REGEX_FLAGS = new Set([103, 109, 115, 105, 121, 117, 100]);\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\n  hex: [46, 88, 95, 120]\n};\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [48, 49];\nallowedNumericSeparatorSiblings.oct = [...allowedNumericSeparatorSiblings.bin, 50, 51, 52, 53, 54, 55];\nallowedNumericSeparatorSiblings.dec = [...allowedNumericSeparatorSiblings.oct, 56, 57];\nallowedNumericSeparatorSiblings.hex = [...allowedNumericSeparatorSiblings.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102];\n\nclass Token {\n  constructor(state) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n}\n\nclass Tokenizer extends ParserError {\n  constructor(options, input) {\n    super();\n    this.isLookahead = void 0;\n    this.tokens = [];\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token) {\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  next() {\n    this.checkKeywordEscapes();\n\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  match(type) {\n    return this.state.type === type;\n  }\n\n  createLookaheadState(state) {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      lastTokEnd: state.end,\n      context: [this.curContext()],\n      inType: state.inType\n    };\n  }\n\n  lookahead() {\n    const old = this.state;\n    this.state = this.createLookaheadState(old);\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart() {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos) {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos) {\n    let cp = this.input.charCodeAt(pos);\n\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n\n    return cp;\n  }\n\n  setStrict(strict) {\n    this.state.strict = strict;\n\n    if (strict) {\n      this.state.strictErrors.forEach((message, pos) => this.raise(pos, message));\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  nextToken() {\n    const curContext = this.curContext();\n    if (!curContext.preserveSpace) this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n\n    if (this.state.pos >= this.length) {\n      this.finishToken(7);\n      return;\n    }\n\n    if (curContext === types.template) {\n      this.readTmplToken();\n    } else {\n      this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n    }\n  }\n\n  skipBlockComment() {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", start + 2);\n    if (end === -1) throw this.raise(start, ErrorMessages.UnterminatedComment);\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start + 2;\n\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    if (this.isLookahead) return;\n    const comment = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + 2,\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    if (this.isLookahead) return;\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n    const comment = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipSpace() {\n    const spaceStart = this.state.pos;\n    const comments = [];\n\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              {\n                const comment = this.skipBlockComment();\n\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n\n                break;\n              }\n\n            case 47:\n              {\n                const comment = this.skipLineComment(2);\n\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n\n                break;\n              }\n\n            default:\n              break loop;\n          }\n\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === 45 && !this.inModule) {\n            const pos = this.state.pos;\n\n            if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {\n              const comment = this.skipLineComment(3);\n\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === 60 && !this.inModule) {\n            const pos = this.state.pos;\n\n            if (this.input.charCodeAt(pos + 1) === 33 && this.input.charCodeAt(pos + 2) === 45 && this.input.charCodeAt(pos + 3) === 45) {\n              const comment = this.skipLineComment(4);\n\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null\n      };\n      this.state.commentStack.push(CommentWhitespace);\n    }\n  }\n\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.state.endLoc = this.state.curPosition();\n      this.updateContext(prevType);\n    }\n  }\n\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n\n    if (next >= 48 && next <= 57) {\n      throw this.raise(this.state.pos, ErrorMessages.UnexpectedDigitAfterHash);\n    }\n\n    if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n      this.expectPlugin(\"recordAndTuple\");\n\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(this.state.pos, next === 123 ? ErrorMessages.RecordExpressionHashIncorrectStartSyntaxType : ErrorMessages.TupleExpressionHashIncorrectStartSyntaxType);\n      }\n\n      this.state.pos += 2;\n\n      if (next === 123) {\n        this.finishToken(15);\n      } else {\n        this.finishToken(9);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(6, this.readWord1(next));\n    } else if (next === 92) {\n      ++this.state.pos;\n      this.finishToken(6, this.readWord1());\n    } else {\n      this.finishOp(33, 1);\n    }\n  }\n\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(29);\n    } else {\n      ++this.state.pos;\n      this.finishToken(24);\n    }\n  }\n\n  readToken_slash() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(37, 2);\n    } else {\n      this.finishOp(55, 1);\n    }\n  }\n\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== 33) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(34, value);\n    return true;\n  }\n\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? 54 : 53;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = 56;\n    }\n\n    if (next === 61 && !this.state.inType) {\n      width++;\n      type = code === 37 ? 38 : 36;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(36, 3);\n      } else {\n        this.finishOp(code === 124 ? 44 : 45, 2);\n      }\n\n      return;\n    }\n\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(42, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.state.pos += 2;\n        this.finishToken(17);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.state.pos += 2;\n        this.finishToken(12);\n        return;\n      }\n    }\n\n    if (next === 61) {\n      this.finishOp(36, 2);\n      return;\n    }\n\n    this.finishOp(code === 124 ? 46 : 48, 1);\n  }\n\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(36, 2);\n    } else {\n      this.finishOp(47, 1);\n    }\n  }\n\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(39, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(36, 2);\n    } else {\n      this.finishOp(52, 1);\n    }\n  }\n\n  readToken_lt_gt(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;\n\n      if (this.input.charCodeAt(this.state.pos + size) === 61) {\n        this.finishOp(36, size + 1);\n        return;\n      }\n\n      this.finishOp(51, size);\n      return;\n    }\n\n    if (next === 61) {\n      size = 2;\n    }\n\n    this.finishOp(50, size);\n  }\n\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(49, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(27);\n      return;\n    }\n\n    this.finishOp(code === 61 ? 35 : 40, 1);\n  }\n\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n\n    if (next === 63) {\n      if (next2 === 61) {\n        this.finishOp(36, 3);\n      } else {\n        this.finishOp(43, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(26);\n    } else {\n      ++this.state.pos;\n      this.finishToken(25);\n    }\n  }\n\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n\n      case 40:\n        ++this.state.pos;\n        this.finishToken(18);\n        return;\n\n      case 41:\n        ++this.state.pos;\n        this.finishToken(19);\n        return;\n\n      case 59:\n        ++this.state.pos;\n        this.finishToken(21);\n        return;\n\n      case 44:\n        ++this.state.pos;\n        this.finishToken(20);\n        return;\n\n      case 91:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.state.pos += 2;\n          this.finishToken(10);\n        } else {\n          ++this.state.pos;\n          this.finishToken(8);\n        }\n\n        return;\n\n      case 93:\n        ++this.state.pos;\n        this.finishToken(11);\n        return;\n\n      case 123:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.state.pos += 2;\n          this.finishToken(14);\n        } else {\n          ++this.state.pos;\n          this.finishToken(13);\n        }\n\n        return;\n\n      case 125:\n        ++this.state.pos;\n        this.finishToken(16);\n        return;\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(23, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(22);\n        }\n\n        return;\n\n      case 63:\n        this.readToken_question();\n        return;\n\n      case 96:\n        ++this.state.pos;\n        this.finishToken(30);\n        return;\n\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n\n      case 47:\n        this.readToken_slash();\n        return;\n\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case 94:\n        this.readToken_caret();\n        return;\n\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n\n      case 60:\n      case 62:\n        this.readToken_lt_gt(code);\n        return;\n\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n\n      case 126:\n        this.finishOp(41, 1);\n        return;\n\n      case 64:\n        ++this.state.pos;\n        this.finishToken(32);\n        return;\n\n      case 35:\n        this.readToken_numberSign();\n        return;\n\n      case 92:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n\n    }\n\n    throw this.raise(this.state.pos, ErrorMessages.InvalidOrUnexpectedToken, String.fromCodePoint(code));\n  }\n\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp() {\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let {\n      pos\n    } = this.state;\n\n    for (;; ++pos) {\n      if (pos >= this.length) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      const ch = this.input.charCodeAt(pos);\n\n      if (isNewLine(ch)) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === 91) {\n          inClass = true;\n        } else if (ch === 93 && inClass) {\n          inClass = false;\n        } else if (ch === 47 && !inClass) {\n          break;\n        }\n\n        escaped = ch === 92;\n      }\n    }\n\n    const content = this.input.slice(start, pos);\n    ++pos;\n    let mods = \"\";\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      const char = String.fromCharCode(cp);\n\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (mods.includes(char)) {\n          this.raise(pos + 1, ErrorMessages.DuplicateRegExpFlags);\n        }\n      } else if (isIdentifierChar(cp) || cp === 92) {\n        this.raise(pos + 1, ErrorMessages.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n\n    this.state.pos = pos;\n    this.finishToken(3, {\n      pattern: content,\n      flags: mods\n    });\n  }\n\n  readInt(radix, len, forceLen, allowNumSeparator = true) {\n    const start = this.state.pos;\n    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === 95) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(this.state.pos, ErrorMessages.NumericSeparatorInEscapeSequence);\n        }\n\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= 97) {\n        val = code - 97 + 10;\n      } else if (code >= 65) {\n        val = code - 65 + 10;\n      } else if (_isDigit(code)) {\n        val = code - 48;\n      } else {\n        val = Infinity;\n      }\n\n      if (val >= radix) {\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, ErrorMessages.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n\n    if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix) {\n    const start = this.state.pos;\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n\n    if (val == null) {\n      this.raise(this.state.start + 2, ErrorMessages.InvalidDigit, radix);\n    }\n\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 110) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === 109) {\n      throw this.raise(start, ErrorMessages.InvalidDecimal);\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(1, str);\n      return;\n    }\n\n    this.finishToken(0, val);\n  }\n\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, ErrorMessages.InvalidNumber);\n    }\n\n    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(start, ErrorMessages.StrictOctalLiteral);\n\n      if (!this.state.strict) {\n        const underscorePos = integer.indexOf(\"_\");\n\n        if (underscorePos > 0) {\n          this.raise(underscorePos + start, ErrorMessages.ZeroDigitNumericSeparator);\n        }\n      }\n\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 46 && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !isOctal) {\n      next = this.input.charCodeAt(++this.state.pos);\n\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n\n      if (this.readInt(10) === null) {\n        this.raise(start, ErrorMessages.InvalidOrMissingExponent);\n      }\n\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === 110) {\n      if (isFloat || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidBigIntLiteral);\n      }\n\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === 109) {\n      this.expectPlugin(\"decimal\", this.state.pos);\n\n      if (hasExponent || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidDecimal);\n      }\n\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(1, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(2, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(0, val);\n  }\n\n  readCodePoint(throwOnInvalid) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === 123) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n      ++this.state.pos;\n\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, ErrorMessages.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n\n    return code;\n  }\n\n  readString(quote) {\n    let out = \"\",\n        chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (ch === 8232 || ch === 8233) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(4, out);\n  }\n\n  readTmplToken() {\n    let out = \"\",\n        chunkStart = this.state.pos,\n        containsInvalid = false;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedTemplate);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n        if (this.state.pos === this.state.start && this.match(28)) {\n          if (ch === 36) {\n            this.state.pos += 2;\n            this.finishToken(31);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(30);\n            return;\n          }\n        }\n\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(28, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n\n        switch (ch) {\n          case 13:\n            if (this.input.charCodeAt(this.state.pos) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n            out += \"\\n\";\n            break;\n\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(pos, message) {\n    if (this.state.strict && !this.state.strictErrors.has(pos)) {\n      this.raise(pos, message);\n    } else {\n      this.state.strictErrors.set(pos, message);\n    }\n  }\n\n  readEscapedChar(inTemplate) {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n\n    switch (ch) {\n      case 110:\n        return \"\\n\";\n\n      case 114:\n        return \"\\r\";\n\n      case 120:\n        {\n          const code = this.readHexChar(2, false, throwOnInvalid);\n          return code === null ? null : String.fromCharCode(code);\n        }\n\n      case 117:\n        {\n          const code = this.readCodePoint(throwOnInvalid);\n          return code === null ? null : String.fromCodePoint(code);\n        }\n\n      case 116:\n        return \"\\t\";\n\n      case 98:\n        return \"\\b\";\n\n      case 118:\n        return \"\\u000b\";\n\n      case 102:\n        return \"\\f\";\n\n      case 13:\n        if (this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n        }\n\n      case 10:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n\n      case 8232:\n      case 8233:\n        return \"\";\n\n      case 56:\n      case 57:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(this.state.pos - 1, ErrorMessages.StrictNumericEscape);\n        }\n\n      default:\n        if (ch >= 48 && ch <= 55) {\n          const codePos = this.state.pos - 1;\n          const match = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/);\n          let octalStr = match[0];\n          let octal = parseInt(octalStr, 8);\n\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n\n          if (octalStr !== \"0\" || next === 56 || next === 57) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(codePos, ErrorMessages.StrictNumericEscape);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  readHexChar(len, forceLen, throwOnInvalid) {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, ErrorMessages.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n\n    return n;\n  }\n\n  readWord1(firstCode) {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(this.state.pos, ErrorMessages.MissingUnicodeEscape);\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, ErrorMessages.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  readWord(firstCode) {\n    const word = this.readWord1(firstCode);\n    const type = keywords$1.get(word) || 5;\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes() {\n    const {\n      type\n    } = this.state;\n\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(this.state.start, ErrorMessages.InvalidEscapedReservedWord, tokenLabelName(type));\n    }\n  }\n\n  updateContext(prevType) {\n    const {\n      context,\n      type\n    } = this.state;\n\n    switch (type) {\n      case 16:\n        context.pop();\n        break;\n\n      case 13:\n      case 15:\n      case 31:\n        context.push(types.brace);\n        break;\n\n      case 30:\n        if (context[context.length - 1] === types.template) {\n          context.pop();\n        } else {\n          context.push(types.template);\n        }\n\n        break;\n    }\n  }\n\n}\n\nclass ClassScope {\n  constructor() {\n    this.privateNames = new Set();\n    this.loneAccessors = new Map();\n    this.undefinedPrivateNames = new Map();\n  }\n\n}\n\nclass ClassScopeHandler {\n  constructor(raise) {\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n  }\n\n  current() {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n    const current = this.current();\n\n    for (const [name, pos] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(name, elementType, pos) {\n    const classScope = this.current();\n    let redefined = classScope.privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && classScope.loneAccessors.get(name);\n\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n        if (!redefined) classScope.loneAccessors.delete(name);\n      } else if (!redefined) {\n        classScope.loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, ErrorMessages.PrivateNameRedeclaration, name);\n    }\n\n    classScope.privateNames.add(name);\n    classScope.undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name, pos) {\n    let classScope;\n\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n    }\n  }\n\n}\n\nconst kExpression = 0,\n      kMaybeArrowParameterDeclaration = 1,\n      kMaybeAsyncArrowParameterDeclaration = 2,\n      kParameterDeclaration = 3;\n\nclass ExpressionScope {\n  constructor(type = kExpression) {\n    this.type = void 0;\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  constructor(type) {\n    super(type);\n    this.errors = new Map();\n  }\n\n  recordDeclarationError(pos, template) {\n    this.errors.set(pos, template);\n  }\n\n  clearDeclarationError(pos) {\n    this.errors.delete(pos);\n  }\n\n  iterateErrors(iterator) {\n    this.errors.forEach(iterator);\n  }\n\n}\n\nclass ExpressionScopeHandler {\n  constructor(raise) {\n    this.stack = [new ExpressionScope()];\n    this.raise = raise;\n  }\n\n  enter(scope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  recordParameterInitializerError(pos, template) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(pos, template);\n      } else {\n        return;\n      }\n\n      scope = stack[--i];\n    }\n\n    this.raise(pos, template);\n  }\n\n  recordParenthesizedIdentifierError(pos, template) {\n    const {\n      stack\n    } = this;\n    const scope = stack[stack.length - 1];\n\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.raise(pos, template);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(pos, template);\n    } else {\n      return;\n    }\n  }\n\n  recordAsyncArrowParametersError(pos, template) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(pos, template);\n      }\n\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern() {\n    const {\n      stack\n    } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors((template, pos) => {\n      this.raise(pos, template);\n      let i = stack.length - 2;\n      let scope = stack[i];\n\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(pos);\n        scope = stack[--i];\n      }\n    });\n  }\n\n}\n\nfunction newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nfunction newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nfunction newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nfunction newExpressionScope() {\n  return new ExpressionScope();\n}\n\nconst PARAM = 0b0000,\n      PARAM_YIELD = 0b0001,\n      PARAM_AWAIT = 0b0010,\n      PARAM_RETURN = 0b0100,\n      PARAM_IN = 0b1000;\n\nclass ProductionParameterHandler {\n  constructor() {\n    this.stacks = [];\n  }\n\n  enter(flags) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags() {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait() {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield() {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn() {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn() {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n\n}\n\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, val) {\n    if (!node) return;\n    const extra = node.extra = node.extra || {};\n    extra[key] = val;\n  }\n\n  isRelational(op) {\n    return this.match(50) && this.state.value === op;\n  }\n\n  expectRelational(op) {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, 50);\n    }\n  }\n\n  isContextual(name) {\n    return this.match(5) && this.state.value === name && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(isIdentifierChar(nextCh) || (nextCh & 0xfc00) === 0xd800);\n    }\n\n    return false;\n  }\n\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  eatContextual(name) {\n    return this.isContextual(name) && this.eat(5);\n  }\n\n  expectContextual(name, template) {\n    if (!this.eatContextual(name)) this.unexpected(null, template);\n  }\n\n  canInsertSemicolon() {\n    return this.match(7) || this.match(16) || this.hasPrecedingLineBreak();\n  }\n\n  hasPrecedingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n  }\n\n  hasFollowingLineBreak() {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  isLineTerminator() {\n    return this.eat(21) || this.canInsertSemicolon();\n  }\n\n  semicolon(allowAsi = true) {\n    if (allowAsi ? this.isLineTerminator() : this.eat(21)) return;\n    this.raise(this.state.lastTokEnd, ErrorMessages.MissingSemicolon);\n  }\n\n  expect(type, pos) {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  assertNoSpace(message = \"Unexpected space.\") {\n    if (this.state.start > this.state.lastTokEnd) {\n      this.raise(this.state.lastTokEnd, {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedSpace\",\n        template: message\n      });\n    }\n  }\n\n  unexpected(pos, messageOrType = {\n    code: ErrorCodes.SyntaxError,\n    reasonCode: \"UnexpectedToken\",\n    template: \"Unexpected token\"\n  }) {\n    if (isTokenType(messageOrType)) {\n      messageOrType = {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedToken\",\n        template: `Unexpected token, expected \"${tokenLabelName(messageOrType)}\"`\n      };\n    }\n\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n  }\n\n  expectPlugin(name, pos) {\n    if (!this.hasPlugin(name)) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: [name]\n      }, `This experimental syntax requires enabling the parser plugin: '${name}'`);\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names, pos) {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: names\n      }, `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\", \")}'`);\n    }\n  }\n\n  tryParse(fn, oldState = this.state.clone()) {\n    const abortSignal = {\n      node: null\n    };\n\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(refExpressionErrors, andThrow) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssign,\n      doubleProto,\n      optionalParameters\n    } = refExpressionErrors;\n\n    if (!andThrow) {\n      return shorthandAssign >= 0 || doubleProto >= 0 || optionalParameters >= 0;\n    }\n\n    if (shorthandAssign >= 0) {\n      this.unexpected(shorthandAssign);\n    }\n\n    if (doubleProto >= 0) {\n      this.raise(doubleProto, ErrorMessages.DuplicateProto);\n    }\n\n    if (optionalParameters >= 0) {\n      this.unexpected(optionalParameters);\n    }\n  }\n\n  isLiteralPropertyName() {\n    return this.match(5) || tokenIsKeyword(this.state.type) || this.match(4) || this.match(0) || this.match(1) || this.match(2);\n  }\n\n  isPrivateName(node) {\n    return node.type === \"PrivateName\";\n  }\n\n  getPrivateNameSV(node) {\n    return node.id.name;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    return (node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\") && this.isPrivateName(node.property);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node) {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(inModule = this.options.sourceType === \"module\") {\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));\n    return () => {\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n}\n\nclass ExpressionErrors {\n  constructor() {\n    this.shorthandAssign = -1;\n    this.doubleProto = -1;\n    this.optionalParameters = -1;\n  }\n\n}\n\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser != null && parser.options.ranges) this.range = [pos, 0];\n    if (parser != null && parser.filename) this.loc.filename = parser.filename;\n  }\n\n}\n\nconst NodePrototype = Node.prototype;\n{\n  NodePrototype.__clone = function () {\n    const newNode = new Node();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node) {\n  return cloneIdentifier(node);\n}\n\nfunction cloneIdentifier(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra,\n    name\n  } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n\n  return cloned;\n}\n\nfunction cloneStringLiteral(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra\n  } = node;\n\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n\n  const cloned = Object.create(NodePrototype);\n  cloned.type = \"StringLiteral\";\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.value = node.value;\n  return cloned;\n}\n\nclass NodeUtils extends UtilParser {\n  startNode() {\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt(pos, loc) {\n    return new Node(this, pos, loc);\n  }\n\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\n  }\n\n  finishNodeAt(node, type, pos, loc) {\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    if (this.options.attachComment) this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node, start, startLoc) {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(node, end = this.state.lastTokEnd, endLoc = this.state.lastTokEndLoc) {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n\n}\n\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nconst FlowErrors = makeErrorTemplates({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  AssignReservedType: \"Cannot overwrite reserved type %0.\",\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName: \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues: \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType: \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied: \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType: \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType: \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType: \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName: \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized: \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized: \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired: \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor: \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst: \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: \"Unexpected reserved type %0.\",\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: \"`declare export %0` is not supported. Use `%1` instead.\",\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\"\n}, ErrorCodes.SyntaxError, \"flow\");\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state) {\n  return (state.type === 5 || tokenIsKeyword(state.type)) && state.value !== \"from\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\nvar flow = superClass => class extends superClass {\n  constructor(...args) {\n    super(...args);\n    this.flowPragma = undefined;\n  }\n\n  getScopeHandler() {\n    return FlowScopeHandler;\n  }\n\n  shouldParseTypes() {\n    return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n  }\n\n  shouldParseEnums() {\n    return !!this.getPluginOption(\"flow\", \"enums\");\n  }\n\n  finishToken(type, val) {\n    if (type !== 4 && type !== 21 && type !== 34) {\n      if (this.flowPragma === undefined) {\n        this.flowPragma = null;\n      }\n    }\n\n    return super.finishToken(type, val);\n  }\n\n  addComment(comment) {\n    if (this.flowPragma === undefined) {\n      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n      if (!matches) ;else if (matches[1] === \"flow\") {\n        this.flowPragma = \"flow\";\n      } else if (matches[1] === \"noflow\") {\n        this.flowPragma = \"noflow\";\n      } else {\n        throw new Error(\"Unexpected flow pragma\");\n      }\n    }\n\n    return super.addComment(comment);\n  }\n\n  flowParseTypeInitialiser(tok) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(tok || 22);\n    const type = this.flowParseType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParsePredicate() {\n    const node = this.startNode();\n    const moduloPos = this.state.start;\n    this.next();\n    this.expectContextual(\"checks\");\n\n    if (this.state.lastTokStart > moduloPos + 1) {\n      this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n    }\n\n    if (this.eat(18)) {\n      node.value = this.parseExpression();\n      this.expect(19);\n      return this.finishNode(node, \"DeclaredPredicate\");\n    } else {\n      return this.finishNode(node, \"InferredPredicate\");\n    }\n  }\n\n  flowParseTypeAndPredicateInitialiser() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(22);\n    let type = null;\n    let predicate = null;\n\n    if (this.match(53)) {\n      this.state.inType = oldInType;\n      predicate = this.flowParsePredicate();\n    } else {\n      type = this.flowParseType();\n      this.state.inType = oldInType;\n\n      if (this.match(53)) {\n        predicate = this.flowParsePredicate();\n      }\n    }\n\n    return [type, predicate];\n  }\n\n  flowParseDeclareClass(node) {\n    this.next();\n    this.flowParseInterfaceish(node, true);\n    return this.finishNode(node, \"DeclareClass\");\n  }\n\n  flowParseDeclareFunction(node) {\n    this.next();\n    const id = node.id = this.parseIdentifier();\n    const typeNode = this.startNode();\n    const typeContainer = this.startNode();\n\n    if (this.isRelational(\"<\")) {\n      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      typeNode.typeParameters = null;\n    }\n\n    this.expect(18);\n    const tmp = this.flowParseFunctionTypeParams();\n    typeNode.params = tmp.params;\n    typeNode.rest = tmp.rest;\n    typeNode.this = tmp._this;\n    this.expect(19);\n    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n    typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n    id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n    this.resetEndLocation(id);\n    this.semicolon();\n    this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.start);\n    return this.finishNode(node, \"DeclareFunction\");\n  }\n\n  flowParseDeclare(node, insideModule) {\n    if (this.match(79)) {\n      return this.flowParseDeclareClass(node);\n    } else if (this.match(67)) {\n      return this.flowParseDeclareFunction(node);\n    } else if (this.match(73)) {\n      return this.flowParseDeclareVariable(node);\n    } else if (this.eatContextual(\"module\")) {\n      if (this.match(24)) {\n        return this.flowParseDeclareModuleExports(node);\n      } else {\n        if (insideModule) {\n          this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n        }\n\n        return this.flowParseDeclareModule(node);\n      }\n    } else if (this.isContextual(\"type\")) {\n      return this.flowParseDeclareTypeAlias(node);\n    } else if (this.isContextual(\"opaque\")) {\n      return this.flowParseDeclareOpaqueType(node);\n    } else if (this.isContextual(\"interface\")) {\n      return this.flowParseDeclareInterface(node);\n    } else if (this.match(81)) {\n      return this.flowParseDeclareExportDeclaration(node, insideModule);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  flowParseDeclareVariable(node) {\n    this.next();\n    node.id = this.flowParseTypeAnnotatableIdentifier(true);\n    this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareVariable\");\n  }\n\n  flowParseDeclareModule(node) {\n    this.scope.enter(SCOPE_OTHER);\n\n    if (this.match(4)) {\n      node.id = this.parseExprAtom();\n    } else {\n      node.id = this.parseIdentifier();\n    }\n\n    const bodyNode = node.body = this.startNode();\n    const body = bodyNode.body = [];\n    this.expect(13);\n\n    while (!this.match(16)) {\n      let bodyNode = this.startNode();\n\n      if (this.match(82)) {\n        this.next();\n\n        if (!this.isContextual(\"type\") && !this.match(86)) {\n          this.raise(this.state.lastTokStart, FlowErrors.InvalidNonTypeImportInDeclareModule);\n        }\n\n        this.parseImport(bodyNode);\n      } else {\n        this.expectContextual(\"declare\", FlowErrors.UnsupportedStatementInDeclareModule);\n        bodyNode = this.flowParseDeclare(bodyNode, true);\n      }\n\n      body.push(bodyNode);\n    }\n\n    this.scope.exit();\n    this.expect(16);\n    this.finishNode(bodyNode, \"BlockStatement\");\n    let kind = null;\n    let hasModuleExport = false;\n    body.forEach(bodyElement => {\n      if (isEsModuleType(bodyElement)) {\n        if (kind === \"CommonJS\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"ES\";\n      } else if (bodyElement.type === \"DeclareModuleExports\") {\n        if (hasModuleExport) {\n          this.raise(bodyElement.start, FlowErrors.DuplicateDeclareModuleExports);\n        }\n\n        if (kind === \"ES\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"CommonJS\";\n        hasModuleExport = true;\n      }\n    });\n    node.kind = kind || \"CommonJS\";\n    return this.finishNode(node, \"DeclareModule\");\n  }\n\n  flowParseDeclareExportDeclaration(node, insideModule) {\n    this.expect(81);\n\n    if (this.eat(64)) {\n      if (this.match(67) || this.match(79)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n      } else {\n        node.declaration = this.flowParseType();\n        this.semicolon();\n      }\n\n      node.default = true;\n      return this.finishNode(node, \"DeclareExportDeclaration\");\n    } else {\n      if (this.match(74) || this.isLet() || (this.isContextual(\"type\") || this.isContextual(\"interface\")) && !insideModule) {\n        const label = this.state.value;\n        const suggestion = exportSuggestions[label];\n        throw this.raise(this.state.start, FlowErrors.UnsupportedDeclareExportKind, label, suggestion);\n      }\n\n      if (this.match(73) || this.match(67) || this.match(79) || this.isContextual(\"opaque\")) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n        node.default = false;\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else if (this.match(54) || this.match(13) || this.isContextual(\"interface\") || this.isContextual(\"type\") || this.isContextual(\"opaque\")) {\n        node = this.parseExport(node);\n\n        if (node.type === \"ExportNamedDeclaration\") {\n          node.type = \"ExportDeclaration\";\n          node.default = false;\n          delete node.exportKind;\n        }\n\n        node.type = \"Declare\" + node.type;\n        return node;\n      }\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParseDeclareModuleExports(node) {\n    this.next();\n    this.expectContextual(\"exports\");\n    node.typeAnnotation = this.flowParseTypeAnnotation();\n    this.semicolon();\n    return this.finishNode(node, \"DeclareModuleExports\");\n  }\n\n  flowParseDeclareTypeAlias(node) {\n    this.next();\n    this.flowParseTypeAlias(node);\n    node.type = \"DeclareTypeAlias\";\n    return node;\n  }\n\n  flowParseDeclareOpaqueType(node) {\n    this.next();\n    this.flowParseOpaqueType(node, true);\n    node.type = \"DeclareOpaqueType\";\n    return node;\n  }\n\n  flowParseDeclareInterface(node) {\n    this.next();\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"DeclareInterface\");\n  }\n\n  flowParseInterfaceish(node, isClass = false) {\n    node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n    this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.extends = [];\n    node.implements = [];\n    node.mixins = [];\n\n    if (this.eat(80)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (!isClass && this.eat(20));\n    }\n\n    if (this.isContextual(\"mixins\")) {\n      this.next();\n\n      do {\n        node.mixins.push(this.flowParseInterfaceExtends());\n      } while (this.eat(20));\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n\n      do {\n        node.implements.push(this.flowParseInterfaceExtends());\n      } while (this.eat(20));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: isClass,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: isClass,\n      allowInexact: false\n    });\n  }\n\n  flowParseInterfaceExtends() {\n    const node = this.startNode();\n    node.id = this.flowParseQualifiedTypeIdentifier();\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    } else {\n      node.typeParameters = null;\n    }\n\n    return this.finishNode(node, \"InterfaceExtends\");\n  }\n\n  flowParseInterface(node) {\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"InterfaceDeclaration\");\n  }\n\n  checkNotUnderscore(word) {\n    if (word === \"_\") {\n      this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n    }\n  }\n\n  checkReservedType(word, startLoc, declaration) {\n    if (!reservedTypes.has(word)) return;\n    this.raise(startLoc, declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, word);\n  }\n\n  flowParseRestrictedIdentifier(liberal, declaration) {\n    this.checkReservedType(this.state.value, this.state.start, declaration);\n    return this.parseIdentifier(liberal);\n  }\n\n  flowParseTypeAlias(node) {\n    node.id = this.flowParseRestrictedIdentifier(false, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.right = this.flowParseTypeInitialiser(35);\n    this.semicolon();\n    return this.finishNode(node, \"TypeAlias\");\n  }\n\n  flowParseOpaqueType(node, declare) {\n    this.expectContextual(\"type\");\n    node.id = this.flowParseRestrictedIdentifier(true, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.supertype = null;\n\n    if (this.match(22)) {\n      node.supertype = this.flowParseTypeInitialiser(22);\n    }\n\n    node.impltype = null;\n\n    if (!declare) {\n      node.impltype = this.flowParseTypeInitialiser(35);\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"OpaqueType\");\n  }\n\n  flowParseTypeParameter(requireDefault = false) {\n    const nodeStart = this.state.start;\n    const node = this.startNode();\n    const variance = this.flowParseVariance();\n    const ident = this.flowParseTypeAnnotatableIdentifier();\n    node.name = ident.name;\n    node.variance = variance;\n    node.bound = ident.typeAnnotation;\n\n    if (this.match(35)) {\n      this.eat(35);\n      node.default = this.flowParseType();\n    } else {\n      if (requireDefault) {\n        this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n      }\n    }\n\n    return this.finishNode(node, \"TypeParameter\");\n  }\n\n  flowParseTypeParameterDeclaration() {\n    const oldInType = this.state.inType;\n    const node = this.startNode();\n    node.params = [];\n    this.state.inType = true;\n\n    if (this.isRelational(\"<\") || this.match(94)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    let defaultRequired = false;\n\n    do {\n      const typeParameter = this.flowParseTypeParameter(defaultRequired);\n      node.params.push(typeParameter);\n\n      if (typeParameter.default) {\n        defaultRequired = true;\n      }\n\n      if (!this.isRelational(\">\")) {\n        this.expect(20);\n      }\n    } while (!this.isRelational(\">\"));\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterDeclaration\");\n  }\n\n  flowParseTypeParameterInstantiation() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    this.state.noAnonFunctionType = false;\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseType());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(20);\n      }\n    }\n\n    this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseTypeParameterInstantiationCallOrNew() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(20);\n      }\n    }\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseInterfaceType() {\n    const node = this.startNode();\n    this.expectContextual(\"interface\");\n    node.extends = [];\n\n    if (this.eat(80)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (this.eat(20));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: false,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: false,\n      allowInexact: false\n    });\n    return this.finishNode(node, \"InterfaceTypeAnnotation\");\n  }\n\n  flowParseObjectPropertyKey() {\n    return this.match(0) || this.match(4) ? this.parseExprAtom() : this.parseIdentifier(true);\n  }\n\n  flowParseObjectTypeIndexer(node, isStatic, variance) {\n    node.static = isStatic;\n\n    if (this.lookahead().type === 22) {\n      node.id = this.flowParseObjectPropertyKey();\n      node.key = this.flowParseTypeInitialiser();\n    } else {\n      node.id = null;\n      node.key = this.flowParseType();\n    }\n\n    this.expect(11);\n    node.value = this.flowParseTypeInitialiser();\n    node.variance = variance;\n    return this.finishNode(node, \"ObjectTypeIndexer\");\n  }\n\n  flowParseObjectTypeInternalSlot(node, isStatic) {\n    node.static = isStatic;\n    node.id = this.flowParseObjectPropertyKey();\n    this.expect(11);\n    this.expect(11);\n\n    if (this.isRelational(\"<\") || this.match(18)) {\n      node.method = true;\n      node.optional = false;\n      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n    } else {\n      node.method = false;\n\n      if (this.eat(25)) {\n        node.optional = true;\n      }\n\n      node.value = this.flowParseTypeInitialiser();\n    }\n\n    return this.finishNode(node, \"ObjectTypeInternalSlot\");\n  }\n\n  flowParseObjectTypeMethodish(node) {\n    node.params = [];\n    node.rest = null;\n    node.typeParameters = null;\n    node.this = null;\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    this.expect(18);\n\n    if (this.match(77)) {\n      node.this = this.flowParseFunctionTypeParam(true);\n      node.this.name = null;\n\n      if (!this.match(19)) {\n        this.expect(20);\n      }\n    }\n\n    while (!this.match(19) && !this.match(29)) {\n      node.params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(19)) {\n        this.expect(20);\n      }\n    }\n\n    if (this.eat(29)) {\n      node.rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    this.expect(19);\n    node.returnType = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"FunctionTypeAnnotation\");\n  }\n\n  flowParseObjectTypeCallProperty(node, isStatic) {\n    const valueNode = this.startNode();\n    node.static = isStatic;\n    node.value = this.flowParseObjectTypeMethodish(valueNode);\n    return this.finishNode(node, \"ObjectTypeCallProperty\");\n  }\n\n  flowParseObjectType({\n    allowStatic,\n    allowExact,\n    allowSpread,\n    allowProto,\n    allowInexact\n  }) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const nodeStart = this.startNode();\n    nodeStart.callProperties = [];\n    nodeStart.properties = [];\n    nodeStart.indexers = [];\n    nodeStart.internalSlots = [];\n    let endDelim;\n    let exact;\n    let inexact = false;\n\n    if (allowExact && this.match(14)) {\n      this.expect(14);\n      endDelim = 17;\n      exact = true;\n    } else {\n      this.expect(13);\n      endDelim = 16;\n      exact = false;\n    }\n\n    nodeStart.exact = exact;\n\n    while (!this.match(endDelim)) {\n      let isStatic = false;\n      let protoStart = null;\n      let inexactStart = null;\n      const node = this.startNode();\n\n      if (allowProto && this.isContextual(\"proto\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== 22 && lookahead.type !== 25) {\n          this.next();\n          protoStart = this.state.start;\n          allowStatic = false;\n        }\n      }\n\n      if (allowStatic && this.isContextual(\"static\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== 22 && lookahead.type !== 25) {\n          this.next();\n          isStatic = true;\n        }\n      }\n\n      const variance = this.flowParseVariance();\n\n      if (this.eat(8)) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (this.eat(8)) {\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n        } else {\n          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n        }\n      } else if (this.match(18) || this.isRelational(\"<\")) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n      } else {\n        let kind = \"init\";\n\n        if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type === 5 || lookahead.type === 4 || lookahead.type === 0) {\n            kind = this.state.value;\n            this.next();\n          }\n        }\n\n        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n\n        if (propOrInexact === null) {\n          inexact = true;\n          inexactStart = this.state.lastTokStart;\n        } else {\n          nodeStart.properties.push(propOrInexact);\n        }\n      }\n\n      this.flowObjectTypeSemicolon();\n\n      if (inexactStart && !this.match(16) && !this.match(17)) {\n        this.raise(inexactStart, FlowErrors.UnexpectedExplicitInexactInObject);\n      }\n    }\n\n    this.expect(endDelim);\n\n    if (allowSpread) {\n      nodeStart.inexact = inexact;\n    }\n\n    const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n    this.state.inType = oldInType;\n    return out;\n  }\n\n  flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {\n    if (this.eat(29)) {\n      const isInexactToken = this.match(20) || this.match(21) || this.match(16) || this.match(17);\n\n      if (isInexactToken) {\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideNonObject);\n        } else if (!allowInexact) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n        }\n\n        if (variance) {\n          this.raise(variance.start, FlowErrors.InexactVariance);\n        }\n\n        return null;\n      }\n\n      if (!allowSpread) {\n        this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n      }\n\n      if (protoStart != null) {\n        this.unexpected(protoStart);\n      }\n\n      if (variance) {\n        this.raise(variance.start, FlowErrors.SpreadVariance);\n      }\n\n      node.argument = this.flowParseType();\n      return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n    } else {\n      node.key = this.flowParseObjectPropertyKey();\n      node.static = isStatic;\n      node.proto = protoStart != null;\n      node.kind = kind;\n      let optional = false;\n\n      if (this.isRelational(\"<\") || this.match(18)) {\n        node.method = true;\n\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n        if (kind === \"get\" || kind === \"set\") {\n          this.flowCheckGetterSetterParams(node);\n        }\n\n        if (!allowSpread && node.key.name === \"constructor\" && node.value.this) {\n          this.raise(node.value.this.start, FlowErrors.ThisParamBannedInConstructor);\n        }\n      } else {\n        if (kind !== \"init\") this.unexpected();\n        node.method = false;\n\n        if (this.eat(25)) {\n          optional = true;\n        }\n\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n      }\n\n      node.optional = optional;\n      return this.finishNode(node, \"ObjectTypeProperty\");\n    }\n  }\n\n  flowCheckGetterSetterParams(property) {\n    const paramCount = property.kind === \"get\" ? 0 : 1;\n    const start = property.start;\n    const length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n    if (property.value.this) {\n      this.raise(property.value.this.start, property.kind === \"get\" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam);\n    }\n\n    if (length !== paramCount) {\n      if (property.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (property.kind === \"set\" && property.value.rest) {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  flowObjectTypeSemicolon() {\n    if (!this.eat(21) && !this.eat(20) && !this.match(16) && !this.match(17)) {\n      this.unexpected();\n    }\n  }\n\n  flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    let node = id || this.flowParseRestrictedIdentifier(true);\n\n    while (this.eat(24)) {\n      const node2 = this.startNodeAt(startPos, startLoc);\n      node2.qualification = node;\n      node2.id = this.flowParseRestrictedIdentifier(true);\n      node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n    }\n\n    return node;\n  }\n\n  flowParseGenericType(startPos, startLoc, id) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.typeParameters = null;\n    node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    return this.finishNode(node, \"GenericTypeAnnotation\");\n  }\n\n  flowParseTypeofType() {\n    const node = this.startNode();\n    this.expect(86);\n    node.argument = this.flowParsePrimaryType();\n    return this.finishNode(node, \"TypeofTypeAnnotation\");\n  }\n\n  flowParseTupleType() {\n    const node = this.startNode();\n    node.types = [];\n    this.expect(8);\n\n    while (this.state.pos < this.length && !this.match(11)) {\n      node.types.push(this.flowParseType());\n      if (this.match(11)) break;\n      this.expect(20);\n    }\n\n    this.expect(11);\n    return this.finishNode(node, \"TupleTypeAnnotation\");\n  }\n\n  flowParseFunctionTypeParam(first) {\n    let name = null;\n    let optional = false;\n    let typeAnnotation = null;\n    const node = this.startNode();\n    const lh = this.lookahead();\n    const isThis = this.state.type === 77;\n\n    if (lh.type === 22 || lh.type === 25) {\n      if (isThis && !first) {\n        this.raise(node.start, FlowErrors.ThisParamMustBeFirst);\n      }\n\n      name = this.parseIdentifier(isThis);\n\n      if (this.eat(25)) {\n        optional = true;\n\n        if (isThis) {\n          this.raise(node.start, FlowErrors.ThisParamMayNotBeOptional);\n        }\n      }\n\n      typeAnnotation = this.flowParseTypeInitialiser();\n    } else {\n      typeAnnotation = this.flowParseType();\n    }\n\n    node.name = name;\n    node.optional = optional;\n    node.typeAnnotation = typeAnnotation;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  reinterpretTypeAsFunctionTypeParam(type) {\n    const node = this.startNodeAt(type.start, type.loc.start);\n    node.name = null;\n    node.optional = false;\n    node.typeAnnotation = type;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  flowParseFunctionTypeParams(params = []) {\n    let rest = null;\n    let _this = null;\n\n    if (this.match(77)) {\n      _this = this.flowParseFunctionTypeParam(true);\n      _this.name = null;\n\n      if (!this.match(19)) {\n        this.expect(20);\n      }\n    }\n\n    while (!this.match(19) && !this.match(29)) {\n      params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(19)) {\n        this.expect(20);\n      }\n    }\n\n    if (this.eat(29)) {\n      rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    return {\n      params,\n      rest,\n      _this\n    };\n  }\n\n  flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n    switch (id.name) {\n      case \"any\":\n        return this.finishNode(node, \"AnyTypeAnnotation\");\n\n      case \"bool\":\n      case \"boolean\":\n        return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n      case \"mixed\":\n        return this.finishNode(node, \"MixedTypeAnnotation\");\n\n      case \"empty\":\n        return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n      case \"number\":\n        return this.finishNode(node, \"NumberTypeAnnotation\");\n\n      case \"string\":\n        return this.finishNode(node, \"StringTypeAnnotation\");\n\n      case \"symbol\":\n        return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n      default:\n        this.checkNotUnderscore(id.name);\n        return this.flowParseGenericType(startPos, startLoc, id);\n    }\n  }\n\n  flowParsePrimaryType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const node = this.startNode();\n    let tmp;\n    let type;\n    let isGroupedType = false;\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n    switch (this.state.type) {\n      case 5:\n        if (this.isContextual(\"interface\")) {\n          return this.flowParseInterfaceType();\n        }\n\n        return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n\n      case 13:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: true\n        });\n\n      case 14:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: true,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: false\n        });\n\n      case 8:\n        this.state.noAnonFunctionType = false;\n        type = this.flowParseTupleType();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        return type;\n\n      case 50:\n        if (this.state.value === \"<\") {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(18);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(19);\n          this.expect(27);\n          node.returnType = this.flowParseType();\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        break;\n\n      case 18:\n        this.next();\n\n        if (!this.match(19) && !this.match(29)) {\n          if (this.match(5) || this.match(77)) {\n            const token = this.lookahead().type;\n            isGroupedType = token !== 25 && token !== 22;\n          } else {\n            isGroupedType = true;\n          }\n        }\n\n        if (isGroupedType) {\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.state.noAnonFunctionType || !(this.match(20) || this.match(19) && this.lookahead().type === 27)) {\n            this.expect(19);\n            return type;\n          } else {\n            this.eat(20);\n          }\n        }\n\n        if (type) {\n          tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n        } else {\n          tmp = this.flowParseFunctionTypeParams();\n        }\n\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        node.this = tmp._this;\n        this.expect(19);\n        this.expect(27);\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n      case 4:\n        return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n      case 84:\n      case 85:\n        node.value = this.match(84);\n        this.next();\n        return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n      case 52:\n        if (this.state.value === \"-\") {\n          this.next();\n\n          if (this.match(0)) {\n            return this.parseLiteralAtNode(-this.state.value, \"NumberLiteralTypeAnnotation\", node);\n          }\n\n          if (this.match(1)) {\n            return this.parseLiteralAtNode(-this.state.value, \"BigIntLiteralTypeAnnotation\", node);\n          }\n\n          throw this.raise(this.state.start, FlowErrors.UnexpectedSubtractionOperand);\n        }\n\n        throw this.unexpected();\n\n      case 0:\n        return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n      case 1:\n        return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n      case 87:\n        this.next();\n        return this.finishNode(node, \"VoidTypeAnnotation\");\n\n      case 83:\n        this.next();\n        return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n      case 77:\n        this.next();\n        return this.finishNode(node, \"ThisTypeAnnotation\");\n\n      case 54:\n        this.next();\n        return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n      case 86:\n        return this.flowParseTypeofType();\n\n      default:\n        if (tokenIsKeyword(this.state.type)) {\n          const label = tokenLabelName(this.state.type);\n          this.next();\n          return super.createIdentifier(node, label);\n        }\n\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParsePostfixType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let type = this.flowParsePrimaryType();\n    let seenOptionalIndexedAccess = false;\n\n    while ((this.match(8) || this.match(26)) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const optional = this.eat(26);\n      seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n      this.expect(8);\n\n      if (!optional && this.match(11)) {\n        node.elementType = type;\n        this.next();\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      } else {\n        node.objectType = type;\n        node.indexType = this.flowParseType();\n        this.expect(11);\n\n        if (seenOptionalIndexedAccess) {\n          node.optional = optional;\n          type = this.finishNode(node, \"OptionalIndexedAccessType\");\n        } else {\n          type = this.finishNode(node, \"IndexedAccessType\");\n        }\n      }\n    }\n\n    return type;\n  }\n\n  flowParsePrefixType() {\n    const node = this.startNode();\n\n    if (this.eat(25)) {\n      node.typeAnnotation = this.flowParsePrefixType();\n      return this.finishNode(node, \"NullableTypeAnnotation\");\n    } else {\n      return this.flowParsePostfixType();\n    }\n  }\n\n  flowParseAnonFunctionWithoutParens() {\n    const param = this.flowParsePrefixType();\n\n    if (!this.state.noAnonFunctionType && this.eat(27)) {\n      const node = this.startNodeAt(param.start, param.loc.start);\n      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n      node.rest = null;\n      node.this = null;\n      node.returnType = this.flowParseType();\n      node.typeParameters = null;\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    return param;\n  }\n\n  flowParseIntersectionType() {\n    const node = this.startNode();\n    this.eat(48);\n    const type = this.flowParseAnonFunctionWithoutParens();\n    node.types = [type];\n\n    while (this.eat(48)) {\n      node.types.push(this.flowParseAnonFunctionWithoutParens());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n  }\n\n  flowParseUnionType() {\n    const node = this.startNode();\n    this.eat(46);\n    const type = this.flowParseIntersectionType();\n    node.types = [type];\n\n    while (this.eat(46)) {\n      node.types.push(this.flowParseIntersectionType());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n  }\n\n  flowParseType() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const type = this.flowParseUnionType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParseTypeOrImplicitInstantiation() {\n    if (this.state.type === 5 && this.state.value === \"_\") {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.parseIdentifier();\n      return this.flowParseGenericType(startPos, startLoc, node);\n    } else {\n      return this.flowParseType();\n    }\n  }\n\n  flowParseTypeAnnotation() {\n    const node = this.startNode();\n    node.typeAnnotation = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"TypeAnnotation\");\n  }\n\n  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n    if (this.match(22)) {\n      ident.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(ident);\n    }\n\n    return ident;\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  flowParseVariance() {\n    let variance = null;\n\n    if (this.match(52)) {\n      variance = this.startNode();\n\n      if (this.state.value === \"+\") {\n        variance.kind = \"plus\";\n      } else {\n        variance.kind = \"minus\";\n      }\n\n      this.next();\n      this.finishNode(variance, \"Variance\");\n    }\n\n    return variance;\n  }\n\n  parseFunctionBody(node, allowExpressionBody, isMethod = false) {\n    if (allowExpressionBody) {\n      return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n    }\n\n    return super.parseFunctionBody(node, false, isMethod);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(22)) {\n      const typeNode = this.startNode();\n      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.state.strict && this.match(5) && this.state.value === \"interface\") {\n      const lookahead = this.lookahead();\n\n      if (lookahead.type === 5 || isKeyword(lookahead.value)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      }\n    } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    const stmt = super.parseStatement(context, topLevel);\n\n    if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n      this.flowPragma = null;\n    }\n\n    return stmt;\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type === \"Identifier\") {\n      if (expr.name === \"declare\") {\n        if (this.match(79) || this.match(5) || this.match(67) || this.match(73) || this.match(81)) {\n          return this.flowParseDeclare(node);\n        }\n      } else if (this.match(5)) {\n        if (expr.name === \"interface\") {\n          return this.flowParseInterface(node);\n        } else if (expr.name === \"type\") {\n          return this.flowParseTypeAlias(node);\n        } else if (expr.name === \"opaque\") {\n          return this.flowParseOpaqueType(node, false);\n        }\n      }\n    }\n\n    return super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    return this.isContextual(\"type\") || this.isContextual(\"interface\") || this.isContextual(\"opaque\") || this.shouldParseEnums() && this.isContextual(\"enum\") || super.shouldParseExportDeclaration();\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(5) && (this.state.value === \"type\" || this.state.value === \"interface\" || this.state.value === \"opaque\" || this.shouldParseEnums() && this.state.value === \"enum\")) {\n      return false;\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseExportDefaultExpression() {\n    if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (!this.match(25)) return expr;\n\n    if (this.state.maybeInArrowParameters) {\n      const nextCh = this.lookaheadCharCode();\n\n      if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {\n        this.setOptionalParametersError(refExpressionErrors);\n        return expr;\n      }\n    }\n\n    this.expect(25);\n    const state = this.state.clone();\n    const originalNoArrowAt = this.state.noArrowAt;\n    const node = this.startNodeAt(startPos, startLoc);\n    let {\n      consequent,\n      failed\n    } = this.tryParseConditionalConsequent();\n    let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n    if (failed || invalid.length > 0) {\n      const noArrowAt = [...originalNoArrowAt];\n\n      if (invalid.length > 0) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt;\n\n        for (let i = 0; i < invalid.length; i++) {\n          noArrowAt.push(invalid[i].start);\n        }\n\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n        [valid, invalid] = this.getArrowLikeExpressions(consequent);\n      }\n\n      if (failed && valid.length > 1) {\n        this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n      }\n\n      if (failed && valid.length === 1) {\n        this.state = state;\n        noArrowAt.push(valid[0].start);\n        this.state.noArrowAt = noArrowAt;\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n      }\n    }\n\n    this.getArrowLikeExpressions(consequent, true);\n    this.state.noArrowAt = originalNoArrowAt;\n    this.expect(22);\n    node.test = expr;\n    node.consequent = consequent;\n    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined));\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n\n  tryParseConditionalConsequent() {\n    this.state.noArrowParamsConversionAt.push(this.state.start);\n    const consequent = this.parseMaybeAssignAllowIn();\n    const failed = !this.match(22);\n    this.state.noArrowParamsConversionAt.pop();\n    return {\n      consequent,\n      failed\n    };\n  }\n\n  getArrowLikeExpressions(node, disallowInvalid) {\n    const stack = [node];\n    const arrows = [];\n\n    while (stack.length !== 0) {\n      const node = stack.pop();\n\n      if (node.type === \"ArrowFunctionExpression\") {\n        if (node.typeParameters || !node.returnType) {\n          this.finishArrowValidation(node);\n        } else {\n          arrows.push(node);\n        }\n\n        stack.push(node.body);\n      } else if (node.type === \"ConditionalExpression\") {\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n      }\n    }\n\n    if (disallowInvalid) {\n      arrows.forEach(node => this.finishArrowValidation(node));\n      return [arrows, []];\n    }\n\n    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n  }\n\n  finishArrowValidation(node) {\n    var _node$extra;\n\n    this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma, false);\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    super.checkParams(node, false, true);\n    this.scope.exit();\n  }\n\n  forwardNoArrowParamsConversionAt(node, parse) {\n    let result;\n\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      result = parse();\n      this.state.noArrowParamsConversionAt.pop();\n    } else {\n      result = parse();\n    }\n\n    return result;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(25)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(22)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n      return;\n    }\n\n    super.assertModuleNodeAllowed(node);\n  }\n\n  parseExport(node) {\n    const decl = super.parseExport(node);\n\n    if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n      decl.exportKind = decl.exportKind || \"value\";\n    }\n\n    return decl;\n  }\n\n  parseExportDeclaration(node) {\n    if (this.isContextual(\"type\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n\n      if (this.match(13)) {\n        node.specifiers = this.parseExportSpecifiers();\n        this.parseExportFrom(node);\n        return null;\n      } else {\n        return this.flowParseTypeAlias(declarationNode);\n      }\n    } else if (this.isContextual(\"opaque\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseOpaqueType(declarationNode, false);\n    } else if (this.isContextual(\"interface\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseInterface(declarationNode);\n    } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      node.exportKind = \"value\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(declarationNode);\n    } else {\n      return super.parseExportDeclaration(node);\n    }\n  }\n\n  eatExportStar(node) {\n    if (super.eatExportStar(...arguments)) return true;\n\n    if (this.isContextual(\"type\") && this.lookahead().type === 54) {\n      node.exportKind = \"type\";\n      this.next();\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    const pos = this.state.start;\n    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n\n    if (hasNamespace && node.exportKind === \"type\") {\n      this.unexpected(pos);\n    }\n\n    return hasNamespace;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    super.parseClassId(node, isStatement, optionalId);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n  }\n\n  parseClassMember(classBody, member, state) {\n    const pos = this.state.start;\n\n    if (this.isContextual(\"declare\")) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      member.declare = true;\n    }\n\n    super.parseClassMember(classBody, member, state);\n\n    if (member.declare) {\n      if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\" && member.type !== \"PropertyDefinition\") {\n        this.raise(pos, FlowErrors.DeclareClassElement);\n      } else if (member.value) {\n        this.raise(member.value.start, FlowErrors.DeclareClassFieldInitializer);\n      }\n    }\n  }\n\n  isIterator(word) {\n    return word === \"iterator\" || word === \"asyncIterator\";\n  }\n\n  readIterator() {\n    const word = super.readWord1();\n    const fullWord = \"@@\" + word;\n\n    if (!this.isIterator(word) || !this.state.inType) {\n      this.raise(this.state.pos, ErrorMessages.InvalidIdentifier, fullWord);\n    }\n\n    this.finishToken(5, fullWord);\n  }\n\n  getTokenFromCode(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 123 && next === 124) {\n      return this.finishOp(14, 2);\n    } else if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(50, 1);\n    } else if (this.state.inType && code === 63) {\n      if (next === 46) {\n        return this.finishOp(26, 2);\n      }\n\n      return this.finishOp(25, 1);\n    } else if (isIteratorStart(code, next)) {\n      this.state.pos += 2;\n      return this.readIterator();\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  isAssignable(node, isBinding) {\n    if (node.type === \"TypeCastExpression\") {\n      return this.isAssignable(node.expression, isBinding);\n    } else {\n      return super.isAssignable(node, isBinding);\n    }\n  }\n\n  toAssignable(node, isLHS = false) {\n    if (node.type === \"TypeCastExpression\") {\n      return super.toAssignable(this.typeCastToParameter(node), isLHS);\n    } else {\n      return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos, isLHS) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n\n    return super.toAssignableList(exprList, trailingCommaPos, isLHS);\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    for (let i = 0; i < exprList.length; i++) {\n      var _expr$extra;\n\n      const expr = exprList[i];\n\n      if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n        this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n      }\n    }\n\n    return exprList;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);\n\n    if (canBePattern && !this.state.maybeInArrowParameters) {\n      this.toReferencedList(node.elements);\n    }\n\n    return node;\n  }\n\n  checkLVal(expr, ...args) {\n    if (expr.type !== \"TypeCastExpression\") {\n      return super.checkLVal(expr, ...args);\n    }\n  }\n\n  parseClassProperty(node) {\n    if (this.match(22)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (this.match(22)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassPrivateProperty(node);\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(22) || super.isClassProperty();\n  }\n\n  isNonstaticConstructor(method) {\n    return !this.match(22) && super.isNonstaticConstructor(method);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n\n    if (method.params && isConstructor) {\n      const params = method.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n      }\n    } else if (method.type === \"MethodDefinition\" && isConstructor && method.value.params) {\n      const params = method.value.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n      }\n    }\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n      const implemented = node.implements = [];\n\n      do {\n        const node = this.startNode();\n        node.id = this.flowParseRestrictedIdentifier(true);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n\n        implemented.push(this.finishNode(node, \"ClassImplements\"));\n      } while (this.eat(20));\n    }\n  }\n\n  checkGetterSetterParams(method) {\n    super.checkGetterSetterParams(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length > 0) {\n      const param = params[0];\n\n      if (this.isThisParam(param) && method.kind === \"get\") {\n        this.raise(param.start, FlowErrors.GetterMayNotHaveThisParam);\n      } else if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.SetterMayNotHaveThisParam);\n      }\n    }\n  }\n\n  parsePropertyName(node, isPrivateNameAllowed) {\n    const variance = this.flowParseVariance();\n    const key = super.parsePropertyName(node, isPrivateNameAllowed);\n    node.variance = variance;\n    return key;\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    if (prop.variance) {\n      this.unexpected(prop.variance.start);\n    }\n\n    delete prop.variance;\n    let typeParameters;\n\n    if (this.isRelational(\"<\") && !isAccessor) {\n      typeParameters = this.flowParseTypeParameterDeclaration();\n      if (!this.match(18)) this.unexpected();\n    }\n\n    super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n\n    if (typeParameters) {\n      (prop.value || prop).typeParameters = typeParameters;\n    }\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(25)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(param.start, FlowErrors.PatternIsOptional);\n      }\n\n      if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.ThisParamMayNotBeOptional);\n      }\n\n      param.optional = true;\n    }\n\n    if (this.match(22)) {\n      param.typeAnnotation = this.flowParseTypeAnnotation();\n    } else if (this.isThisParam(param)) {\n      this.raise(param.start, FlowErrors.ThisParamAnnotationRequired);\n    }\n\n    if (this.match(35) && this.isThisParam(param)) {\n      this.raise(param.start, FlowErrors.ThisParamNoDefault);\n    }\n\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n    }\n\n    return node;\n  }\n\n  shouldParseDefaultImport(node) {\n    if (!hasTypeImportKind(node)) {\n      return super.shouldParseDefaultImport(node);\n    }\n\n    return isMaybeDefaultImport(this.state);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    node.importKind = \"value\";\n    let kind = null;\n\n    if (this.match(86)) {\n      kind = \"typeof\";\n    } else if (this.isContextual(\"type\")) {\n      kind = \"type\";\n    }\n\n    if (kind) {\n      const lh = this.lookahead();\n\n      if (kind === \"type\" && lh.type === 54) {\n        this.unexpected(lh.start);\n      }\n\n      if (isMaybeDefaultImport(lh) || lh.type === 13 || lh.type === 54) {\n        this.next();\n        node.importKind = kind;\n      }\n    }\n\n    return super.maybeParseDefaultImportSpecifier(node);\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    const firstIdentIsString = this.match(4);\n    const firstIdent = this.parseModuleExportName();\n    let specifierTypeKind = null;\n\n    if (firstIdent.type === \"Identifier\") {\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n    }\n\n    let isBinding = false;\n\n    if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n      const as_ident = this.parseIdentifier(true);\n\n      if (specifierTypeKind !== null && !this.match(5) && !tokenIsKeyword(this.state.type)) {\n        specifier.imported = as_ident;\n        specifier.importKind = specifierTypeKind;\n        specifier.local = cloneIdentifier(as_ident);\n      } else {\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = this.parseIdentifier();\n      }\n    } else {\n      if (specifierTypeKind !== null && (this.match(5) || tokenIsKeyword(this.state.type))) {\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n      } else {\n        if (firstIdentIsString) {\n          throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, firstIdent.value);\n        }\n\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n      }\n\n      if (this.eatContextual(\"as\")) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        isBinding = true;\n        specifier.local = cloneIdentifier(specifier.imported);\n      }\n    }\n\n    const nodeIsTypeImport = hasTypeImportKind(node);\n    const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n    if (nodeIsTypeImport && specifierIsTypeImport) {\n      this.raise(specifier.start, FlowErrors.ImportTypeShorthandOnlyInPureImport);\n    }\n\n    if (nodeIsTypeImport || specifierIsTypeImport) {\n      this.checkReservedType(specifier.local.name, specifier.local.start, true);\n    }\n\n    if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n      this.checkReservedWord(specifier.local.name, specifier.start, true, true);\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 77:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const kind = node.kind;\n\n    if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (this.match(22)) {\n      decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(22)) {\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = true;\n      node.returnType = this.flowParseTypeAnnotation();\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(22) || super.shouldParseAsyncArrow();\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    var _jsx;\n\n    let state = null;\n    let jsx;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(94) || this.isRelational(\"<\"))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n      const curContext = context[context.length - 1];\n\n      if (curContext === types.j_oTag) {\n        context.length -= 2;\n      } else if (curContext === types.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if ((_jsx = jsx) != null && _jsx.error || this.isRelational(\"<\")) {\n      var _jsx2, _jsx3;\n\n      state = state || this.state.clone();\n      let typeParameters;\n      const arrow = this.tryParse(abort => {\n        var _arrowExpression$extr;\n\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {\n          const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n          this.resetStartLocationFromNode(result, typeParameters);\n          return result;\n        });\n        if ((_arrowExpression$extr = arrowExpression.extra) != null && _arrowExpression$extr.parenthesized) abort();\n        const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n        if (expr.type !== \"ArrowFunctionExpression\") abort();\n        expr.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(expr, typeParameters);\n        return arrowExpression;\n      }, state);\n      let arrowExpression = null;\n\n      if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\n        if (!arrow.error && !arrow.aborted) {\n          if (arrow.node.async) {\n            this.raise(typeParameters.start, FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction);\n          }\n\n          return arrow.node;\n        }\n\n        arrowExpression = arrow.node;\n      }\n\n      if ((_jsx2 = jsx) != null && _jsx2.node) {\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrowExpression) {\n        this.state = arrow.failState;\n        return arrowExpression;\n      }\n\n      if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      throw this.raise(typeParameters.start, FlowErrors.UnexpectedTokenAfterTypeParameter);\n    }\n\n    return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n  }\n\n  parseArrow(node) {\n    if (this.match(22)) {\n      const result = this.tryParse(() => {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        if (this.canInsertSemicolon()) this.unexpected();\n        if (!this.match(27)) this.unexpected();\n        return typeNode;\n      });\n      if (result.thrown) return null;\n      if (result.error) this.state = result.failState;\n      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n    }\n\n    return super.parseArrow(node);\n  }\n\n  shouldParseArrow(params) {\n    return this.match(22) || super.shouldParseArrow(params);\n  }\n\n  setArrowFunctionParameters(node, params) {\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      node.params = params;\n    } else {\n      super.setArrowFunctionParameters(node, params);\n    }\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction) {\n    if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      return;\n    }\n\n    for (let i = 0; i < node.params.length; i++) {\n      if (this.isThisParam(node.params[i]) && i > 0) {\n        this.raise(node.params[i].start, FlowErrors.ThisParamMustBeFirst);\n      }\n    }\n\n    return super.checkParams(...arguments);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.arguments = this.parseCallExpressionArguments(19, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (base.type === \"Identifier\" && base.name === \"async\" && this.isRelational(\"<\")) {\n      const state = this.state.clone();\n      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n      const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);\n      if (result.node && !result.error) return result.node;\n\n      if (arrow.node) {\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (result.node) {\n        this.state = result.failState;\n        return result.node;\n      }\n\n      throw arrow.error || result.error;\n    }\n\n    return super.parseSubscripts(base, startPos, startLoc, noCalls);\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n    if (this.match(26) && this.isLookaheadToken_lt()) {\n      subscriptState.optionalChainMember = true;\n\n      if (noCalls) {\n        subscriptState.stop = true;\n        return base;\n      }\n\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.typeArguments = this.flowParseTypeParameterInstantiation();\n      this.expect(18);\n      node.arguments = this.parseCallExpressionArguments(19, false);\n      node.optional = true;\n      return this.finishCallExpression(node, true);\n    } else if (!noCalls && this.shouldParseTypes() && this.isRelational(\"<\")) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      const result = this.tryParse(() => {\n        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n        this.expect(18);\n        node.arguments = this.parseCallExpressionArguments(19, false);\n        if (subscriptState.optionalChainMember) node.optional = false;\n        return this.finishCallExpression(node, subscriptState.optionalChainMember);\n      });\n\n      if (result.node) {\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);\n  }\n\n  parseNewArguments(node) {\n    let targs = null;\n\n    if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n    }\n\n    node.typeArguments = targs;\n    super.parseNewArguments(node);\n  }\n\n  parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.parseFunctionParams(node);\n    if (!this.parseArrow(node)) return;\n    return this.parseArrowExpression(node, undefined, true);\n  }\n\n  readToken_mult_modulo(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 47 && this.state.hasFlowComment) {\n      this.state.hasFlowComment = false;\n      this.state.pos += 2;\n      this.nextToken();\n      return;\n    }\n\n    super.readToken_mult_modulo(code);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 124 && next === 125) {\n      this.finishOp(17, 2);\n      return;\n    }\n\n    super.readToken_pipe_amp(code);\n  }\n\n  parseTopLevel(file, program) {\n    const fileNode = super.parseTopLevel(file, program);\n\n    if (this.state.hasFlowComment) {\n      this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n    }\n\n    return fileNode;\n  }\n\n  skipBlockComment() {\n    if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n      if (this.state.hasFlowComment) {\n        this.unexpected(null, FlowErrors.NestedFlowComment);\n      }\n\n      this.hasFlowCommentCompletion();\n      this.state.pos += this.skipFlowComment();\n      this.state.hasFlowComment = true;\n      return;\n    }\n\n    if (this.state.hasFlowComment) {\n      const end = this.input.indexOf(\"*-/\", this.state.pos += 2);\n\n      if (end === -1) {\n        throw this.raise(this.state.pos - 2, ErrorMessages.UnterminatedComment);\n      }\n\n      this.state.pos = end + 3;\n      return;\n    }\n\n    return super.skipBlockComment();\n  }\n\n  skipFlowComment() {\n    const {\n      pos\n    } = this.state;\n    let shiftToFirstNonWhiteSpace = 2;\n\n    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n      shiftToFirstNonWhiteSpace++;\n    }\n\n    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n    if (ch2 === 58 && ch3 === 58) {\n      return shiftToFirstNonWhiteSpace + 2;\n    }\n\n    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n      return shiftToFirstNonWhiteSpace + 12;\n    }\n\n    if (ch2 === 58 && ch3 !== 58) {\n      return shiftToFirstNonWhiteSpace;\n    }\n\n    return false;\n  }\n\n  hasFlowCommentCompletion() {\n    const end = this.input.indexOf(\"*/\", this.state.pos);\n\n    if (end === -1) {\n      throw this.raise(this.state.pos, ErrorMessages.UnterminatedComment);\n    }\n  }\n\n  flowEnumErrorBooleanMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumBooleanMemberNotInitialized, memberName, enumName);\n  }\n\n  flowEnumErrorInvalidMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n    this.raise(pos, FlowErrors.EnumInvalidMemberName, memberName, suggestion, enumName);\n  }\n\n  flowEnumErrorDuplicateMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n  }\n\n  flowEnumErrorInconsistentMemberValues(pos, {\n    enumName\n  }) {\n    this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n  }\n\n  flowEnumErrorInvalidExplicitType(pos, {\n    enumName,\n    suppliedType\n  }) {\n    return this.raise(pos, suppliedType === null ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors.EnumInvalidExplicitType, enumName, suppliedType);\n  }\n\n  flowEnumErrorInvalidMemberInitializer(pos, {\n    enumName,\n    explicitType,\n    memberName\n  }) {\n    let message = null;\n\n    switch (explicitType) {\n      case \"boolean\":\n      case \"number\":\n      case \"string\":\n        message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n        break;\n\n      case \"symbol\":\n        message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n        break;\n\n      default:\n        message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n    }\n\n    return this.raise(pos, message, enumName, memberName, explicitType);\n  }\n\n  flowEnumErrorNumberMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumNumberMemberNotInitialized, enumName, memberName);\n  }\n\n  flowEnumErrorStringMemberInconsistentlyInitailized(pos, {\n    enumName\n  }) {\n    this.raise(pos, FlowErrors.EnumStringMemberInconsistentlyInitailized, enumName);\n  }\n\n  flowEnumMemberInit() {\n    const startPos = this.state.start;\n\n    const endOfInit = () => this.match(20) || this.match(16);\n\n    switch (this.state.type) {\n      case 0:\n        {\n          const literal = this.parseNumericLiteral(this.state.value);\n\n          if (endOfInit()) {\n            return {\n              type: \"number\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case 4:\n        {\n          const literal = this.parseStringLiteral(this.state.value);\n\n          if (endOfInit()) {\n            return {\n              type: \"string\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case 84:\n      case 85:\n        {\n          const literal = this.parseBooleanLiteral(this.match(84));\n\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      default:\n        return {\n          type: \"invalid\",\n          pos: startPos\n        };\n    }\n  }\n\n  flowEnumMemberRaw() {\n    const pos = this.state.start;\n    const id = this.parseIdentifier(true);\n    const init = this.eat(35) ? this.flowEnumMemberInit() : {\n      type: \"none\",\n      pos\n    };\n    return {\n      id,\n      init\n    };\n  }\n\n  flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {\n    const {\n      explicitType\n    } = context;\n\n    if (explicitType === null) {\n      return;\n    }\n\n    if (explicitType !== expectedType) {\n      this.flowEnumErrorInvalidMemberInitializer(pos, context);\n    }\n  }\n\n  flowEnumMembers({\n    enumName,\n    explicitType\n  }) {\n    const seenNames = new Set();\n    const members = {\n      booleanMembers: [],\n      numberMembers: [],\n      stringMembers: [],\n      defaultedMembers: []\n    };\n    let hasUnknownMembers = false;\n\n    while (!this.match(16)) {\n      if (this.eat(29)) {\n        hasUnknownMembers = true;\n        break;\n      }\n\n      const memberNode = this.startNode();\n      const {\n        id,\n        init\n      } = this.flowEnumMemberRaw();\n      const memberName = id.name;\n\n      if (memberName === \"\") {\n        continue;\n      }\n\n      if (/^[a-z]/.test(memberName)) {\n        this.flowEnumErrorInvalidMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      if (seenNames.has(memberName)) {\n        this.flowEnumErrorDuplicateMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      seenNames.add(memberName);\n      const context = {\n        enumName,\n        explicitType,\n        memberName\n      };\n      memberNode.id = id;\n\n      switch (init.type) {\n        case \"boolean\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"boolean\");\n            memberNode.init = init.value;\n            members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n            break;\n          }\n\n        case \"number\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n            break;\n          }\n\n        case \"string\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n            break;\n          }\n\n        case \"invalid\":\n          {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n          }\n\n        case \"none\":\n          {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(init.pos, context);\n                break;\n\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                break;\n\n              default:\n                members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n            }\n          }\n      }\n\n      if (!this.match(16)) {\n        this.expect(20);\n      }\n    }\n\n    return {\n      members,\n      hasUnknownMembers\n    };\n  }\n\n  flowEnumStringMembers(initializedMembers, defaultedMembers, {\n    enumName\n  }) {\n    if (initializedMembers.length === 0) {\n      return defaultedMembers;\n    } else if (defaultedMembers.length === 0) {\n      return initializedMembers;\n    } else if (defaultedMembers.length > initializedMembers.length) {\n      for (const member of initializedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return defaultedMembers;\n    } else {\n      for (const member of defaultedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return initializedMembers;\n    }\n  }\n\n  flowEnumParseExplicitType({\n    enumName\n  }) {\n    if (this.eatContextual(\"of\")) {\n      if (!this.match(5)) {\n        throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: null\n        });\n      }\n\n      const {\n        value\n      } = this.state;\n      this.next();\n\n      if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n        this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: value\n        });\n      }\n\n      return value;\n    }\n\n    return null;\n  }\n\n  flowEnumBody(node, {\n    enumName,\n    nameLoc\n  }) {\n    const explicitType = this.flowEnumParseExplicitType({\n      enumName\n    });\n    this.expect(13);\n    const {\n      members,\n      hasUnknownMembers\n    } = this.flowEnumMembers({\n      enumName,\n      explicitType\n    });\n    node.hasUnknownMembers = hasUnknownMembers;\n\n    switch (explicitType) {\n      case \"boolean\":\n        node.explicitType = true;\n        node.members = members.booleanMembers;\n        this.expect(16);\n        return this.finishNode(node, \"EnumBooleanBody\");\n\n      case \"number\":\n        node.explicitType = true;\n        node.members = members.numberMembers;\n        this.expect(16);\n        return this.finishNode(node, \"EnumNumberBody\");\n\n      case \"string\":\n        node.explicitType = true;\n        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n          enumName\n        });\n        this.expect(16);\n        return this.finishNode(node, \"EnumStringBody\");\n\n      case \"symbol\":\n        node.members = members.defaultedMembers;\n        this.expect(16);\n        return this.finishNode(node, \"EnumSymbolBody\");\n\n      default:\n        {\n          const empty = () => {\n            node.members = [];\n            this.expect(16);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n\n          node.explicitType = false;\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName\n            });\n            this.expect(16);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.booleanMembers;\n            this.expect(16);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.numberMembers;\n            this.expect(16);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, {\n              enumName\n            });\n            return empty();\n          }\n        }\n    }\n  }\n\n  flowParseEnumDeclaration(node) {\n    const id = this.parseIdentifier();\n    node.id = id;\n    node.body = this.flowEnumBody(this.startNode(), {\n      enumName: id.name,\n      nameLoc: id.start\n    });\n    return this.finishNode(node, \"EnumDeclaration\");\n  }\n\n  isLookaheadToken_lt() {\n    const next = this.nextTokenStart();\n\n    if (this.input.charCodeAt(next) === 60) {\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== 60 && afterNext !== 61;\n    }\n\n    return false;\n  }\n\n  maybeUnwrapTypeCastExpression(node) {\n    return node.type === \"TypeCastExpression\" ? node.expression : node;\n  }\n\n};\n\nconst entities = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\nconst JsxErrors = makeErrorTemplates({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>.\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression: \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n}, ErrorCodes.SyntaxError, \"jsx\");\ntypes.j_oTag = new TokContext(\"<tag\");\ntypes.j_cTag = new TokContext(\"</tag\");\ntypes.j_expr = new TokContext(\"<tag>...</tag>\", true);\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = superClass => class extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.exprAllowed) {\n              ++this.state.pos;\n              return this.finishToken(94);\n            }\n\n            return super.getTokenFromCode(ch);\n          }\n\n          out += this.input.slice(chunkStart, this.state.pos);\n          return this.finishToken(93, out);\n\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n\n        case 62:\n        case 125:\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n\n      }\n    }\n  }\n\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    return this.finishToken(4, out);\n  }\n\n  jsxReadEntity() {\n    let str = \"\";\n    let count = 0;\n    let entity;\n    let ch = this.input[this.state.pos];\n    const startPos = ++this.state.pos;\n\n    while (this.state.pos < this.length && count++ < 10) {\n      ch = this.input[this.state.pos++];\n\n      if (ch === \";\") {\n        if (str[0] === \"#\") {\n          if (str[1] === \"x\") {\n            str = str.substr(2);\n\n            if (HEX_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 16));\n            }\n          } else {\n            str = str.substr(1);\n\n            if (DECIMAL_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 10));\n            }\n          }\n        } else {\n          entity = entities[str];\n        }\n\n        break;\n      }\n\n      str += ch;\n    }\n\n    if (!entity) {\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    return entity;\n  }\n\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n\n    return this.finishToken(92, this.input.slice(start, this.state.pos));\n  }\n\n  jsxParseIdentifier() {\n    const node = this.startNode();\n\n    if (this.match(92)) {\n      node.name = this.state.value;\n    } else if (tokenIsKeyword(this.state.type)) {\n      node.name = tokenLabelName(this.state.type);\n    } else {\n      this.unexpected();\n    }\n\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n\n  jsxParseNamespacedName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(22)) return name;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n\n  jsxParseElementName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n\n    if (node.type === \"JSXNamespacedName\") {\n      return node;\n    }\n\n    while (this.eat(24)) {\n      const newNode = this.startNodeAt(startPos, startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n\n    return node;\n  }\n\n  jsxParseAttributeValue() {\n    let node;\n\n    switch (this.state.type) {\n      case 13:\n        node = this.startNode();\n        this.next();\n        node = this.jsxParseExpressionContainer(node);\n\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          this.raise(node.start, JsxErrors.AttributeIsEmpty);\n        }\n\n        return node;\n\n      case 94:\n      case 4:\n        return this.parseExprAtom();\n\n      default:\n        throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n    }\n  }\n\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n  }\n\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.expect(16);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n\n  jsxParseExpressionContainer(node) {\n    if (this.match(16)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      const expression = this.parseExpression();\n      node.expression = expression;\n    }\n\n    this.expect(16);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n\n  jsxParseAttribute() {\n    const node = this.startNode();\n\n    if (this.eat(13)) {\n      this.expect(29);\n      node.argument = this.parseMaybeAssignAllowIn();\n      this.expect(16);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(35) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n\n  jsxParseOpeningElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(95)) {\n      this.expect(95);\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n\n    while (!this.match(55) && !this.match(95)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n\n    node.attributes = attributes;\n    node.selfClosing = this.eat(55);\n    this.expect(95);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n\n  jsxParseClosingElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(95)) {\n      this.expect(95);\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    this.expect(95);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n\n  jsxParseElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n    let closingElement = null;\n\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case 94:\n            startPos = this.state.start;\n            startLoc = this.state.startLoc;\n            this.next();\n\n            if (this.eat(55)) {\n              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n\n            children.push(this.jsxParseElementAt(startPos, startLoc));\n            break;\n\n          case 93:\n            children.push(this.parseExprAtom());\n            break;\n\n          case 13:\n            {\n              const node = this.startNode();\n              this.next();\n\n              if (this.match(29)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      if (isFragment(openingElement) && !isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagFragment);\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n        }\n      }\n    }\n\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n\n    node.children = children;\n\n    if (this.isRelational(\"<\")) {\n      throw this.raise(this.state.start, JsxErrors.UnwrappedAdjacentJSXElements);\n    }\n\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n\n  jsxParseElement() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startPos, startLoc);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.match(93)) {\n      return this.parseLiteral(this.state.value, \"JSXText\");\n    } else if (this.match(94)) {\n      return this.jsxParseElement();\n    } else if (this.isRelational(\"<\") && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.finishToken(94);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  createLookaheadState(state) {\n    const lookaheadState = super.createLookaheadState(state);\n    lookaheadState.inPropertyName = state.inPropertyName;\n    return lookaheadState;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inPropertyName) return super.getTokenFromCode(code);\n    const context = this.curContext();\n\n    if (context === types.j_expr) {\n      return this.jsxReadToken();\n    }\n\n    if (context === types.j_oTag || context === types.j_cTag) {\n      if (isIdentifierStart(code)) {\n        return this.jsxReadWord();\n      }\n\n      if (code === 62) {\n        ++this.state.pos;\n        return this.finishToken(95);\n      }\n\n      if ((code === 34 || code === 39) && context === types.j_oTag) {\n        return this.jsxReadString(code);\n      }\n    }\n\n    if (code === 60 && this.state.exprAllowed && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      return this.finishToken(94);\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  updateContext(prevType) {\n    super.updateContext(prevType);\n    const {\n      context,\n      type\n    } = this.state;\n\n    if (type === 55 && prevType === 94) {\n      context.splice(-2, 2, types.j_cTag);\n      this.state.exprAllowed = false;\n    } else if (type === 94) {\n      context.push(types.j_expr, types.j_oTag);\n    } else if (type === 95) {\n      const out = context.pop();\n\n      if (out === types.j_oTag && prevType === 55 || out === types.j_cTag) {\n        context.pop();\n        this.state.exprAllowed = context[context.length - 1] === types.j_expr;\n      } else {\n        this.state.exprAllowed = true;\n      }\n    } else if (tokenIsKeyword(type) && (prevType === 24 || prevType === 26)) {\n      this.state.exprAllowed = false;\n    } else {\n      this.state.exprAllowed = tokenComesBeforeExpression(type);\n    }\n  }\n\n};\n\nclass TypeScriptScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.types = new Set();\n    this.enums = new Set();\n    this.constEnums = new Set();\n    this.classes = new Set();\n    this.exportOnlyBindings = new Set();\n  }\n\n}\n\nclass TypeScriptScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n\n      scope.types.add(name);\n    }\n\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n\n      return true;\n    }\n\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        return false;\n      }\n    }\n\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id) {\n    const topLevelScope = this.scopeStack[0];\n    const {\n      name\n    } = id;\n\n    if (!topLevelScope.types.has(name) && !topLevelScope.exportOnlyBindings.has(name)) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nconst TSErrors = makeErrorTemplates({\n  AbstractMethodHasImplementation: \"Method '%0' cannot have an implementation because it is marked abstract.\",\n  AbstractPropertyHasInitializer: \"Property '%0' cannot have an initializer because it is marked abstract.\",\n  AccesorCannotDeclareThisParameter: \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstructorHasTypeParameters: \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: \"'declare' is not allowed in %0ters.\",\n  DeclareClassFieldHasInitializer: \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation: \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier: \"Accessibility modifier already seen.\",\n  DuplicateModifier: \"Duplicate modifier: '%0'.\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare: \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  IncompatibleModifiers: \"'%0' modifier cannot be used with '%1' modifier.\",\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: \"Index signatures cannot have an accessibility modifier ('%0').\",\n  IndexSignatureHasDeclare: \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride: \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier.\",\n  InvalidModifierOnTypeMember: \"'%0' modifier cannot appear on a type member.\",\n  InvalidModifiersOrder: \"'%0' modifier must precede '%1' modifier.\",\n  InvalidTupleMemberLabel: \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName: \"'interface' declarations must be followed by an identifier.\",\n  MixedLabeledAndUnlabeledElements: \"Tuple members must all have names or all not have names.\",\n  NonAbstractClassHasAbstractMethod: \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer: \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass: \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: \"Private elements cannot have an accessibility modifier ('%0').\",\n  ReadonlyForMethodSignature: \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  SetAccesorCannotHaveOptionalParameter: \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter: \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType: \"A 'set' accessor cannot have a return type annotation.\",\n  StaticBlockCannotHaveModifier: \"Static class blocks cannot have any modifier.\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed: \"A type-only import can specify a default import or named bindings, but not both.\",\n  UnexpectedParameterModifier: \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0.\"\n}, ErrorCodes.SyntaxError, \"typescript\");\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier) {\n  return modifier === \"private\" || modifier === \"public\" || modifier === \"protected\";\n}\n\nvar typescript = superClass => class extends superClass {\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n\n  tsIsIdentifier() {\n    return this.match(5);\n  }\n\n  tsTokenCanFollowModifier() {\n    return (this.match(8) || this.match(13) || this.match(54) || this.match(29) || this.match(6) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();\n  }\n\n  tsNextTokenCanFollowModifier() {\n    this.next();\n    return this.tsTokenCanFollowModifier();\n  }\n\n  tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {\n    if (!this.match(5)) {\n      return undefined;\n    }\n\n    const modifier = this.state.value;\n\n    if (allowedModifiers.indexOf(modifier) !== -1) {\n      if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n        return undefined;\n      }\n\n      if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n        return modifier;\n      }\n    }\n\n    return undefined;\n  }\n\n  tsParseModifiers(modified, allowedModifiers, disallowedModifiers, errorTemplate, stopOnStartOfClassStaticBlock) {\n    const enforceOrder = (pos, modifier, before, after) => {\n      if (modifier === before && modified[after]) {\n        this.raise(pos, TSErrors.InvalidModifiersOrder, before, after);\n      }\n    };\n\n    const incompatible = (pos, modifier, mod1, mod2) => {\n      if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {\n        this.raise(pos, TSErrors.IncompatibleModifiers, mod1, mod2);\n      }\n    };\n\n    for (;;) {\n      const startPos = this.state.start;\n      const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);\n      if (!modifier) break;\n\n      if (tsIsAccessModifier(modifier)) {\n        if (modified.accessibility) {\n          this.raise(startPos, TSErrors.DuplicateAccessibilityModifier);\n        } else {\n          enforceOrder(startPos, modifier, modifier, \"override\");\n          enforceOrder(startPos, modifier, modifier, \"static\");\n          enforceOrder(startPos, modifier, modifier, \"readonly\");\n          modified.accessibility = modifier;\n        }\n      } else {\n        if (Object.hasOwnProperty.call(modified, modifier)) {\n          this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n        } else {\n          enforceOrder(startPos, modifier, \"static\", \"readonly\");\n          enforceOrder(startPos, modifier, \"static\", \"override\");\n          enforceOrder(startPos, modifier, \"override\", \"readonly\");\n          enforceOrder(startPos, modifier, \"abstract\", \"override\");\n          incompatible(startPos, modifier, \"declare\", \"override\");\n          incompatible(startPos, modifier, \"static\", \"abstract\");\n        }\n\n        modified[modifier] = true;\n      }\n\n      if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {\n        this.raise(startPos, errorTemplate, modifier);\n      }\n    }\n  }\n\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(16);\n\n      case \"HeritageClauseElement\":\n        return this.match(13);\n\n      case \"TupleElementTypes\":\n        return this.match(11);\n\n      case \"TypeParametersOrArguments\":\n        return this.isRelational(\">\");\n    }\n\n    throw new Error(\"Unreachable\");\n  }\n\n  tsParseList(kind, parseElement) {\n    const result = [];\n\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n\n    return result;\n  }\n\n  tsParseDelimitedList(kind, parseElement) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true));\n  }\n\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess) {\n    const result = [];\n\n    for (;;) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      const element = parseElement();\n\n      if (element == null) {\n        return undefined;\n      }\n\n      result.push(element);\n\n      if (this.eat(20)) {\n        continue;\n      }\n\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      if (expectSuccess) {\n        this.expect(20);\n      }\n\n      return undefined;\n    }\n\n    return result;\n  }\n\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(8);\n      } else {\n        this.expectRelational(\"<\");\n      }\n    }\n\n    const result = this.tsParseDelimitedList(kind, parseElement);\n\n    if (bracket) {\n      this.expect(11);\n    } else {\n      this.expectRelational(\">\");\n    }\n\n    return result;\n  }\n\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(82);\n    this.expect(18);\n\n    if (!this.match(4)) {\n      this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n    }\n\n    node.argument = this.parseExprAtom();\n    this.expect(19);\n\n    if (this.eat(24)) {\n      node.qualifier = this.tsParseEntityName(true);\n    }\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSImportType\");\n  }\n\n  tsParseEntityName(allowReservedWords) {\n    let entity = this.parseIdentifier();\n\n    while (this.eat(24)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n\n    return entity;\n  }\n\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName(false);\n\n    if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    node.asserts = false;\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(86);\n\n    if (this.match(82)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName(true);\n    }\n\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n\n  tsParseTypeParameter() {\n    const node = this.startNode();\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsEatThenParseType(80);\n    node.default = this.tsEatThenParseType(35);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsTryParseTypeParameters() {\n    if (this.isRelational(\"<\")) {\n      return this.tsParseTypeParameters();\n    }\n  }\n\n  tsParseTypeParameters() {\n    const node = this.startNode();\n\n    if (this.isRelational(\"<\") || this.match(94)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true);\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeParameters);\n    }\n\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n\n  tsTryNextParseConstantContext() {\n    if (this.lookahead().type === 74) {\n      this.next();\n      return this.tsParseTypeReference();\n    }\n\n    return null;\n  }\n\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === 27;\n    signature.typeParameters = this.tsTryParseTypeParameters();\n    this.expect(18);\n    signature.parameters = this.tsParseBindingListForSignature();\n\n    if (returnTokenRequired) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n\n  tsParseBindingListForSignature() {\n    return this.parseBindingList(19, 41).map(pattern => {\n      if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n        this.raise(pattern.start, TSErrors.UnsupportedSignatureParameterKind, pattern.type);\n      }\n\n      return pattern;\n    });\n  }\n\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(20) && !this.isLineTerminator()) {\n      this.expect(21);\n    }\n  }\n\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(22, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n    return this.eat(5) && this.match(22);\n  }\n\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(8) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return undefined;\n    }\n\n    this.expect(8);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(11);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(25)) node.optional = true;\n    const nodeAny = node;\n\n    if (this.match(18) || this.isRelational(\"<\")) {\n      if (readonly) {\n        this.raise(node.start, TSErrors.ReadonlyForMethodSignature);\n      }\n\n      const method = nodeAny;\n\n      if (method.kind && this.isRelational(\"<\")) {\n        this.raise(this.state.pos, TSErrors.AccesorCannotHaveTypeParameters);\n      }\n\n      this.tsFillSignature(22, method);\n      this.tsParseTypeMemberSemicolon();\n\n      if (method.kind === \"get\") {\n        if (method.parameters.length > 0) {\n          this.raise(this.state.pos, ErrorMessages.BadGetterArity);\n\n          if (this.isThisParam(method.parameters[0])) {\n            this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);\n          }\n        }\n      } else if (method.kind === \"set\") {\n        if (method.parameters.length !== 1) {\n          this.raise(this.state.pos, ErrorMessages.BadSetterArity);\n        } else {\n          const firstParameter = method.parameters[0];\n\n          if (this.isThisParam(firstParameter)) {\n            this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);\n          }\n\n          if (firstParameter.type === \"Identifier\" && firstParameter.optional) {\n            this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveOptionalParameter);\n          }\n\n          if (firstParameter.type === \"RestElement\") {\n            this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveRestParameter);\n          }\n        }\n\n        if (method.typeAnnotation) {\n          this.raise(method.typeAnnotation.start, TSErrors.SetAccesorCannotHaveReturnType);\n        }\n      } else {\n        method.kind = \"method\";\n      }\n\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n\n  tsParseTypeMember() {\n    const node = this.startNode();\n\n    if (this.match(18) || this.isRelational(\"<\")) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n    }\n\n    if (this.match(76)) {\n      const id = this.startNode();\n      this.next();\n\n      if (this.match(18) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n      } else {\n        node.key = this.createIdentifier(id, \"new\");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n\n    this.tsParseModifiers(node, [\"readonly\"], [\"declare\", \"abstract\", \"private\", \"protected\", \"public\", \"static\", \"override\"], TSErrors.InvalidModifierOnTypeMember);\n    const idx = this.tsTryParseIndexSignature(node);\n\n    if (idx) {\n      return idx;\n    }\n\n    this.parsePropertyName(node, false);\n\n    if (!node.computed && node.key.type === \"Identifier\" && (node.key.name === \"get\" || node.key.name === \"set\") && this.tsTokenCanFollowModifier()) {\n      node.kind = node.key.name;\n      this.parsePropertyName(node, false);\n    }\n\n    return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n  }\n\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n\n  tsParseObjectTypeMembers() {\n    this.expect(13);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(16);\n    return members;\n  }\n\n  tsIsStartOfMappedType() {\n    this.next();\n\n    if (this.eat(52)) {\n      return this.isContextual(\"readonly\");\n    }\n\n    if (this.isContextual(\"readonly\")) {\n      this.next();\n    }\n\n    if (!this.match(8)) {\n      return false;\n    }\n\n    this.next();\n\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n\n    this.next();\n    return this.match(57);\n  }\n\n  tsParseMappedTypeParameter() {\n    const node = this.startNode();\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsExpectThenParseType(57);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(13);\n\n    if (this.match(52)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(\"readonly\");\n    } else if (this.eatContextual(\"readonly\")) {\n      node.readonly = true;\n    }\n\n    this.expect(8);\n    node.typeParameter = this.tsParseMappedTypeParameter();\n    node.nameType = this.eatContextual(\"as\") ? this.tsParseType() : null;\n    this.expect(11);\n\n    if (this.match(52)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(25);\n    } else if (this.eat(25)) {\n      node.optional = true;\n    }\n\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(16);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    let labeledElements = null;\n    node.elementTypes.forEach(elementNode => {\n      var _labeledElements;\n\n      let {\n        type\n      } = elementNode;\n\n      if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\n        this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n      }\n\n      seenOptionalElement = seenOptionalElement || type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\";\n\n      if (type === \"TSRestType\") {\n        elementNode = elementNode.typeAnnotation;\n        type = elementNode.type;\n      }\n\n      const isLabeled = type === \"TSNamedTupleMember\";\n      labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;\n\n      if (labeledElements !== isLabeled) {\n        this.raise(elementNode.start, TSErrors.MixedLabeledAndUnlabeledElements);\n      }\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n\n  tsParseTupleElementType() {\n    const {\n      start: startPos,\n      startLoc\n    } = this.state;\n    const rest = this.eat(29);\n    let type = this.tsParseType();\n    const optional = this.eat(25);\n    const labeled = this.eat(22);\n\n    if (labeled) {\n      const labeledNode = this.startNodeAtNode(type);\n      labeledNode.optional = optional;\n\n      if (type.type === \"TSTypeReference\" && !type.typeParameters && type.typeName.type === \"Identifier\") {\n        labeledNode.label = type.typeName;\n      } else {\n        this.raise(type.start, TSErrors.InvalidTupleMemberLabel);\n        labeledNode.label = type;\n      }\n\n      labeledNode.elementType = this.tsParseType();\n      type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n    } else if (optional) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n\n    if (rest) {\n      const restNode = this.startNodeAt(startPos, startLoc);\n      restNode.typeAnnotation = type;\n      type = this.finishNode(restNode, \"TSRestType\");\n    }\n\n    return type;\n  }\n\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(18);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(19);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n\n  tsParseFunctionOrConstructorType(type, abstract) {\n    const node = this.startNode();\n\n    if (type === \"TSConstructorType\") {\n      node.abstract = !!abstract;\n      if (abstract) this.next();\n      this.next();\n    }\n\n    this.tsFillSignature(27, node);\n    return this.finishNode(node, type);\n  }\n\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n\n    node.literal = (() => {\n      switch (this.state.type) {\n        case 0:\n        case 1:\n        case 4:\n        case 84:\n        case 85:\n          return this.parseExprAtom();\n\n        default:\n          throw this.unexpected();\n      }\n    })();\n\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseTemplateLiteralType() {\n    const node = this.startNode();\n    node.literal = this.parseTemplate(false);\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  parseTemplateSubstitution() {\n    if (this.state.inType) return this.tsParseType();\n    return super.parseTemplateSubstitution();\n  }\n\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case 5:\n      case 87:\n      case 83:\n        {\n          const type = this.match(87) ? \"TSVoidKeyword\" : this.match(83) ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n          if (type !== undefined && this.lookaheadCharCode() !== 46) {\n            const node = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n\n          return this.tsParseTypeReference();\n        }\n\n      case 4:\n      case 0:\n      case 1:\n      case 84:\n      case 85:\n        return this.tsParseLiteralTypeNode();\n\n      case 52:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n          const nextToken = this.lookahead();\n\n          if (nextToken.type !== 0 && nextToken.type !== 1) {\n            throw this.unexpected();\n          }\n\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n\n        break;\n\n      case 77:\n        return this.tsParseThisTypeOrThisTypePredicate();\n\n      case 86:\n        return this.tsParseTypeQuery();\n\n      case 82:\n        return this.tsParseImportType();\n\n      case 13:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n      case 8:\n        return this.tsParseTupleType();\n\n      case 18:\n        return this.tsParseParenthesizedType();\n\n      case 30:\n        return this.tsParseTemplateLiteralType();\n    }\n\n    throw this.unexpected();\n  }\n\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n\n    while (!this.hasPrecedingLineBreak() && this.eat(8)) {\n      if (this.match(11)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(11);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(11);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n\n    return type;\n  }\n\n  tsParseTypeOperator(operator) {\n    const node = this.startNode();\n    this.expectContextual(operator);\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n    if (operator === \"readonly\") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case \"TSTupleType\":\n      case \"TSArrayType\":\n        return;\n\n      default:\n        this.raise(node.start, TSErrors.UnexpectedReadonly);\n    }\n  }\n\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(\"infer\");\n    const typeParameter = this.startNode();\n    typeParameter.name = this.tsParseTypeParameterName();\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n\n  tsParseTypeOperatorOrHigher() {\n    const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw => this.isContextual(kw));\n    return operator ? this.tsParseTypeOperator(operator) : this.isContextual(\"infer\") ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n  }\n\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    const node = this.startNode();\n    const hasLeadingOperator = this.eat(operator);\n    const types = [];\n\n    do {\n      types.push(parseConstituentType());\n    } while (this.eat(operator));\n\n    if (types.length === 1 && !hasLeadingOperator) {\n      return types[0];\n    }\n\n    node.types = types;\n    return this.finishNode(node, kind);\n  }\n\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), 48);\n  }\n\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), 46);\n  }\n\n  tsIsStartOfFunctionType() {\n    if (this.isRelational(\"<\")) {\n      return true;\n    }\n\n    return this.match(18) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n\n  tsSkipParameterStart() {\n    if (this.match(5) || this.match(77)) {\n      this.next();\n      return true;\n    }\n\n    if (this.match(13)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(13)) {\n          ++braceStackCounter;\n        } else if (this.match(16)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    if (this.match(8)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(8)) {\n          ++braceStackCounter;\n        } else if (this.match(11)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n\n    if (this.match(19) || this.match(29)) {\n      return true;\n    }\n\n    if (this.tsSkipParameterStart()) {\n      if (this.match(22) || this.match(20) || this.match(25) || this.match(35)) {\n        return true;\n      }\n\n      if (this.match(19)) {\n        this.next();\n\n        if (this.match(27)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const node = this.startNode();\n      const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n\n      if (asserts && this.match(77)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n\n        if (thisTypePredicate.type === \"TSThisType\") {\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          node.typeAnnotation = null;\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n        } else {\n          this.resetStartLocationFromNode(thisTypePredicate, node);\n          thisTypePredicate.asserts = true;\n        }\n\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        node.typeAnnotation = null;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const type = this.tsParseTypeAnnotation(false);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    return this.match(22) ? this.tsParseTypeOrTypePredicateAnnotation(22) : undefined;\n  }\n\n  tsTryParseTypeAnnotation() {\n    return this.match(22) ? this.tsParseTypeAnnotation() : undefined;\n  }\n\n  tsTryParseType() {\n    return this.tsEatThenParseType(22);\n  }\n\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n\n  tsParseTypePredicateAsserts() {\n    if (!this.match(5) || this.state.value !== \"asserts\") {\n      return false;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.next();\n\n    if (!this.match(5) && !this.match(77)) {\n      return false;\n    }\n\n    if (containsEsc) {\n      this.raise(this.state.lastTokStart, ErrorMessages.InvalidEscapedReservedWord, \"asserts\");\n    }\n\n    return true;\n  }\n\n  tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {\n    this.tsInType(() => {\n      if (eatColon) this.expect(22);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n\n    if (this.hasPrecedingLineBreak() || !this.eat(80)) {\n      return type;\n    }\n\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsParseNonConditionalType();\n    this.expect(25);\n    node.trueType = this.tsParseType();\n    this.expect(22);\n    node.falseType = this.tsParseType();\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n\n  isAbstractConstructorSignature() {\n    return this.isContextual(\"abstract\") && this.lookahead().type === 76;\n  }\n\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n\n    if (this.match(76)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    } else if (this.isAbstractConstructorSignature()) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\", true);\n    }\n\n    return this.tsParseUnionTypeOrHigher();\n  }\n\n  tsParseTypeAssertion() {\n    const node = this.startNode();\n\n    const _const = this.tsTryNextParseConstantContext();\n\n    node.typeAnnotation = _const || this.tsNextThenParseType();\n    this.expectRelational(\">\");\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n\n  tsParseHeritageClause(descriptor) {\n    const originalStart = this.state.start;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n\n    if (!delimitedList.length) {\n      this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n    }\n\n    return delimitedList;\n  }\n\n  tsParseExpressionWithTypeArguments() {\n    const node = this.startNode();\n    node.expression = this.tsParseEntityName(false);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n  }\n\n  tsParseInterfaceDeclaration(node) {\n    if (this.match(5)) {\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"typescript interface declaration\", BIND_TS_INTERFACE);\n    } else {\n      node.id = null;\n      this.raise(this.state.start, TSErrors.MissingInterfaceName);\n    }\n\n    node.typeParameters = this.tsTryParseTypeParameters();\n\n    if (this.eat(80)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript type alias\", BIND_TS_TYPE);\n    node.typeParameters = this.tsTryParseTypeParameters();\n    node.typeAnnotation = this.tsInType(() => {\n      this.expect(35);\n\n      if (this.isContextual(\"intrinsic\") && this.lookahead().type !== 24) {\n        const node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"TSIntrinsicKeyword\");\n      }\n\n      return this.tsParseType();\n    });\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n\n  tsEatThenParseType(token) {\n    return !this.match(token) ? undefined : this.tsNextThenParseType();\n  }\n\n  tsExpectThenParseType(token) {\n    return this.tsDoThenParseType(() => this.expect(token));\n  }\n\n  tsNextThenParseType() {\n    return this.tsDoThenParseType(() => this.next());\n  }\n\n  tsDoThenParseType(cb) {\n    return this.tsInType(() => {\n      cb();\n      return this.tsParseType();\n    });\n  }\n\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(4) ? this.parseExprAtom() : this.parseIdentifier(true);\n\n    if (this.eat(35)) {\n      node.initializer = this.parseMaybeAssignAllowIn();\n    }\n\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n\n  tsParseEnumDeclaration(node, isConst) {\n    if (isConst) node.const = true;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript enum declaration\", isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);\n    this.expect(13);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(16);\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(13);\n    this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, 16);\n    this.scope.exit();\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n\n  tsParseModuleOrNamespaceDeclaration(node, nested = false) {\n    node.id = this.parseIdentifier();\n\n    if (!nested) {\n      this.checkLVal(node.id, \"module or namespace declaration\", BIND_TS_NAMESPACE);\n    }\n\n    if (this.eat(24)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(\"global\")) {\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(4)) {\n      node.id = this.parseExprAtom();\n    } else {\n      this.unexpected();\n    }\n\n    if (this.match(13)) {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseImportEqualsDeclaration(node, isExport) {\n    node.isExport = isExport || false;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"import equals declaration\", BIND_LEXICAL);\n    this.expect(35);\n    const moduleReference = this.tsParseModuleReference();\n\n    if (node.importKind === \"type\" && moduleReference.type !== \"TSExternalModuleReference\") {\n      this.raise(moduleReference.start, TSErrors.ImportAliasHasImportType);\n    }\n\n    node.moduleReference = moduleReference;\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n\n  tsIsExternalModuleReference() {\n    return this.isContextual(\"require\") && this.lookaheadCharCode() === 40;\n  }\n\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(\"require\");\n    this.expect(18);\n\n    if (!this.match(4)) {\n      throw this.unexpected();\n    }\n\n    node.expression = this.parseExprAtom();\n    this.expect(19);\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return undefined;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n\n    if (result !== undefined && result !== false) {\n      return result;\n    } else {\n      this.state = state;\n      return undefined;\n    }\n  }\n\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n\n    let starttype = this.state.type;\n    let kind;\n\n    if (this.isContextual(\"let\")) {\n      starttype = 73;\n      kind = \"let\";\n    }\n\n    return this.tsInAmbientContext(() => {\n      switch (starttype) {\n        case 67:\n          nany.declare = true;\n          return this.parseFunctionStatement(nany, false, true);\n\n        case 79:\n          nany.declare = true;\n          return this.parseClass(nany, true, false);\n\n        case 74:\n          if (this.match(74) && this.isLookaheadContextual(\"enum\")) {\n            this.expect(74);\n            this.expectContextual(\"enum\");\n            return this.tsParseEnumDeclaration(nany, true);\n          }\n\n        case 73:\n          kind = kind || this.state.value;\n          return this.parseVarStatement(nany, kind);\n\n        case 5:\n          {\n            const value = this.state.value;\n\n            if (value === \"global\") {\n              return this.tsParseAmbientExternalModuleDeclaration(nany);\n            } else {\n              return this.tsParseDeclaration(nany, value, true);\n            }\n          }\n      }\n    });\n  }\n\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n  }\n\n  tsParseExpressionStatement(node, expr) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n\n          break;\n        }\n\n      case \"global\":\n        if (this.match(13)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          const mod = node;\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          this.prodParam.exit();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n\n        break;\n\n      default:\n        return this.tsParseDeclaration(node, expr.name, false);\n    }\n  }\n\n  tsParseDeclaration(node, value, next) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminator(next) && (this.match(79) || this.match(5))) {\n          return this.tsParseAbstractDeclaration(node);\n        }\n\n        break;\n\n      case \"enum\":\n        if (next || this.match(5)) {\n          if (next) this.next();\n          return this.tsParseEnumDeclaration(node, false);\n        }\n\n        break;\n\n      case \"interface\":\n        if (this.tsCheckLineTerminator(next) && this.match(5)) {\n          return this.tsParseInterfaceDeclaration(node);\n        }\n\n        break;\n\n      case \"module\":\n        if (this.tsCheckLineTerminator(next)) {\n          if (this.match(4)) {\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          } else if (this.match(5)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n        }\n\n        break;\n\n      case \"namespace\":\n        if (this.tsCheckLineTerminator(next) && this.match(5)) {\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"type\":\n        if (this.tsCheckLineTerminator(next) && this.match(5)) {\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n\n        break;\n    }\n  }\n\n  tsCheckLineTerminator(next) {\n    if (next) {\n      if (this.hasFollowingLineBreak()) return false;\n      this.next();\n      return true;\n    }\n\n    return !this.isLineTerminator();\n  }\n\n  tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n    if (!this.isRelational(\"<\")) {\n      return undefined;\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = this.tsParseTypeParameters();\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(27);\n      return node;\n    });\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    if (!res) {\n      return undefined;\n    }\n\n    return this.parseArrowExpression(res, null, true);\n  }\n\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expectRelational(\"<\");\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeArguments);\n    }\n\n    this.expectRelational(\">\");\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n\n  tsIsDeclarationStart() {\n    if (this.match(5)) {\n      switch (this.state.value) {\n        case \"abstract\":\n        case \"declare\":\n        case \"enum\":\n        case \"interface\":\n        case \"module\":\n        case \"namespace\":\n        case \"type\":\n          return true;\n      }\n    }\n\n    return false;\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let accessibility;\n    let readonly = false;\n    let override = false;\n\n    if (allowModifiers !== undefined) {\n      const modified = {};\n      this.tsParseModifiers(modified, [\"public\", \"private\", \"protected\", \"override\", \"readonly\"]);\n      accessibility = modified.accessibility;\n      override = modified.override;\n      readonly = modified.readonly;\n\n      if (allowModifiers === false && (accessibility || readonly || override)) {\n        this.raise(startPos, TSErrors.UnexpectedParameterModifier);\n      }\n    }\n\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (accessibility || readonly || override) {\n      const pp = this.startNodeAt(startPos, startLoc);\n\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n      if (override) pp.override = override;\n\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n      }\n\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(22)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(22);\n    }\n\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" ? \"TSDeclareMethod\" : undefined;\n\n    if (bodilessType && !this.match(13) && this.isLineTerminator()) {\n      this.finishNode(node, bodilessType);\n      return;\n    }\n\n    if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n      this.raise(node.start, TSErrors.DeclareFunctionHasImplementation);\n\n      if (node.declare) {\n        super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        return;\n      }\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkLVal(node.id, \"function name\", BIND_TS_AMBIENT);\n    } else {\n      super.registerFunctionStatementId(...arguments);\n    }\n  }\n\n  tsCheckForInvalidTypeCasts(items) {\n    items.forEach(node => {\n      if ((node == null ? void 0 : node.type) === \"TSTypeCastExpression\") {\n        this.raise(node.typeAnnotation.start, TSErrors.UnexpectedTypeAnnotation);\n      }\n    });\n  }\n\n  toReferencedList(exprList, isInParens) {\n    this.tsCheckForInvalidTypeCasts(exprList);\n    return exprList;\n  }\n\n  parseArrayLike(...args) {\n    const node = super.parseArrayLike(...args);\n\n    if (node.type === \"ArrayExpression\") {\n      this.tsCheckForInvalidTypeCasts(node.elements);\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(40)) {\n      this.state.exprAllowed = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startPos, startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n\n    let isOptionalCall = false;\n\n    if (this.match(26) && this.lookaheadCharCode() === 60) {\n      if (noCalls) {\n        state.stop = true;\n        return base;\n      }\n\n      state.optionalChainMember = isOptionalCall = true;\n      this.next();\n    }\n\n    if (this.isRelational(\"<\")) {\n      let missingParenErrorPos;\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsyncArrow(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (typeArguments) {\n          if (isOptionalCall && !this.match(18)) {\n            missingParenErrorPos = this.state.pos;\n            this.unexpected();\n          }\n\n          if (!noCalls && this.eat(18)) {\n            node.arguments = this.parseCallExpressionArguments(19, false);\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n            node.typeParameters = typeArguments;\n\n            if (state.optionalChainMember) {\n              node.optional = isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          } else if (this.match(30)) {\n            const result = this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n            result.typeParameters = typeArguments;\n            return result;\n          }\n        }\n\n        this.unexpected();\n      });\n\n      if (missingParenErrorPos) {\n        this.unexpected(missingParenErrorPos, 18);\n      }\n\n      if (result) return result;\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n  }\n\n  parseNewArguments(node) {\n    if (this.isRelational(\"<\")) {\n      const typeParameters = this.tsTryParseAndCatch(() => {\n        const args = this.tsParseTypeArguments();\n        if (!this.match(18)) this.unexpected();\n        return args;\n      });\n\n      if (typeParameters) {\n        node.typeParameters = typeParameters;\n      }\n    }\n\n    super.parseNewArguments(node);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (tokenOperatorPrecedence(57) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(\"as\")) {\n      const node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.expression = left;\n\n      const _const = this.tsTryNextParseConstantContext();\n\n      if (_const) {\n        node.typeAnnotation = _const;\n      } else {\n        node.typeAnnotation = this.tsNextThenParseType();\n      }\n\n      this.finishNode(node, \"TSAsExpression\");\n      this.reScan_lt_gt();\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {}\n\n  checkDuplicateExports() {}\n\n  parseImport(node) {\n    node.importKind = \"value\";\n\n    if (this.match(5) || this.match(54) || this.match(13)) {\n      let ahead = this.lookahead();\n\n      if (this.isContextual(\"type\") && ahead.type !== 20 && !(ahead.type === 5 && ahead.value === \"from\") && ahead.type !== 35) {\n        node.importKind = \"type\";\n        this.next();\n        ahead = this.lookahead();\n      }\n\n      if (this.match(5) && ahead.type === 35) {\n        return this.tsParseImportEqualsDeclaration(node);\n      }\n    }\n\n    const importNode = super.parseImport(node);\n\n    if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n      this.raise(importNode.start, TSErrors.TypeImportCannotSpecifyDefaultAndNamed);\n    }\n\n    return importNode;\n  }\n\n  parseExport(node) {\n    if (this.match(82)) {\n      this.next();\n\n      if (this.isContextual(\"type\") && this.lookaheadCharCode() !== 61) {\n        node.importKind = \"type\";\n        this.next();\n      } else {\n        node.importKind = \"value\";\n      }\n\n      return this.tsParseImportEqualsDeclaration(node, true);\n    } else if (this.eat(35)) {\n      const assign = node;\n      assign.expression = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(\"as\")) {\n      const decl = node;\n      this.expectContextual(\"namespace\");\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      if (this.isContextual(\"type\") && this.lookahead().type === 13) {\n        this.next();\n        node.exportKind = \"type\";\n      } else {\n        node.exportKind = \"value\";\n      }\n\n      return super.parseExport(node);\n    }\n  }\n\n  isAbstractClass() {\n    return this.isContextual(\"abstract\") && this.lookahead().type === 79;\n  }\n\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      cls.abstract = true;\n      this.parseClass(cls, true, true);\n      return cls;\n    }\n\n    if (this.state.value === \"interface\") {\n      const interfaceNode = this.startNode();\n      this.next();\n      const result = this.tsParseInterfaceDeclaration(interfaceNode);\n      if (result) return result;\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseStatementContent(context, topLevel) {\n    if (this.state.type === 74) {\n      const ahead = this.lookahead();\n\n      if (ahead.type === 5 && ahead.value === \"enum\") {\n        const node = this.startNode();\n        this.expect(74);\n        this.expectContextual(\"enum\");\n        return this.tsParseEnumDeclaration(node, true);\n      }\n    }\n\n    return super.parseStatementContent(context, topLevel);\n  }\n\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n\n  tsHasSomeModifiers(member, modifiers) {\n    return modifiers.some(modifier => {\n      if (tsIsAccessModifier(modifier)) {\n        return member.accessibility === modifier;\n      }\n\n      return !!member[modifier];\n    });\n  }\n\n  tsIsStartOfStaticBlocks() {\n    return this.isContextual(\"static\") && this.lookaheadCharCode() === 123;\n  }\n\n  parseClassMember(classBody, member, state) {\n    const modifiers = [\"declare\", \"private\", \"public\", \"protected\", \"override\", \"abstract\", \"readonly\", \"static\"];\n    this.tsParseModifiers(member, modifiers, undefined, undefined, true);\n\n    const callParseClassMemberWithIsStatic = () => {\n      if (this.tsIsStartOfStaticBlocks()) {\n        this.next();\n        this.next();\n\n        if (this.tsHasSomeModifiers(member, modifiers)) {\n          this.raise(this.state.pos, TSErrors.StaticBlockCannotHaveModifier);\n        }\n\n        this.parseClassStaticBlock(classBody, member);\n      } else {\n        this.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);\n      }\n    };\n\n    if (member.declare) {\n      this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n    } else {\n      callParseClassMemberWithIsStatic();\n    }\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const idx = this.tsTryParseIndexSignature(member);\n\n    if (idx) {\n      classBody.body.push(idx);\n\n      if (member.abstract) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n      }\n\n      if (member.accessibility) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAccessibility, member.accessibility);\n      }\n\n      if (member.declare) {\n        this.raise(member.start, TSErrors.IndexSignatureHasDeclare);\n      }\n\n      if (member.override) {\n        this.raise(member.start, TSErrors.IndexSignatureHasOverride);\n      }\n\n      return;\n    }\n\n    if (!this.state.inAbstractClass && member.abstract) {\n      this.raise(member.start, TSErrors.NonAbstractClassHasAbstractMethod);\n    }\n\n    if (member.override) {\n      if (!state.hadSuperClass) {\n        this.raise(member.start, TSErrors.OverrideNotInSubClass);\n      }\n    }\n\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(25);\n    if (optional) methodOrProp.optional = true;\n\n    if (methodOrProp.readonly && this.match(18)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n    }\n\n    if (methodOrProp.declare && this.match(18)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n    return decl || super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (!this.state.maybeInArrowParameters || !this.match(25)) {\n      return super.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n    }\n\n    const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n    if (!result.node) {\n      if (result.error) {\n        super.setOptionalParametersError(refExpressionErrors, result.error);\n      }\n\n      return expr;\n    }\n\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(25)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(22)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  parseExportDeclaration(node) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(\"declare\");\n\n    if (isDeclare && (this.isContextual(\"declare\") || !this.shouldParseExportDeclaration())) {\n      throw this.raise(this.state.start, TSErrors.ExpectedAmbientAfterExportDeclare);\n    }\n\n    let declaration;\n\n    if (this.match(5)) {\n      declaration = this.tsTryParseExportDeclaration();\n    }\n\n    if (!declaration) {\n      declaration = super.parseExportDeclaration(node);\n    }\n\n    if (declaration && (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare)) {\n      node.exportKind = \"type\";\n    }\n\n    if (declaration && isDeclare) {\n      this.resetStartLocation(declaration, startPos, startLoc);\n      declaration.declare = true;\n    }\n\n    return declaration;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n      return;\n    }\n\n    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional && this.eat(40)) {\n      node.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n\n    if (this.state.isAmbientContext && this.match(35)) {\n      this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n    }\n\n    if (node.abstract && this.match(35)) {\n      const {\n        key\n      } = node;\n      this.raise(this.state.start, TSErrors.AbstractPropertyHasInitializer, key.type === \"Identifier\" && !node.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`);\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n    }\n\n    if (node.accessibility) {\n      this.raise(node.start, TSErrors.PrivateElementHasAccessibility, node.accessibility);\n    }\n\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters();\n\n    if (typeParameters && isConstructor) {\n      this.raise(typeParameters.start, TSErrors.ConstructorHasTypeParameters);\n    }\n\n    if (method.declare && (method.kind === \"get\" || method.kind === \"set\")) {\n      this.raise(method.start, TSErrors.DeclareAccessor, method.kind);\n    }\n\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.tsParseTypeArguments();\n    }\n\n    if (this.eatContextual(\"implements\")) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n\n  parseObjPropValue(prop, ...args) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) prop.typeParameters = typeParameters;\n    super.parseObjPropValue(prop, ...args);\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (decl.id.type === \"Identifier\" && this.eat(40)) {\n      decl.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(22)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  parseMaybeAssign(...args) {\n    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;\n\n    let state;\n    let jsx;\n    let typeCast;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(94) || this.isRelational(\"<\"))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n\n      if (context[context.length - 1] === types.j_oTag) {\n        context.length -= 2;\n      } else if (context[context.length - 1] === types.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if (!((_jsx = jsx) != null && _jsx.error) && !this.isRelational(\"<\")) {\n      return super.parseMaybeAssign(...args);\n    }\n\n    let typeParameters;\n    state = state || this.state.clone();\n    const arrow = this.tryParse(abort => {\n      var _expr$extra, _typeParameters;\n\n      typeParameters = this.tsParseTypeParameters();\n      const expr = super.parseMaybeAssign(...args);\n\n      if (expr.type !== \"ArrowFunctionExpression\" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {\n        abort();\n      }\n\n      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n\n      expr.typeParameters = typeParameters;\n      return expr;\n    }, state);\n    if (!arrow.error && !arrow.aborted) return arrow.node;\n\n    if (!jsx) {\n      assert(!this.hasPlugin(\"jsx\"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n\n    if ((_jsx2 = jsx) != null && _jsx2.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n\n    if (arrow.node) {\n      this.state = arrow.failState;\n      return arrow.node;\n    }\n\n    if ((_typeCast = typeCast) != null && _typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n\n    if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n    if (arrow.thrown) throw arrow.error;\n    if ((_typeCast2 = typeCast) != null && _typeCast2.thrown) throw typeCast.error;\n    throw ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n      return this.tsParseTypeAssertion();\n    } else {\n      return super.parseMaybeUnary(refExpressionErrors);\n    }\n  }\n\n  parseArrow(node) {\n    if (this.match(22)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(22);\n        if (this.canInsertSemicolon() || !this.match(27)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n\n    return super.parseArrow(node);\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(25)) {\n      if (param.type !== \"Identifier\" && !this.state.isAmbientContext && !this.state.inType) {\n        this.raise(param.start, TSErrors.PatternIsOptional);\n      }\n\n      param.optional = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return this.isAssignable(node.expression, isBinding);\n\n      case \"TSParameterProperty\":\n        return true;\n\n      default:\n        return super.isAssignable(node, isBinding);\n    }\n  }\n\n  toAssignable(node, isLHS = false) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n\n      case \"TSParameterProperty\":\n        return super.toAssignable(node, isLHS);\n\n      case \"ParenthesizedExpression\":\n        return this.toAssignableParenthesizedExpression(node, isLHS);\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableParenthesizedExpression(node, isLHS) {\n    switch (node.expression.type) {\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n      case \"ParenthesizedExpression\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  checkLVal(expr, contextDescription, ...args) {\n    var _expr$extra2;\n\n    switch (expr.type) {\n      case \"TSTypeCastExpression\":\n        return;\n\n      case \"TSParameterProperty\":\n        this.checkLVal(expr.parameter, \"parameter property\", ...args);\n        return;\n\n      case \"TSAsExpression\":\n      case \"TSTypeAssertion\":\n        if (!args[0] && contextDescription !== \"parenthesized expression\" && !((_expr$extra2 = expr.extra) != null && _expr$extra2.parenthesized)) {\n          this.raise(expr.start, ErrorMessages.InvalidLhs, contextDescription);\n          break;\n        }\n\n        this.checkLVal(expr.expression, \"parenthesized expression\", ...args);\n        return;\n\n      case \"TSNonNullExpression\":\n        this.checkLVal(expr.expression, contextDescription, ...args);\n        return;\n\n      default:\n        super.checkLVal(expr, contextDescription, ...args);\n        return;\n    }\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 77:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsParseTypeArguments();\n\n      if (this.match(18)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n\n      this.unexpected(this.state.start, 18);\n    }\n\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.state.isAmbientContext && this.match(20) && this.lookaheadCharCode() === close) {\n      this.next();\n    } else {\n      super.checkCommaAfterRest(close);\n    }\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(40) || this.match(22) || super.isClassProperty();\n  }\n\n  parseMaybeDefault(...args) {\n    const node = super.parseMaybeDefault(...args);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, TSErrors.TypeAnnotationAfterAssign);\n    }\n\n    return node;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(50, 1);\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  reScan_lt_gt() {\n    if (this.match(50)) {\n      const code = this.input.charCodeAt(this.state.start);\n\n      if (code === 60 || code === 62) {\n        this.state.pos -= 1;\n        this.readToken_lt_gt(code);\n      }\n    }\n  }\n\n  toAssignableList(exprList) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if (!expr) continue;\n\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          exprList[i] = this.typeCastToParameter(expr);\n          break;\n\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (!this.state.maybeInArrowParameters) {\n            exprList[i] = this.typeCastToParameter(expr);\n          } else {\n            this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n          }\n\n          break;\n      }\n    }\n\n    return super.toAssignableList(...arguments);\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  shouldParseArrow(params) {\n    if (this.match(22)) {\n      return params.every(expr => this.isAssignable(expr, true));\n    }\n\n    return super.shouldParseArrow(params);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(22) || super.shouldParseAsyncArrow();\n  }\n\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArguments());\n      if (typeArguments) node.typeParameters = typeArguments;\n    }\n\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const firstParam = params[0];\n    const hasContextParam = firstParam && this.isThisParam(firstParam);\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n\n  parseCatchClauseParam() {\n    const param = super.parseCatchClauseParam();\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      param.typeAnnotation = type;\n      this.resetEndLocation(param);\n    }\n\n    return param;\n  }\n\n  tsInAmbientContext(cb) {\n    const oldIsAmbientContext = this.state.isAmbientContext;\n    this.state.isAmbientContext = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.isAmbientContext = oldIsAmbientContext;\n    }\n  }\n\n  parseClass(node, ...args) {\n    const oldInAbstractClass = this.state.inAbstractClass;\n    this.state.inAbstractClass = !!node.abstract;\n\n    try {\n      return super.parseClass(node, ...args);\n    } finally {\n      this.state.inAbstractClass = oldInAbstractClass;\n    }\n  }\n\n  tsParseAbstractDeclaration(node) {\n    if (this.match(79)) {\n      node.abstract = true;\n      return this.parseClass(node, true, false);\n    } else if (this.isContextual(\"interface\")) {\n      if (!this.hasFollowingLineBreak()) {\n        node.abstract = true;\n        this.raise(node.start, TSErrors.NonClassMethodPropertyHasAbstractModifer);\n        this.next();\n        return this.tsParseInterfaceDeclaration(node);\n      }\n    } else {\n      this.unexpected(null, 79);\n    }\n  }\n\n  parseMethod(...args) {\n    const method = super.parseMethod(...args);\n\n    if (method.abstract) {\n      const hasBody = this.hasPlugin(\"estree\") ? !!method.value.body : !!method.body;\n\n      if (hasBody) {\n        const {\n          key\n        } = method;\n        this.raise(method.start, TSErrors.AbstractMethodHasImplementation, key.type === \"Identifier\" && !method.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`);\n      }\n    }\n\n    return method;\n  }\n\n  tsParseTypeParameterName() {\n    const typeName = this.parseIdentifier();\n    return typeName.name;\n  }\n\n  shouldParseAsAmbientContext() {\n    return !!this.getPluginOption(\"typescript\", \"dts\");\n  }\n\n  parse() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.parse();\n  }\n\n  getExpression() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.getExpression();\n  }\n\n};\n\nconst PlaceHolderErrors = makeErrorTemplates({\n  ClassNameIsRequired: \"A class name is required.\"\n}, ErrorCodes.SyntaxError);\n\nvar placeholders = superClass => class extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(96)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      this.expect(96);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n\n  finishPlaceholder(node, expectedNode) {\n    const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n    node.expectedNode = expectedNode;\n    return isFinished ? node : this.finishNode(node, \"Placeholder\");\n  }\n\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      return this.finishOp(96, 2);\n    }\n\n    return super.getTokenFromCode(...arguments);\n  }\n\n  parseExprAtom() {\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments);\n  }\n\n  parseIdentifier() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(...arguments);\n  }\n\n  checkReservedWord(word) {\n    if (word !== undefined) super.checkReservedWord(...arguments);\n  }\n\n  parseBindingAtom() {\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments);\n  }\n\n  checkLVal(expr) {\n    if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n  }\n\n  toAssignable(node) {\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n      node.expectedNode = \"Pattern\";\n      return node;\n    }\n\n    return super.toAssignable(...arguments);\n  }\n\n  isLet(context) {\n    if (super.isLet(context)) {\n      return true;\n    }\n\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    if (context) return false;\n    const nextToken = this.lookahead();\n\n    if (nextToken.type === 96) {\n      return true;\n    }\n\n    return false;\n  }\n\n  verifyBreakContinue(node) {\n    if (node.label && node.label.type === \"Placeholder\") return;\n    super.verifyBreakContinue(...arguments);\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n      return super.parseExpressionStatement(...arguments);\n    }\n\n    if (this.match(22)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n      this.next();\n      stmt.body = this.parseStatement(\"label\");\n      return this.finishNode(stmt, \"LabeledStatement\");\n    }\n\n    this.semicolon();\n    node.name = expr.name;\n    return this.finishPlaceholder(node, \"Statement\");\n  }\n\n  parseBlock() {\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(...arguments);\n  }\n\n  parseFunctionId() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(...arguments);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n\n    if (placeholder) {\n      if (this.match(80) || this.match(96) || this.match(13)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n        return this.finishNode(node, type);\n      } else {\n        this.unexpected(null, PlaceHolderErrors.ClassNameIsRequired);\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n\n    this.parseClassSuper(node);\n    node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, type);\n  }\n\n  parseExport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseExport(...arguments);\n\n    if (!this.isContextual(\"from\") && !this.match(20)) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    this.expectPlugin(\"exportDefaultFrom\");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n    return super.parseExport(node);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(64)) {\n      const next = this.nextTokenStart();\n\n      if (this.isUnparsedContextual(next, \"from\")) {\n        if (this.input.startsWith(tokenLabelName(96), this.nextTokenStartSince(next + 4))) {\n          return true;\n        }\n      }\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (node.specifiers && node.specifiers.length > 0) {\n      return true;\n    }\n\n    return super.maybeParseExportDefaultSpecifier(...arguments);\n  }\n\n  checkExport(node) {\n    const {\n      specifiers\n    } = node;\n\n    if (specifiers != null && specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\n    }\n\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseImport(...arguments);\n    node.specifiers = [];\n\n    if (!this.isContextual(\"from\") && !this.match(20)) {\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    this.finishNode(specifier, \"ImportDefaultSpecifier\");\n    node.specifiers.push(specifier);\n\n    if (this.eat(20)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n\n    this.expectContextual(\"from\");\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource(...arguments);\n  }\n\n};\n\nvar v8intrinsic = superClass => class extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(53)) {\n      const v8IntrinsicStart = this.state.start;\n      const node = this.startNode();\n      this.eat(53);\n\n      if (this.match(5)) {\n        const name = this.parseIdentifierName(this.state.start);\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = \"V8IntrinsicIdentifier\";\n\n        if (this.match(18)) {\n          return identifier;\n        }\n      }\n\n      this.unexpected(v8IntrinsicStart);\n    }\n  }\n\n  parseExprAtom() {\n    return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n  }\n\n};\n\nfunction hasPlugin(plugins, name) {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\n\nfunction getPluginOption(plugins, name, option) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(`\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`);\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, \"recordAndTuple\") && getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\") === \"hash\";\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\"Cannot combine placeholders plugin and Hack-style pipes.\");\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\"Cannot combine v8intrinsic plugin and Hack-style pipes.\");\n      }\n\n      const topicToken = getPluginOption(plugins, \"pipelineOperator\", \"topicToken\");\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n        throw new Error(`\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`);\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\"Cannot combine importAssertions and moduleAttributes plugins.\");\n      }\n\n      const moduleAttributesVerionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\n\n      if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n        throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n      }\n    }\n  }\n\n  if (hasPlugin(plugins, \"recordAndTuple\") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"asyncDoExpressions\") && !hasPlugin(plugins, \"doExpressions\")) {\n    const error = new Error(\"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\");\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n}\n\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\nconst defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false,\n  attachComment: true\n};\n\nfunction getOptions(opts) {\n  const options = {};\n\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\n\nclass LValParser extends NodeUtils {\n  toAssignable(node, isLHS = false) {\n    var _node$extra, _node$extra3;\n\n    let parenthesized = undefined;\n\n    if (node.type === \"ParenthesizedExpression\" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n\n      if (isLHS) {\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        }\n      } else {\n        this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n          var _node$extra2;\n\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (isLast && prop.type === \"RestElement\" && (_node$extra2 = node.extra) != null && _node$extra2.trailingComma) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value, isLHS);\n        break;\n\n      case \"SpreadElement\":\n        {\n          this.checkToRestConversion(node);\n          node.type = \"RestElement\";\n          const arg = node.argument;\n          this.toAssignable(arg, isLHS);\n          break;\n        }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingComma, isLHS);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, ErrorMessages.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(parenthesized, isLHS);\n        break;\n    }\n\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n    if (prop.type === \"ObjectMethod\") {\n      const error = prop.kind === \"get\" || prop.kind === \"set\" ? ErrorMessages.PatternHasAccessor : ErrorMessages.PatternHasMethod;\n      this.raise(prop.key.start, error);\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos, isLHS) {\n    let end = exprList.length;\n\n    if (end) {\n      const last = exprList[end - 1];\n\n      if ((last == null ? void 0 : last.type) === \"RestElement\") {\n        --end;\n      } else if ((last == null ? void 0 : last.type) === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n\n    return exprList;\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\":\n        {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return prop.type !== \"ObjectMethod\" && (i === last || prop.type !== \"SpreadElement\") && this.isAssignable(prop);\n          });\n        }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(element => element === null || this.isAssignable(element));\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  parseSpread(refExpressionErrors, refNeedsArrowPos) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined, refNeedsArrowPos);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 8:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(11, 93, true);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n\n      case 13:\n        return this.parseObjectLike(16, true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(20);\n      }\n\n      if (allowEmpty && this.match(20)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(29)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n\n        if (this.match(32) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, ErrorMessages.UnsupportedParameterDecorator);\n        }\n\n        while (this.match(32)) {\n          decorators.push(this.parseDecorator());\n        }\n\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n\n    return elts;\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param) {\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    var _startLoc, _startPos, _left;\n\n    startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;\n    startPos = (_startPos = startPos) != null ? _startPos : this.state.start;\n    left = (_left = left) != null ? _left : this.parseBindingAtom();\n    if (!this.eat(35)) return left;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  checkLVal(expr, contextDescription, bindingType = BIND_NONE, checkClashes, disallowLetBinding, strictModeChanged = false) {\n    switch (expr.type) {\n      case \"Identifier\":\n        {\n          const {\n            name\n          } = expr;\n\n          if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(name, this.inModule) : isStrictBindOnlyReservedWord(name))) {\n            this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.StrictEvalArguments : ErrorMessages.StrictEvalArgumentsBinding, name);\n          }\n\n          if (checkClashes) {\n            if (checkClashes.has(name)) {\n              this.raise(expr.start, ErrorMessages.ParamDupe);\n            } else {\n              checkClashes.add(name);\n            }\n          }\n\n          if (disallowLetBinding && name === \"let\") {\n            this.raise(expr.start, ErrorMessages.LetInLexicalBinding);\n          }\n\n          if (!(bindingType & BIND_NONE)) {\n            this.scope.declareName(name, bindingType, expr.start);\n          }\n\n          break;\n        }\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, ErrorMessages.InvalidPropertyBindingPattern);\n        }\n\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (this.isObjectProperty(prop)) prop = prop.value;else if (this.isObjectMethod(prop)) continue;\n          this.checkLVal(prop, \"object destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n        }\n\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(elem, \"array destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n          }\n        }\n\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(expr.left, \"assignment pattern\", bindingType, checkClashes);\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(expr.argument, \"rest element\", bindingType, checkClashes);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(expr.expression, \"parenthesized expression\", bindingType, checkClashes);\n        break;\n\n      default:\n        {\n          this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.InvalidLhs : ErrorMessages.InvalidLhsBinding, contextDescription);\n        }\n    }\n  }\n\n  checkToRestConversion(node) {\n    if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n      this.raise(node.argument.start, ErrorMessages.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.match(20)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos) {\n    throw this.raise(pos, ErrorMessages.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos) {\n    this.raise(pos, ErrorMessages.RestTrailingComma);\n  }\n\n}\n\nconst invalidHackPipeBodies = new Map([[\"ArrowFunctionExpression\", \"arrow function\"], [\"AssignmentExpression\", \"assignment\"], [\"ConditionalExpression\", \"conditional\"], [\"YieldExpression\", \"yield\"]]);\n\nclass ExpressionParser extends LValParser {\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(key.start, ErrorMessages.RecordNoProto);\n        return;\n      }\n\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, ErrorMessages.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr, potentialArrowAt) {\n    return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\n  }\n\n  getExpression() {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n\n    if (!this.match(7)) {\n      this.unexpected();\n    }\n\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n\n    return expr;\n  }\n\n  parseExpression(disallowIn, refExpressionErrors) {\n    if (disallowIn) {\n      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n    }\n\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  parseExpressionBase(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n\n    if (this.match(20)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n\n      while (this.eat(20)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {\n    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n\n  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {\n    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n\n  setOptionalParametersError(refExpressionErrors, resultError) {\n    var _resultError$pos;\n\n    refExpressionErrors.optionalParameters = (_resultError$pos = resultError == null ? void 0 : resultError.pos) != null ? _resultError$pos : this.state.start;\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    if (this.isContextual(\"yield\")) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    if (this.match(18) || this.match(5)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(35)) {\n        node.left = this.toAssignable(left, true);\n        refExpressionErrors.doubleProto = -1;\n      } else {\n        node.left = left;\n      }\n\n      if (refExpressionErrors.shorthandAssign >= node.left.start) {\n        refExpressionErrors.shorthandAssign = -1;\n      }\n\n      this.checkLVal(left, \"assignment expression\");\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  parseMaybeConditional(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (this.eat(25)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(22);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(refExpressionErrors) {\n    return this.match(6) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  parseExprOps(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (this.isPrivateName(left)) {\n      const value = this.getPrivateNameSV(left);\n      const {\n        start\n      } = left;\n\n      if (minPrec >= tokenOperatorPrecedence(57) || !this.prodParam.hasIn || !this.match(57)) {\n        this.raise(start, ErrorMessages.PrivateInExpectedIn, value);\n      }\n\n      this.classScope.usePrivateName(value, start);\n    }\n\n    const op = this.state.type;\n\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(57))) {\n      let prec = tokenOperatorPrecedence(op);\n\n      if (prec > minPrec) {\n        if (op === 42) {\n          this.expectPlugin(\"pipelineOperator\");\n\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        }\n\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n        const logical = op === 44 || op === 45;\n        const coalesce = op === 43;\n\n        if (coalesce) {\n          prec = tokenOperatorPrecedence(45);\n        }\n\n        this.next();\n\n        if (op === 42 && this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\") {\n          if (this.match(5) && this.state.value === \"await\" && this.prodParam.hasAwait) {\n            throw this.raise(this.state.start, ErrorMessages.UnexpectedAwaitAfterPipelineBody);\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n        const nextOp = this.state.type;\n\n        if (coalesce && (nextOp === 44 || nextOp === 45) || logical && nextOp === 43) {\n          throw this.raise(this.state.start, ErrorMessages.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n\n    return left;\n  }\n\n  parseExprOpRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    switch (op) {\n      case 42:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(\"yield\")) {\n                throw this.raise(this.state.start, ErrorMessages.PipeBodyIsTighter, this.state.value);\n              }\n\n              return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  parseExprOpBaseRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, tokenIsRightAssociative(op) ? prec - 1 : prec);\n  }\n\n  parseHackPipeBody() {\n    var _body$extra;\n\n    const {\n      start\n    } = this.state;\n    const body = this.parseMaybeAssign();\n\n    if (invalidHackPipeBodies.has(body.type) && !((_body$extra = body.extra) != null && _body$extra.parenthesized)) {\n      this.raise(start, ErrorMessages.PipeUnparenthesizedBody, invalidHackPipeBodies.get(body.type));\n    }\n\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(start, ErrorMessages.PipeTopicUnused);\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(node) {\n    if (this.match(56)) {\n      this.raise(node.argument.start, ErrorMessages.UnexpectedTokenUnaryExponentiation);\n    }\n  }\n\n  parseMaybeUnary(refExpressionErrors, sawUnary) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(\"await\");\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n\n    const update = this.match(39);\n    const node = this.startNode();\n\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(71)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n\n      const isDelete = this.match(88);\n      this.next();\n      node.argument = this.parseMaybeUnary(null, true);\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, ErrorMessages.StrictDelete);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(node.start, ErrorMessages.DeletePrivateField);\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const {\n        type\n      } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(53);\n\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(startPos, ErrorMessages.AwaitNotInAsyncContext);\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  parseUpdate(node, update, refExpressionErrors) {\n    if (update) {\n      this.checkLVal(node.argument, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprSubscripts(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false\n    };\n\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n\n    return base;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!noCalls && this.eat(23)) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (this.match(30)) {\n      return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (this.match(26)) {\n      if (noCalls && this.lookaheadCharCode() === 40) {\n        state.stop = true;\n        return base;\n      }\n\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(18)) {\n      return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);\n    } else {\n      const computed = this.eat(8);\n\n      if (computed || optional || this.eat(24)) {\n        return this.parseMember(base, startPos, startLoc, state, computed, optional);\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  parseMember(base, startPos, startLoc, state, computed, optional) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.computed = computed;\n    const privateName = !computed && this.match(6) && this.state.value;\n    const property = computed ? this.parseExpression() : privateName ? this.parsePrivateName() : this.parseIdentifier(true);\n\n    if (privateName !== false) {\n      if (node.object.type === \"Super\") {\n        this.raise(startPos, ErrorMessages.SuperPrivateField);\n      }\n\n      this.classScope.usePrivateName(privateName, property.start);\n    }\n\n    node.property = property;\n\n    if (computed) {\n      this.expect(11);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  parseBind(base, startPos, startLoc, noCalls, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n  }\n\n  parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n    this.state.maybeInArrowParameters = true;\n    this.next();\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n\n    if (state.maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(19);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(19, base.type === \"Import\", base.type !== \"Super\", node, refExpressionErrors);\n    }\n\n    this.finishCallExpression(node, state.optionalChainMember);\n\n    if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\n    } else {\n      if (state.maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  toReferencedArguments(node, isParenthesizedExpr) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  parseTaggedTemplateExpression(base, startPos, startLoc, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n\n    if (state.optionalChainMember) {\n      this.raise(startPos, ErrorMessages.OptionalChainingNoTemplate);\n    }\n\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n  }\n\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(node.start, ErrorMessages.ImportCallArity, this.hasPlugin(\"importAssertions\") || this.hasPlugin(\"moduleAttributes\") ? \"one or two arguments\" : \"one argument\");\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(arg.start, ErrorMessages.ImportCallSpreadArgument);\n          }\n        }\n      }\n    }\n\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n\n  parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(20);\n\n        if (this.match(close)) {\n          if (dynamicImport && !this.hasPlugin(\"importAssertions\") && !this.hasPlugin(\"moduleAttributes\")) {\n            this.raise(this.state.lastTokStart, ErrorMessages.ImportCallArgumentTrailingComma);\n          }\n\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(27) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(27);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);\n    setInnerComments(node, call.innerComments);\n    setInnerComments(node, call.callee.trailingComments);\n    return node;\n  }\n\n  parseNoCallExpr() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    let node;\n\n    switch (this.state.type) {\n      case 78:\n        return this.parseSuper();\n\n      case 82:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(24)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(18)) {\n          this.raise(this.state.lastTokStart, ErrorMessages.UnsupportedImport);\n        }\n\n        return this.finishNode(node, \"Import\");\n\n      case 77:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case 5:\n        {\n          if (this.isContextual(\"module\") && this.lookaheadCharCode() === 123 && !this.hasFollowingLineBreak()) {\n            return this.parseModuleExpression();\n          }\n\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n            if (this.match(67)) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseFunction(this.startNodeAtNode(id), undefined, true);\n            } else if (this.match(5)) {\n              if (this.lookaheadCharCode() === 61) {\n                return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id));\n              } else {\n                return id;\n              }\n            } else if (this.match(89)) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (canBeArrow && this.match(27) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n          }\n\n          return id;\n        }\n\n      case 89:\n        {\n          return this.parseDo(this.startNode(), false);\n        }\n\n      case 55:\n      case 37:\n        {\n          this.readRegexp();\n          return this.parseRegExpLiteral(this.state.value);\n        }\n\n      case 0:\n        return this.parseNumericLiteral(this.state.value);\n\n      case 1:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case 2:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case 4:\n        return this.parseStringLiteral(this.state.value);\n\n      case 83:\n        return this.parseNullLiteral();\n\n      case 84:\n        return this.parseBooleanLiteral(true);\n\n      case 85:\n        return this.parseBooleanLiteral(false);\n\n      case 18:\n        {\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          return this.parseParenAndDistinguishExpression(canBeArrow);\n        }\n\n      case 10:\n      case 9:\n        {\n          return this.parseArrayLike(this.state.type === 10 ? 12 : 11, false, true, refExpressionErrors);\n        }\n\n      case 8:\n        {\n          return this.parseArrayLike(11, true, false, refExpressionErrors);\n        }\n\n      case 14:\n      case 15:\n        {\n          return this.parseObjectLike(this.state.type === 14 ? 17 : 16, false, true, refExpressionErrors);\n        }\n\n      case 13:\n        {\n          return this.parseObjectLike(16, false, false, refExpressionErrors);\n        }\n\n      case 67:\n        return this.parseFunctionOrFunctionSent();\n\n      case 32:\n        this.parseDecorators();\n\n      case 79:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case 76:\n        return this.parseNewOrNewTarget();\n\n      case 30:\n        return this.parseTemplate(false);\n\n      case 23:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(callee.start, ErrorMessages.UnsupportedBind);\n          }\n        }\n\n      case 6:\n        {\n          this.raise(this.state.start, ErrorMessages.PrivateInExpectedIn, this.state.value);\n          return this.parsePrivateName();\n        }\n\n      case 38:\n        if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"hack\" && this.getPluginOption(\"pipelineOperator\", \"topicToken\") === \"%\") {\n          this.state.value = \"%\";\n          this.state.type = 53;\n          this.state.pos--;\n          this.state.end--;\n          this.state.endLoc.column--;\n        } else {\n          throw this.unexpected();\n        }\n\n      case 53:\n      case 33:\n        {\n          const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n          if (pipeProposal) {\n            node = this.startNode();\n            const start = this.state.start;\n            const tokenType = this.state.type;\n            this.next();\n            return this.finishTopicReference(node, start, pipeProposal, tokenType);\n          }\n        }\n\n      case 50:\n        {\n          if (this.state.value === \"<\") {\n            const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n\n            if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n              this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n            }\n          }\n        }\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  finishTopicReference(node, start, pipeProposal, tokenType) {\n    if (this.testTopicReferenceConfiguration(pipeProposal, start, tokenType)) {\n      let nodeType;\n\n      if (pipeProposal === \"smart\") {\n        nodeType = \"PipelinePrimaryTopicReference\";\n      } else {\n        nodeType = \"TopicReference\";\n      }\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        if (pipeProposal === \"smart\") {\n          this.raise(start, ErrorMessages.PrimaryTopicNotAllowed);\n        } else {\n          this.raise(start, ErrorMessages.PipeTopicUnbound);\n        }\n      }\n\n      this.registerTopicReference();\n      return this.finishNode(node, nodeType);\n    } else {\n      throw this.raise(start, ErrorMessages.PipeTopicUnconfiguredToken, tokenLabelName(tokenType));\n    }\n  }\n\n  testTopicReferenceConfiguration(pipeProposal, start, tokenType) {\n    switch (pipeProposal) {\n      case \"hack\":\n        {\n          const pluginTopicToken = this.getPluginOption(\"pipelineOperator\", \"topicToken\");\n          return tokenLabelName(tokenType) === pluginTopicToken;\n        }\n\n      case \"smart\":\n        return tokenType === 33;\n\n      default:\n        throw this.raise(start, ErrorMessages.PipeTopicRequiresHackPipes);\n    }\n  }\n\n  parseAsyncArrowUnaryFunction(node) {\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.pos, ErrorMessages.LineTerminatorBeforeArrow);\n    }\n\n    this.expect(27);\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  parseDo(node, isAsync) {\n    this.expectPlugin(\"doExpressions\");\n\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n\n    node.async = isAsync;\n    this.next();\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    if (isAsync) {\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  parseSuper() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(18) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.SuperNotAllowed);\n    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.UnexpectedSuper);\n    }\n\n    if (!this.match(18) && !this.match(8) && !this.match(24)) {\n      this.raise(node.start, ErrorMessages.UnsupportedSuper);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parseMaybePrivateName(isPrivateNameAllowed) {\n    const isPrivate = this.match(6);\n\n    if (isPrivate) {\n      if (!isPrivateNameAllowed) {\n        this.raise(this.state.start + 1, ErrorMessages.UnexpectedPrivateField);\n      }\n\n      return this.parsePrivateName();\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parsePrivateName() {\n    const node = this.startNode();\n    const id = this.startNodeAt(this.state.start + 1, new Position(this.state.curLine, this.state.start + 1 - this.state.lineStart));\n    const name = this.state.value;\n    this.next();\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.prodParam.hasYield && this.match(24)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n      this.next();\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(node.property.start, ErrorMessages.UnsupportedMetaProperty, meta.name, propertyName);\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next();\n\n    if (this.isContextual(\"meta\")) {\n      if (!this.inModule) {\n        this.raise(id.start, SourceTypeModuleErrorMessages.ImportMetaOutsideModule);\n      }\n\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode(value, type, node) {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseLiteral(value, type) {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value) {\n    return this.parseLiteral(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value) {\n    return this.parseLiteral(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value) {\n    return this.parseLiteral(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value) {\n    return this.parseLiteral(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value) {\n    const node = this.parseLiteral(value.value, \"RegExpLiteral\");\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let val;\n    this.next();\n    this.expressionScope.enter(newArrowHeadScope());\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(19)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(20, refExpressionErrors.optionalParameters === -1 ? null : refExpressionErrors.optionalParameters);\n\n        if (this.match(19)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(29)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n        this.checkCommaAfterRest(41);\n        break;\n      } else {\n        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));\n      }\n    }\n\n    const innerEndPos = this.state.lastTokEnd;\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(19);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n\n    if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    this.toReferencedListDeep(exprList, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow(params) {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node) {\n    if (this.eat(27)) {\n      return node;\n    }\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    return node;\n  }\n\n  parseNewOrNewTarget() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(24)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(metaProp.start, ErrorMessages.UnexpectedNewTarget);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  parseNew(node) {\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, ErrorMessages.ImportCallNotNewExpression);\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.OptionalChainingNoNew);\n    } else if (this.eat(26)) {\n      this.raise(this.state.start, ErrorMessages.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node) {\n    if (this.eat(18)) {\n      const args = this.parseExprList(19);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  parseTemplateElement(isTagged) {\n    const elem = this.startNode();\n\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.start + 1, ErrorMessages.InvalidEscapeSequenceTemplate);\n      }\n    }\n\n    elem.value = {\n      raw: this.input.slice(this.state.start, this.state.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value\n    };\n    this.next();\n    elem.tail = this.match(30);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n\n    while (!curElt.tail) {\n      this.expect(31);\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.expect(16);\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  parseTemplateSubstitution() {\n    return this.parseExpression();\n  }\n\n  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(20);\n\n        if (this.match(close)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          break;\n        }\n      }\n\n      const prop = this.parsePropertyDefinition(isPattern, refExpressionErrors);\n\n      if (!isPattern) {\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (isRecord && !this.isObjectProperty(prop) && prop.type !== \"SpreadElement\") {\n        this.raise(prop.start, ErrorMessages.InvalidRecordProperty);\n      }\n\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.next();\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n\n    return this.finishNode(node, type);\n  }\n\n  maybeAsyncOrAccessorProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(8) || this.match(54));\n  }\n\n  parsePropertyDefinition(isPattern, refExpressionErrors) {\n    let decorators = [];\n\n    if (this.match(32)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, ErrorMessages.UnsupportedPropertyDecorator);\n      }\n\n      while (this.match(32)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(29)) {\n      if (decorators.length) this.unexpected();\n\n      if (isPattern) {\n        this.next();\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(125);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(54);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, false);\n\n    if (!isPattern && !isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(54);\n        this.parsePropertyName(prop, false);\n      }\n\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n\n        if (this.match(54)) {\n          isGenerator = true;\n          this.raise(this.state.pos, ErrorMessages.AccessorIsGenerator, keyName);\n          this.next();\n        }\n\n        this.parsePropertyName(prop, false);\n      }\n    }\n\n    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.params;\n  }\n\n  checkGetterSetterParams(method) {\n    var _params;\n\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const start = method.start;\n\n    if (params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (method.kind === \"set\" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === \"RestElement\") {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    if (isAccessor) {\n      this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(18)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    prop.shorthand = false;\n\n    if (this.eat(22)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));\n      } else if (this.match(35) && refExpressionErrors) {\n        if (refExpressionErrors.shorthandAssign === -1) {\n          refExpressionErrors.shorthandAssign = this.state.start;\n        }\n\n        prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n    if (!node) this.unexpected();\n    return node;\n  }\n\n  parsePropertyName(prop, isPrivateNameAllowed) {\n    if (this.eat(8)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(11);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      const type = this.state.type;\n      prop.key = type === 0 || type === 4 || type === 1 || type === 2 ? this.parseExprAtom() : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n      if (type !== 6) {\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor;\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    return node;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n  }\n\n  parseArrowExpression(node, params, isAsync, trailingCommaPos) {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n\n    if (!this.match(8) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(node, params, trailingCommaPos) {\n    node.params = this.toAssignableList(params, trailingCommaPos, false);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    const isExpression = allowExpression && !this.match(13);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\n        const nonSimple = !this.isSimpleParamList(node.params);\n\n        if (hasStrictModeDirective && nonSimple) {\n          const errorPos = (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.end : node.start;\n          this.raise(errorPos, ErrorMessages.IllegalLanguageModeDirective);\n        }\n\n        const strictModeChanged = !oldStrict && this.state.strict;\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n\n        if (this.state.strict && node.id) {\n          this.checkLVal(node.id, \"function name\", BIND_OUTSIDE, undefined, undefined, strictModeChanged);\n        }\n      });\n      this.prodParam.exit();\n      this.expressionScope.exit();\n      this.state.labels = oldLabels;\n    }\n  }\n\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n\n    return true;\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {\n    const checkClashes = new Set();\n\n    for (const param of node.params) {\n      this.checkLVal(param, \"function parameter list\", BIND_VAR, allowDuplicates ? null : checkClashes, undefined, strictModeChanged);\n    }\n  }\n\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(20);\n\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n\n    return elts;\n  }\n\n  parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {\n    let elt;\n\n    if (this.match(20)) {\n      if (!allowEmpty) {\n        this.raise(this.state.pos, ErrorMessages.UnexpectedToken, \",\");\n      }\n\n      elt = null;\n    } else if (this.match(29)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartPos, spreadNodeStartLoc);\n    } else if (this.match(25)) {\n      this.expectPlugin(\"partialApplication\");\n\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, ErrorMessages.UnexpectedArgumentPlaceholder);\n      }\n\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);\n    }\n\n    return elt;\n  }\n\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos, liberal) {\n    let name;\n    const {\n      start,\n      type\n    } = this.state;\n\n    if (type === 5) {\n      name = this.state.value;\n    } else if (tokenIsKeyword(type)) {\n      name = tokenLabelName(type);\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      this.state.type = 5;\n    } else {\n      this.checkReservedWord(name, start, tokenIsKeyword(type), false);\n    }\n\n    this.next();\n    return name;\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (word.length > 10) {\n      return;\n    }\n\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(startLoc, ErrorMessages.YieldBindingIdentifier);\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifier);\n        return;\n      } else if (this.scope.inStaticBlock) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifierInStaticBlock);\n        return;\n      } else {\n        this.expressionScope.recordAsyncArrowParametersError(startLoc, ErrorMessages.AwaitBindingIdentifier);\n      }\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(startLoc, ErrorMessages.ArgumentsInClass);\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedReservedWord, word);\n    }\n  }\n\n  isAwaitAllowed() {\n    if (this.prodParam.hasAwait) return true;\n\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n\n    return false;\n  }\n\n  parseAwait(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.AwaitExpressionFormalParameter);\n\n    if (this.eat(54)) {\n      this.raise(node.start, ErrorMessages.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait() {\n    return this.hasPrecedingLineBreak() || this.match(52) || this.match(18) || this.match(8) || this.match(30) || this.match(3) || this.match(55) || this.hasPlugin(\"v8intrinsic\") && this.match(53);\n  }\n\n  parseYield() {\n    const node = this.startNode();\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.YieldInParameter);\n    this.next();\n    let delegating = false;\n    let argument = null;\n\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(54);\n\n      switch (this.state.type) {\n        case 21:\n        case 7:\n        case 16:\n        case 19:\n        case 11:\n        case 17:\n        case 22:\n        case 20:\n          if (!delegating) break;\n\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  checkPipelineAtInfixOperator(left, leftStartPos) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(leftStartPos, ErrorMessages.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  checkHackPipeBodyEarlyErrors(startPos) {\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(startPos, ErrorMessages.PipeTopicUnused);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpr, startPos, startLoc) {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n\n    if (this.isSimpleReference(childExpr)) {\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      this.checkSmartPipeTopicBodyEarlyErrors(startPos);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n\n      case \"Identifier\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  checkSmartPipeTopicBodyEarlyErrors(startPos) {\n    if (this.match(27)) {\n      throw this.raise(this.state.start, ErrorMessages.PipelineBodyNoArrow);\n    } else if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(startPos, ErrorMessages.PipelineTopicUnused);\n    }\n  }\n\n  withTopicBindingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSmartMixTopicForbiddingContext(callback) {\n    const proposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (proposal === \"smart\") {\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        maxNumOfResolvableTopics: 0,\n        maxTopicIndex: null\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  disallowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n\n  parseFSharpPipelineBody(prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, prec);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n\n  parseModuleExpression() {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode();\n    this.next();\n    this.eat(13);\n    const revertScopes = this.initializeScopes(true);\n    this.enterInitialScopes();\n    const program = this.startNode();\n\n    try {\n      node.body = this.parseProgram(program, 16, \"module\");\n    } finally {\n      revertScopes();\n    }\n\n    this.eat(16);\n    return this.finishNode(node, \"ModuleExpression\");\n  }\n\n}\n\nconst loopLabel = {\n  kind: \"loop\"\n},\n      switchLabel = {\n  kind: \"switch\"\n};\nconst FUNC_NO_FLAGS = 0b000,\n      FUNC_STATEMENT = 0b001,\n      FUNC_HANGING_STATEMENT = 0b010,\n      FUNC_NULLABLE_ID = 0b100;\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\nfunction babel7CompatTokens(tokens) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const {\n      type\n    } = token;\n\n    if (type === 6) {\n      {\n        const {\n          loc,\n          start,\n          value,\n          end\n        } = token;\n        const hashEndPos = start + 1;\n        const hashEndLoc = new Position(loc.start.line, loc.start.column + 1);\n        tokens.splice(i, 1, new Token({\n          type: getExportedToken(33),\n          value: \"#\",\n          start: start,\n          end: hashEndPos,\n          startLoc: loc.start,\n          endLoc: hashEndLoc\n        }), new Token({\n          type: getExportedToken(5),\n          value: value,\n          start: hashEndPos,\n          end: end,\n          startLoc: hashEndLoc,\n          endLoc: loc.end\n        }));\n        i++;\n        continue;\n      }\n    }\n\n    if (typeof type === \"number\") {\n      token.type = getExportedToken(type);\n    }\n  }\n\n  return tokens;\n}\n\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n    if (this.options.tokens) file.tokens = babel7CompatTokens(this.tokens);\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(program, end = 7, sourceType = this.options.sourceType) {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n      for (const [name] of Array.from(this.scope.undefinedExports)) {\n        const pos = this.scope.undefinedExports.get(name);\n        this.raise(pos, ErrorMessages.ModuleExportUndefined, name);\n      }\n    }\n\n    return this.finishNode(program, \"Program\");\n  }\n\n  stmtToDirective(stmt) {\n    const directive = stmt;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n    const directiveLiteral = directive.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    directiveLiteral.type = \"DirectiveLiteral\";\n    return directive;\n  }\n\n  parseInterpreterDirective() {\n    if (!this.match(34)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context) {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    return this.isLetKeyword(context);\n  }\n\n  isLetKeyword(context) {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n\n    if (nextCh === 92 || nextCh === 91) {\n      return true;\n    }\n\n    if (context) return false;\n    if (nextCh === 123) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n\n      if (keywordRelationalOperator.test(this.input)) {\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n\n        if (!isIdentifierChar(endCh) && endCh !== 92) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.match(32)) {\n      this.parseDecorators(true);\n    }\n\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context, topLevel) {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = 73;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case 59:\n        return this.parseBreakContinueStatement(node, true);\n\n      case 62:\n        return this.parseBreakContinueStatement(node, false);\n\n      case 63:\n        return this.parseDebuggerStatement(node);\n\n      case 89:\n        return this.parseDoStatement(node);\n\n      case 90:\n        return this.parseForStatement(node);\n\n      case 67:\n        if (this.lookaheadCharCode() === 46) break;\n\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, ErrorMessages.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, ErrorMessages.SloppyFunction);\n          }\n        }\n\n        return this.parseFunctionStatement(node, false, !context);\n\n      case 79:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case 68:\n        return this.parseIfStatement(node);\n\n      case 69:\n        return this.parseReturnStatement(node);\n\n      case 70:\n        return this.parseSwitchStatement(node);\n\n      case 71:\n        return this.parseThrowStatement(node);\n\n      case 72:\n        return this.parseTryStatement(node);\n\n      case 74:\n      case 73:\n        kind = kind || this.state.value;\n\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, ErrorMessages.UnexpectedLexicalDeclaration);\n        }\n\n        return this.parseVarStatement(node, kind);\n\n      case 91:\n        return this.parseWhileStatement(node);\n\n      case 75:\n        return this.parseWithStatement(node);\n\n      case 13:\n        return this.parseBlock();\n\n      case 21:\n        return this.parseEmptyStatement(node);\n\n      case 82:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n            break;\n          }\n        }\n\n      case 81:\n        {\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(this.state.start, ErrorMessages.UnexpectedImportExport);\n          }\n\n          this.next();\n          let result;\n\n          if (starttype === 82) {\n            result = this.parseImport(node);\n\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node);\n\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n\n          this.assertModuleNodeAllowed(node);\n          return result;\n        }\n\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (context) {\n              this.raise(this.state.start, ErrorMessages.AsyncFunctionInSingleStatementContext);\n            }\n\n            this.next();\n            return this.parseFunctionStatement(node, true, !context);\n          }\n        }\n    }\n\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (starttype === 5 && expr.type === \"Identifier\" && this.eat(22)) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(node.start, SourceTypeModuleErrorMessages.ImportOutsideModule);\n    }\n  }\n\n  takeDecorators(node) {\n    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator() {\n    return this.match(79);\n  }\n\n  parseDecorators(allowExport) {\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    while (this.match(32)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(81)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, ErrorMessages.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      this.state.decoratorStack.push([]);\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr;\n\n      if (this.eat(18)) {\n        expr = this.parseExpression();\n        this.expect(19);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(24)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(18)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(19, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(node, isBreak) {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n\n  verifyBreakContinue(node, isBreak) {\n    let i;\n\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n\n    if (i === this.state.labels.length) {\n      this.raise(node.start, ErrorMessages.IllegalBreakContinue, isBreak ? \"break\" : \"continue\");\n    }\n  }\n\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression() {\n    this.expect(18);\n    const val = this.parseExpression();\n    this.expect(19);\n    return val;\n  }\n\n  parseDoStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"do\"));\n    this.state.labels.pop();\n    this.expect(91);\n    node.test = this.parseHeaderExpression();\n    this.eat(21);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = -1;\n\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(18);\n\n    if (this.match(21)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(\"let\");\n    const isLet = startsWithLet && this.isLetKeyword();\n\n    if (this.match(73) || this.match(74) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if ((this.match(57) || this.isContextual(\"of\")) && init.declarations.length === 1) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n\n    const startsWithUnescapedName = this.match(5) && !this.state.containsEsc;\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(\"of\");\n\n    if (isForOf) {\n      if (startsWithLet) {\n        this.raise(init.start, ErrorMessages.ForOfLet);\n      } else if (awaitAt === -1 && startsWithUnescapedName && init.type === \"Identifier\" && init.name === \"async\") {\n        this.raise(init.start, ErrorMessages.ForOfAsync);\n      }\n    }\n\n    if (isForOf || this.match(57)) {\n      this.toAssignable(init, true);\n      const description = isForOf ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n  }\n\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(65) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, ErrorMessages.IllegalReturn);\n    }\n\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(13);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n    let cur;\n\n    for (let sawDefault; !this.match(16);) {\n      if (this.match(60) || this.match(64)) {\n        const isCase = this.match(60);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(this.state.lastTokStart, ErrorMessages.MultipleDefaultsInSwitch);\n          }\n\n          sawDefault = true;\n          cur.test = null;\n        }\n\n        this.expect(22);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node) {\n    this.next();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.NewlineAfterThrow);\n    }\n\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam() {\n    const param = this.parseBindingAtom();\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n    return param;\n  }\n\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(61)) {\n      const clause = this.startNode();\n      this.next();\n\n      if (this.match(18)) {\n        this.expect(18);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(19);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(66) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, ErrorMessages.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"while\"));\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(this.state.start, ErrorMessages.StrictWith);\n    }\n\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"with\"));\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(node, maybeName, expr, context) {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(expr.start, ErrorMessages.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type) ? \"loop\" : this.match(70) ? \"switch\" : null;\n\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {\n    const node = this.startNode();\n\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n\n    this.expect(13);\n\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n\n    this.parseBlockBody(node, allowDirectives, false, 16, afterBlockParse);\n\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n  }\n\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n\n        parsedNonDirective = true;\n        this.state.strictErrors.clear();\n      }\n\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  parseFor(node, init) {\n    node.init = init;\n    this.semicolon(false);\n    node.test = this.match(21) ? null : this.parseExpression();\n    this.semicolon(false);\n    node.update = this.match(19) ? null : this.parseExpression();\n    this.expect(19);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(57);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(init.start, ErrorMessages.ForInOfLoopInitializer, isForIn ? \"for-in\" : \"for-of\");\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, ErrorMessages.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n    this.expect(19);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  parseVar(node, isFor, kind) {\n    const declarations = node.declarations = [];\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n\n      if (this.eat(35)) {\n        decl.init = isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n      } else {\n        if (kind === \"const\" && !(this.match(57) || this.isContextual(\"of\"))) {\n          if (!isTypescript) {\n            this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Const declarations\");\n          }\n        } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(57) || this.isContextual(\"of\")))) {\n          this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Complex binding patterns\");\n        }\n\n        decl.init = null;\n      }\n\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(20)) break;\n    }\n\n    return node;\n  }\n\n  parseVarId(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, \"variable declaration\", kind === \"var\" ? BIND_VAR : BIND_LEXICAL, undefined, kind !== \"var\");\n  }\n\n  parseFunction(node, statement = FUNC_NO_FLAGS, isAsync = false) {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n    this.initFunction(node, isAsync);\n\n    if (this.match(54) && isHangingStatement) {\n      this.raise(this.state.start, ErrorMessages.GeneratorInSingleStatementContext);\n    }\n\n    node.generator = this.eat(54);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, false);\n    this.withSmartMixTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId) {\n    return requireId || this.match(5) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    this.expect(18);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(19, 41, false, allowModifiers);\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n\n  isClassProperty() {\n    return this.match(35) || this.match(21) || this.match(16);\n  }\n\n  isClassMethod() {\n    return this.match(18);\n  }\n\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n\n  parseClassBody(hadSuperClass, oldStrict) {\n    this.classScope.enter();\n    const state = {\n      hadConstructor: false,\n      hadSuperClass\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(13);\n    this.withSmartMixTopicForbiddingContext(() => {\n      while (!this.match(16)) {\n        if (this.eat(21)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, ErrorMessages.DecoratorSemicolon);\n          }\n\n          continue;\n        }\n\n        if (this.match(32)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(member.start, ErrorMessages.DecoratorConstructor);\n        }\n      }\n    });\n    this.state.strict = oldStrict;\n    this.next();\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, ErrorMessages.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMemberFromModifier(classBody, member) {\n    const key = this.parseIdentifier(true);\n\n    if (this.isClassMethod()) {\n      const method = member;\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(classBody, method, false, false, false, false);\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop = member;\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(classBody, member, state) {\n    const isStatic = this.isContextual(\"static\");\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      if (this.eat(13)) {\n        this.parseClassStaticBlock(classBody, member);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n\n    if (this.eat(54)) {\n      method.kind = \"method\";\n      const isPrivateName = this.match(6);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n\n    const isContextual = this.match(5) && !this.state.containsEsc;\n    const isPrivate = this.match(6);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStart = this.state.start;\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, ErrorMessages.DuplicateConstructor);\n        }\n\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(key.start, ErrorMessages.OverrideOnConstructor);\n        }\n\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isContextual && key.name === \"async\" && !this.isLineTerminator()) {\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(54);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      const isPrivate = this.match(6);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if (isContextual && (key.name === \"get\" || key.name === \"set\") && !(this.match(54) && this.isLineTerminator())) {\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      const isPrivate = this.match(6);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAccessor);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassElementName(member) {\n    const {\n      type,\n      value,\n      start\n    } = this.state;\n\n    if ((type === 5 || type === 4) && member.static && value === \"prototype\") {\n      this.raise(start, ErrorMessages.StaticPrototype);\n    }\n\n    if (type === 6 && value === \"constructor\") {\n      this.raise(start, ErrorMessages.ConstructorClassPrivateField);\n    }\n\n    return this.parsePropertyName(member, true);\n  }\n\n  parseClassStaticBlock(classBody, member) {\n    var _member$decorators;\n\n    this.expectPlugin(\"classStaticBlock\", member.start);\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    this.prodParam.enter(PARAM);\n    const body = member.body = [];\n    this.parseBlockOrModuleBlockBody(body, undefined, false, 16);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode(member, \"StaticBlock\"));\n\n    if ((_member$decorators = member.decorators) != null && _member$decorators.length) {\n      this.raise(member.start, ErrorMessages.DecoratorStaticBlock);\n    }\n  }\n\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n      this.raise(prop.key.start, ErrorMessages.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(classBody, prop) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.start);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n    classBody.body.push(node);\n    const kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.start);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {}\n\n  parseClassPrivateProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseInitializer(node) {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(35) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(node, isStatement, optionalId, bindingType = BIND_CLASS) {\n    if (this.match(5)) {\n      node.id = this.parseIdentifier();\n\n      if (isStatement) {\n        this.checkLVal(node.id, \"class name\", bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, ErrorMessages.MissingClassName);\n      }\n    }\n  }\n\n  parseClassSuper(node) {\n    node.superClass = this.eat(80) ? this.parseExprSubscripts() : null;\n  }\n\n  parseExport(node) {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(20);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(20));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n      throw this.unexpected(null, 13);\n    }\n\n    let hasDeclaration;\n\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(64)) {\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, 13);\n  }\n\n  eatExportStar(node) {\n    return this.eat(54);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(13)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n      node.source = null;\n      node.declaration = null;\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n\n    return false;\n  }\n\n  isAsyncFunction() {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(67) || isAsync) {\n      this.next();\n\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n    } else if (this.match(79)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(32)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorBeforeExport);\n      }\n\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(74) || this.match(73) || this.isLet()) {\n      throw this.raise(this.state.start, ErrorMessages.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssignAllowIn();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  parseExportDeclaration(node) {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(5)) {\n      const value = this.state.value;\n\n      if (value === \"async\" && !this.state.containsEsc || value === \"let\") {\n        return false;\n      }\n\n      if ((value === \"type\" || value === \"interface\") && !this.state.containsEsc) {\n        const l = this.lookahead();\n\n        if (l.type === 5 && l.value !== \"from\" || l.type === 13) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(64)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n\n    if (this.input.charCodeAt(next) === 44 || this.match(5) && hasFrom) {\n      return true;\n    }\n\n    if (this.match(64) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n      return nextAfterFrom === 34 || nextAfterFrom === 39;\n    }\n\n    return false;\n  }\n\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration() {\n    const {\n      type\n    } = this.state;\n\n    if (type === 32) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, ErrorMessages.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return type === 73 || type === 74 || type === 67 || type === 79 || this.isLet() || this.isAsyncFunction();\n  }\n\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          var _declaration$extra;\n\n          const declaration = node.declaration;\n\n          if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {\n            this.raise(declaration.start, ErrorMessages.ExportDefaultFromAsIdentifier);\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        for (const specifier of node.specifiers) {\n          const {\n            exported\n          } = specifier;\n          const exportedName = exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n\n          if (!isFrom && specifier.local) {\n            const {\n              local\n            } = specifier;\n\n            if (local.type !== \"Identifier\") {\n              this.raise(specifier.start, ErrorMessages.ExportBindingIsString, local.value, exportedName);\n            } else {\n              this.checkReservedWord(local.name, local.start, true, false);\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (currentContextDecorators.length) {\n      throw this.raise(node.start, ErrorMessages.UnsupportedDecoratorExport);\n    }\n  }\n\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(node, name) {\n    if (this.exportedIdentifiers.has(name)) {\n      this.raise(node.start, name === \"default\" ? ErrorMessages.DuplicateDefaultExport : ErrorMessages.DuplicateExport, name);\n    }\n\n    this.exportedIdentifiers.add(name);\n  }\n\n  parseExportSpecifiers() {\n    const nodes = [];\n    let first = true;\n    this.expect(13);\n\n    while (!this.eat(16)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(20);\n        if (this.eat(16)) break;\n      }\n\n      const node = this.startNode();\n      const isString = this.match(4);\n      const local = this.parseModuleExportName();\n      node.local = local;\n\n      if (this.eatContextual(\"as\")) {\n        node.exported = this.parseModuleExportName();\n      } else if (isString) {\n        node.exported = cloneStringLiteral(local);\n      } else {\n        node.exported = cloneIdentifier(local);\n      }\n\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  parseModuleExportName() {\n    if (this.match(4)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n\n      if (surrogate) {\n        this.raise(result.start, ErrorMessages.ModuleExportNameHasLoneSurrogate, surrogate[0].charCodeAt(0).toString(16));\n      }\n\n      return result;\n    }\n\n    return this.parseIdentifier(true);\n  }\n\n  parseImport(node) {\n    node.specifiers = [];\n\n    if (!this.match(4)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(20);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n\n    node.source = this.parseImportSource();\n    const assertions = this.maybeParseImportAssertions();\n\n    if (assertions) {\n      node.assertions = assertions;\n    } else {\n      const attributes = this.maybeParseModuleAttributes();\n\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    if (!this.match(4)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  shouldParseDefaultImport(node) {\n    return this.match(5);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  parseAssertEntries() {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(16)) {\n        break;\n      }\n\n      const node = this.startNode();\n      const keyName = this.state.value;\n\n      if (attrNames.has(keyName)) {\n        this.raise(this.state.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, keyName);\n      }\n\n      attrNames.add(keyName);\n\n      if (this.match(4)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n\n      this.expect(22);\n\n      if (!this.match(4)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(20));\n\n    return attrs;\n  }\n\n  maybeParseModuleAttributes() {\n    if (this.match(75) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n\n    const attrs = [];\n    const attributes = new Set();\n\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, node.key.name);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, node.key.name);\n      }\n\n      attributes.add(node.key.name);\n      this.expect(22);\n\n      if (!this.match(4)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(20));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    if (this.isContextual(\"assert\") && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n\n    this.eat(13);\n    const attrs = this.parseAssertEntries();\n    this.eat(16);\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    if (this.shouldParseDefaultImport(node)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(54)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(13);\n\n    while (!this.eat(16)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(22)) {\n          throw this.raise(this.state.start, ErrorMessages.DestructureNamedImport);\n        }\n\n        this.expect(20);\n        if (this.eat(16)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    const importedIsString = this.match(4);\n    specifier.imported = this.parseModuleExportName();\n\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const {\n        imported\n      } = specifier;\n\n      if (importedIsString) {\n        throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, imported.value);\n      }\n\n      this.checkReservedWord(imported.name, specifier.start, true, true);\n      specifier.local = cloneIdentifier(imported);\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n  isThisParam(param) {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n\n}\n\nclass Parser extends StatementParser {\n  constructor(options, input) {\n    options = getOptions(options);\n    super(options, input);\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n\n  parse() {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n\n}\n\nfunction pluginsMap(plugins) {\n  const pluginMap = new Map();\n\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n\n  return pluginMap;\n}\n\nfunction parse(input, options) {\n  var _options;\n\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(internalTokenTypes) {\n  const tokenTypes = {};\n\n  for (const typeName of Object.keys(internalTokenTypes)) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n\n  return tokenTypes;\n}\n\nconst tokTypes = generateExportedTokenTypes(tt);\n\nfunction getParser(options, input) {\n  let cls = Parser;\n\n  if (options != null && options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = tokTypes;","map":{"version":3,"sources":["/home/react/Blookers-Blogging-Website/node_modules/@babel/parser/lib/index.js"],"names":["Object","defineProperty","exports","value","lineBreak","lineBreakG","RegExp","source","isNewLine","code","skipWhiteSpace","skipWhiteSpaceInLine","skipWhiteSpaceToLineBreak","isWhitespace","Position","constructor","line","col","column","SourceLocation","start","end","filename","identifierName","getLineInfo","input","offset","lineStart","match","lastIndex","exec","index","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","hasPlugin","name","plugins","has","getPluginOption","plugin","get","setTrailingComments","node","comments","trailingComments","undefined","unshift","setInnerComments","innerComments","adjustInnerComments","elements","commentWS","lastElement","i","length","CommentsParser","addComment","comment","loc","state","push","processComment","commentStack","commentStackLength","lastCommentWS","leadingNode","nodeStart","commentEnd","containingNode","finalizeComment","splice","trailingNode","leadingComments","commentStart","charCodeAt","type","properties","arguments","params","specifiers","finalizeRemainingComments","resetPreviousNodeTrailingComments","ErrorCodes","freeze","SyntaxError","SourceTypeModuleError","ErrorMessages","makeErrorTemplates","AccessorIsGenerator","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","ImportCallArgumentTrailingComma","ImportCallArity","ImportCallNotNewExpression","ImportCallSpreadArgument","InvalidBigIntLiteral","InvalidCodePoint","InvalidDecimal","InvalidDigit","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","InvalidIdentifier","InvalidLhs","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","PipeTopicUnused","PipeUnparenthesizedBody","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","StrictDelete","StrictEvalArguments","StrictEvalArgumentsBinding","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","SourceTypeModuleErrorMessages","ImportMetaOutsideModule","ImportOutsideModule","keepReasonCodeCompat","reasonCode","syntaxPlugin","messages","templates","keys","forEach","template","ParserError","getLocationForPosition","pos","startLoc","lastTokStart","lastTokStartLoc","endLoc","lastTokEnd","lastTokEndLoc","raise","raiseWithData","raiseOverwrite","message","replace","_","options","errorRecovery","errors","error","assign","_raise","data","errorTemplate","errorContext","err","isLookahead","estree","superClass","parseRegExpLiteral","pattern","flags","regex","e","estreeParseLiteral","parseBigIntLiteral","bigInt","BigInt","_unused","bigint","String","parseDecimalLiteral","decimal","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","directiveLiteral","stmt","startNodeAt","expression","extra","expressionValue","raw","finishNodeAt","slice","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","isValidDirective","_stmt$expression$extr","parenthesized","stmtToDirective","addExtra","parseBlockBody","args","directiveStatements","directives","map","d","body","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","parsePrivateName","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","kind","computed","finishNode","parseClassProperty","propertyNode","parseClassPrivateProperty","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","startPos","refExpressionErrors","isAssignable","isBinding","toAssignable","isLHS","toAssignableObjectExpressionProp","key","finishCallExpression","optional","callee","_node$arguments$","attributes","toReferencedArguments","parseExport","exported","parseSubscript","base","noCalls","optionalChainMember","substring","stop","chain","startNodeAtNode","hasPropertyAsPrivateName","isOptionalChain","isObjectMethod","TokContext","token","preserveSpace","types","brace","beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","ExportedTokenType","label","conf","keyword","rightAssociative","binop","updateContext","keywords$1","Map","createKeyword","createToken","set","createBinop","tokenTypeCounter","tokenTypes","tokenLabels","tokenBinops","tokenBeforeExprs","tokenStartsExprs","tokenPrefixes","_options$binop","_options$beforeExpr","_options$startsExpr","_options$prefix","tt","num","regexp","string","privateName","eof","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","ellipsis","backQuote","dollarBraceL","at","hash","interpreterDirective","eq","slashAssign","moduloAssign","incDec","bang","tilde","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","relational","bitShift","plusMin","modulo","star","slash","exponent","_in","_instanceof","_break","_case","_catch","_continue","_debugger","_default","_else","_finally","_function","_if","_return","_switch","_throw","_try","_var","_const","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_typeof","_void","_delete","_do","_for","_while","jsxName","jsxText","jsxTagStart","jsxTagEnd","placeholder","tokenComesBeforeExpression","tokenCanStartExpression","tokenIsAssignment","tokenIsLoop","tokenIsKeyword","tokenIsOperator","tokenIsPostfix","tokenIsPrefix","tokenLabelName","tokenOperatorPrecedence","tokenIsRightAssociative","getExportedToken","isTokenType","obj","context","pop","j_expr","j_oTag","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","keywords","Set","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","reservedWordLikeSet","canBeReservedWord","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_STATIC_BLOCK","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","BIND_FLOW_DECLARE_FN","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","Scope","var","lexical","functions","ScopeHandler","scopeStack","undefinedExports","undefinedPrivateNames","inFunction","currentVarScopeFlags","allowSuper","currentThisScopeFlags","inClass","inClassAndNotInNonArrowFunction","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","add","maybeExportDefined","delete","isRedeclaredInScope","values","checkLocalExport","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","State","curLine","potentialArrowAt","noArrowAt","noArrowParamsConversionAt","maybeInArrowParameters","inType","noAnonFunctionType","inPropertyName","hasFlowComment","isAmbientContext","inAbstractClass","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","exprAllowed","containsEsc","strictErrors","tokensLength","init","strictMode","sourceType","startLine","curPosition","clone","skipArrays","val","Array","isArray","_isDigit","isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","allowedNumericSeparatorSiblings","bin","oct","dec","Token","Tokenizer","tokens","pushToken","checkKeywordEscapes","nextToken","eat","createLookaheadState","curContext","lookahead","old","curr","nextTokenStart","nextTokenStartSince","lookaheadCharCode","codePointAtPos","cp","trail","setStrict","clear","skipSpace","finishToken","readTmplToken","getTokenFromCode","skipBlockComment","indexOf","skipLineComment","startSkip","ch","spaceStart","loop","attachComment","CommentWhitespace","prevType","readToken_numberSign","readToken_interpreter","nextPos","expectPlugin","readWord1","finishOp","readToken_dot","readNumber","readToken_slash","readToken_mult_modulo","width","readToken_pipe_amp","readToken_caret","readToken_plus_min","readToken_lt_gt","size","readToken_eq_excl","readToken_question","next2","readRadixNumber","readString","readWord","fromCodePoint","str","readRegexp","escaped","content","mods","char","includes","readInt","radix","len","forceLen","allowNumSeparator","forbiddenSiblings","allowedSiblings","invalid","total","Infinity","prev","Number","isNaN","isBigInt","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","recordStrictModeErrors","underscorePos","parseInt","parseFloat","readCodePoint","throwOnInvalid","codePos","readHexChar","quote","out","chunkStart","readEscapedChar","containsInvalid","inTemplate","substr","octalStr","octal","n","firstCode","escStart","identifierCheck","esc","ClassScope","privateNames","loneAccessors","ClassScopeHandler","stack","oldClassScope","from","declarePrivateName","elementType","classScope","redefined","accessor","oldStatic","newStatic","oldKind","newKind","usePrivateName","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","recordDeclarationError","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","recordParenthesizedIdentifierError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","UtilParser","isRelational","op","expectRelational","unexpected","isContextual","isUnparsedContextual","nameStart","nameEnd","nextCh","isLookaheadContextual","eatContextual","expectContextual","canInsertSemicolon","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","semicolon","allowAsi","expect","assertNoSpace","messageOrType","missingPlugin","expectOnePlugin","names","some","join","tryParse","fn","oldState","abortSignal","failState","thrown","aborted","checkExpressionErrors","andThrow","shorthandAssign","doubleProto","optionalParameters","isLiteralPropertyName","property","initializeScopes","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","getScopeHandler","bind","oldProdParam","prodParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","ExpressionErrors","Node","parser","ranges","range","NodePrototype","prototype","__clone","newNode","clonePlaceholder","cloneIdentifier","cloned","create","expectedNode","cloneStringLiteral","NodeUtils","resetStartLocation","resetEndLocation","resetStartLocationFromNode","locationNode","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","PatternIsOptional","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flow","flowPragma","shouldParseTypes","shouldParseEnums","matches","Error","flowParseTypeInitialiser","tok","oldInType","flowParseType","flowParsePredicate","moduloPos","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","rest","this","returnType","typeAnnotation","flowParseDeclare","insideModule","flowParseDeclareVariable","flowParseDeclareModuleExports","flowParseDeclareModule","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","hasModuleExport","default","isLet","suggestion","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","variance","flowParseVariance","ident","bound","defaultRequired","typeParameter","oldNoAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStart","inexactStart","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","argument","proto","flowCheckGetterSetterParams","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","topLevel","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","setOptionalParametersError","originalNoArrowAt","consequent","failed","tryParseConditionalConsequent","valid","getArrowLikeExpressions","alternate","parseMaybeAssign","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","_node$extra","toAssignableList","trailingComma","checkParams","parse","result","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","isIterator","readIterator","fullWord","exprList","trailingCommaPos","toReferencedList","isParenthesizedExpr","_expr$extra","parseArrayLike","close","canBePattern","isTuple","checkLVal","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyName","isPrivateNameAllowed","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","left","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","contextDescription","local","maybeParseDefaultImportSpecifier","parseImportSpecifier","firstIdentIsString","firstIdent","parseModuleExportName","specifierTypeKind","as_ident","imported","nodeIsTypeImport","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","_jsx","jsx","_jsx2","_jsx3","abort","_arrowExpression$extr","arrowExpression","maybeUnwrapTypeCastExpression","async","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewArguments","targs","parseArrowExpression","parseTopLevel","file","program","fileNode","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","enumName","memberName","flowEnumErrorInvalidMemberName","toUpperCase","flowEnumErrorDuplicateMemberName","flowEnumErrorInconsistentMemberValues","flowEnumErrorInvalidExplicitType","suppliedType","flowEnumErrorInvalidMemberInitializer","explicitType","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","afterNext","entities","quot","amp","apos","lt","gt","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","HEX_NUMBER","DECIMAL_NUMBER","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","MissingClosingTagFragment","UnexpectedSequenceExpression","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","j_cTag","isFragment","object","getQualifiedJSXName","namespace","jsxReadToken","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","count","entity","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","lookaheadState","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","AbstractPropertyHasInitializer","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InvalidModifierOnTypeMember","InvalidModifiersOrder","InvalidTupleMemberLabel","MissingInterfaceName","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","StaticBlockCannotHaveModifier","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","modifier","typescript","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","allowedModifiers","stopOnStartOfClassStaticBlock","tsIsStartOfStaticBlocks","tsTryParse","tsParseModifiers","modified","disallowedModifiers","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","hasOwnProperty","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","tsParseDelimitedListWorker","expectSuccess","element","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","tsFillSignature","returnToken","signature","returnTokenRequired","parameters","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","idx","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","_labeledElements","isLabeled","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","parseMaybeUnary","tsParseArrayTypeOrHigher","tsParseTypeOperator","operator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","find","kw","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","braceStackCounter","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","descriptor","originalStart","delimitedList","tsParseExpressionWithTypeArguments","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","tsTryParseAndCatch","tsTryParseDeclare","nany","starttype","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsIsDeclarationStart","parseAssignableListItem","decorators","override","elt","pp","parameter","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","isOptionalCall","missingParenErrorPos","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","parseExprOp","leftStartPos","leftStartLoc","minPrec","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","cls","interfaceNode","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","modifiers","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","parseClassPropertyAnnotation","definite","_typeCast","_typeCast2","_jsx4","_typeCast3","typeCast","_typeParameters","toAssignableParenthesizedExpression","_expr$extra2","parseMaybeDecoratorArguments","checkCommaAfterRest","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldInAbstractClass","hasBody","shouldParseAsAmbientContext","getExpression","PlaceHolderErrors","ClassNameIsRequired","placeholders","parsePlaceholder","finishPlaceholder","isFinished","verifyBreakContinue","parseBlock","parseFunctionId","takeDecorators","oldStrict","parseClassBody","startsWith","maybeParseExportDefaultSpecifier","checkExport","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","v8intrinsic","parseV8Intrinsic","v8IntrinsicStart","parseIdentifierName","identifier","option","PIPELINE_PROPOSALS","TOPIC_TOKENS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","proposal","proposalList","p","tupleSyntaxIsHash","topicToken","tokenList","moduleAttributesVerionPluginOption","missingPlugins","mixinPlugins","mixinPluginNames","defaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","createParenthesizedExpressions","getOptions","opts","unwrapParenthesizedExpression","LValParser","_node$extra3","last","_node$extra2","isLast","raiseRestNotLast","checkToRestConversion","arg","raiseTrailingCommaAfterRest","toReferencedListDeep","parseSpread","refNeedsArrowPos","parseRestBinding","parseObjectLike","closeCharCode","allowEmpty","elts","parseDecorator","_startLoc","_startPos","_left","checkClashes","disallowLetBinding","strictModeChanged","elem","invalidHackPipeBodies","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","expressions","parseMaybeAssignDisallowIn","resultError","_resultError$pos","parseYield","ownExpressionErrors","parseMaybeConditional","parseExprOps","parseMaybeUnaryOrPrivate","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","nextOp","withTopicBindingContext","parseHackPipeBody","parseSmartPipelineBodyInStyle","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","_body$extra","topicReferenceWasUsedInCurrentContext","checkExponentialAfterUnary","sawUnary","isAwait","isAwaitAllowed","parseAwait","update","isDelete","parseUpdate","isAmbiguousAwait","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseNoCallExpr","tag","quasi","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","parseExprListItem","_call$extra","parseSuper","parseImportMetaProperty","parseModuleExpression","parseFunction","parseAsyncArrowUnaryFunction","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","pipeProposal","tokenType","finishTopicReference","lookaheadCh","codePointAt","testTopicReferenceConfiguration","nodeType","topicReferenceIsAllowedInCurrentContext","registerTopicReference","pluginTopicToken","parseMaybePrivateName","isPrivate","meta","parseMetaProperty","propertyName","innerStartPos","innerStartLoc","spreadStart","optionalCommaStart","spreadNodeStartPos","spreadNodeStartLoc","innerEndPos","innerEndLoc","arrowNode","parenExpression","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","cooked","tail","curElt","quasis","propHash","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","_params","oldInPropertyName","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","errorPos","reservedTest","delegating","delegate","checkHackPipeBodyEarlyErrors","childExpr","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","withSmartMixTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","StatementParser","interpreter","parseInterpreterDirective","isLetKeyword","endCh","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","isBreak","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","parseVar","declarations","parseForIn","startsWithUnescapedName","isForOf","description","declarationPosition","discriminant","cases","cur","sawDefault","isCase","simple","block","handler","clause","finalizer","statementStart","allowDirectives","createNewLexicalScope","afterBlockParse","parsedNonDirective","isForIn","await","isFor","isTypescript","statement","isHangingStatement","requireId","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","publicMember","parseClassElementName","maybeQuestionTokenStart","pushClassPrivateProperty","pushClassProperty","_member$decorators","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","l","hasFrom","nextAfterFrom","assertions","maybeParseImportAssertions","checkNames","isDefault","isFrom","_declaration$extra","exportedName","nodes","isString","surrogate","toString","parseNext","maybeParseModuleAttributes","parseAssertEntries","attrs","attrNames","importedIsString","Parser","pluginsMap","pluginMap","_options","getParser","ast","moduleError","_unused2","generateExportedTokenTypes","internalTokenTypes","tokTypes","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nconst skipWhiteSpaceInLine = /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\nconst skipWhiteSpaceToLineBreak = new RegExp(\"(?=(\" + skipWhiteSpaceInLine.source + \"))\\\\1\" + /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source, \"y\");\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nclass Position {\n  constructor(line, col) {\n    this.line = void 0;\n    this.column = void 0;\n    this.line = line;\n    this.column = col;\n  }\n\n}\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = void 0;\n    this.end = void 0;\n    this.filename = void 0;\n    this.identifierName = void 0;\n    this.start = start;\n    this.end = end;\n  }\n\n}\nfunction getLineInfo(input, offset) {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n\nclass BaseParser {\n  constructor() {\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n\n  hasPlugin(name) {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin, name) {\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n\n}\n\nfunction setTrailingComments(node, comments) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\nfunction setInnerComments(node, comments) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else if (comments !== undefined) {\n    node.innerComments.unshift(...comments);\n  }\n}\n\nfunction adjustInnerComments(node, elements, commentWS) {\n  let lastElement = null;\n  let i = elements.length;\n\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  processComment(node) {\n    const {\n      commentStack\n    } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const {\n      start: nodeStart\n    } = node;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n\n      if (commentEnd > nodeStart) {\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n\n        break;\n      }\n    }\n  }\n\n  finalizeComment(commentWS) {\n    const {\n      comments\n    } = commentWS;\n\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n\n      if (commentWS.trailingNode !== null) {\n        commentWS.trailingNode.leadingComments = comments;\n      }\n    } else {\n      const {\n        containingNode: node,\n        start: commentStart\n      } = commentWS;\n\n      if (this.input.charCodeAt(commentStart - 1) === 44) {\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n\n          default:\n            {\n              setInnerComments(node, comments);\n            }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  finalizeRemainingComments() {\n    const {\n      commentStack\n    } = this.state;\n\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n\n    this.state.commentStack = [];\n  }\n\n  resetPreviousNodeTrailingComments(node) {\n    const {\n      commentStack\n    } = this.state;\n    const {\n      length\n    } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n}\n\nconst ErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n});\n\nconst ErrorMessages = makeErrorTemplates({\n  AccessorIsGenerator: \"A %0ter cannot be a generator.\",\n  ArgumentsInClass: \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock: \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter: \"'await' is not allowed in async function parameters.\",\n  AwaitNotInAsyncContext: \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\n  BadSetterRestParameter: \"A 'set' accesor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: \"'%0' require an initialization value.\",\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?\",\n  ExportDefaultFromAsIdentifier: \"'from' is not allowed as an identifier after 'export default'.\",\n  ForInOfLoopInitializer: \"'%0' loop variable declaration may not have an initializer.\",\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block.\",\n  IllegalBreakContinue: \"Unsyntactic %0.\",\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportBindingIsString: 'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: \"`import()` requires exactly %0.\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: \"Expected number in radix %0.\",\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0.\",\n  InvalidIdentifier: \"Invalid identifier %0.\",\n  InvalidLhs: \"Invalid left-hand side in %0.\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0.\",\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent: \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'.\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined.\",\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty: \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: \"Label '%0' is already declared.\",\n  LetInLexicalBinding: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType: \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue: \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: 'Duplicate key \"%0\" is not allowed in module attributes.',\n  ModuleExportNameHasLoneSurrogate: \"An export name cannot include a lone surrogate, found '\\\\u%0'.\",\n  ModuleExportUndefined: \"Export '%0' is not defined.\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar: \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor: \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PipeBodyIsTighter: \"Unexpected %0 after pipeline body; any %0 expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound: \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: 'Invalid topic token %0. In order to use %0 as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"%0\" }.',\n  PipeTopicUnused: \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: \"Hack-style pipe body cannot be an unparenthesized %0 expression; please wrap it in parentheses.\",\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PrivateInExpectedIn: \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0.\",\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  StrictDelete: \"Deleting local variable in strict mode.\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode.\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode.\",\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block.\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n  StrictWith: \"'with' in strict mode.\",\n  SuperNotAllowed: \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'.\",\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget: \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'.\",\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: \"Unexpected token '%0'.\",\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1.\",\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper: \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  VarRedeclaration: \"Identifier '%0' has already been declared.\",\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0.\"\n}, ErrorCodes.SyntaxError);\nconst SourceTypeModuleErrorMessages = makeErrorTemplates({\n  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`\n}, ErrorCodes.SourceTypeModuleError);\n\nfunction keepReasonCodeCompat(reasonCode, syntaxPlugin) {\n  {\n    if (syntaxPlugin === \"flow\" && reasonCode === \"PatternIsOptional\") {\n      return \"OptionalBindingPattern\";\n    }\n  }\n  return reasonCode;\n}\n\nfunction makeErrorTemplates(messages, code, syntaxPlugin) {\n  const templates = {};\n  Object.keys(messages).forEach(reasonCode => {\n    templates[reasonCode] = Object.freeze({\n      code,\n      reasonCode: keepReasonCodeCompat(reasonCode, syntaxPlugin),\n      template: messages[reasonCode]\n    });\n  });\n  return Object.freeze(templates);\n}\nclass ParserError extends CommentsParser {\n  getLocationForPosition(pos) {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;else if (pos === this.state.end) loc = this.state.endLoc;else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;else loc = getLineInfo(this.input, pos);\n    return loc;\n  }\n\n  raise(pos, {\n    code,\n    reasonCode,\n    template\n  }, ...params) {\n    return this.raiseWithData(pos, {\n      code,\n      reasonCode\n    }, template, ...params);\n  }\n\n  raiseOverwrite(pos, {\n    code,\n    template\n  }, ...params) {\n    const loc = this.getLocationForPosition(pos);\n    const message = template.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n\n    if (this.options.errorRecovery) {\n      const errors = this.state.errors;\n\n      for (let i = errors.length - 1; i >= 0; i--) {\n        const error = errors[i];\n\n        if (error.pos === pos) {\n          return Object.assign(error, {\n            message\n          });\n        } else if (error.pos < pos) {\n          break;\n        }\n      }\n    }\n\n    return this._raise({\n      code,\n      loc,\n      pos\n    }, message);\n  }\n\n  raiseWithData(pos, data, errorTemplate, ...params) {\n    const loc = this.getLocationForPosition(pos);\n    const message = errorTemplate.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign({\n      loc,\n      pos\n    }, data), message);\n  }\n\n  _raise(errorContext, message) {\n    const err = new SyntaxError(message);\n    Object.assign(err, errorContext);\n\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n\n}\n\nvar estree = (superClass => class extends superClass {\n  parseRegExpLiteral({\n    pattern,\n    flags\n  }) {\n    let regex = null;\n\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (e) {}\n\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n\n  parseBigIntLiteral(value) {\n    let bigInt;\n\n    try {\n      bigInt = BigInt(value);\n    } catch (_unused) {\n      bigInt = null;\n    }\n\n    const node = this.estreeParseLiteral(bigInt);\n    node.bigint = String(node.value || value);\n    return node;\n  }\n\n  parseDecimalLiteral(value) {\n    const decimal = null;\n    const node = this.estreeParseLiteral(decimal);\n    node.decimal = String(node.value || value);\n    return node;\n  }\n\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n\n  parseStringLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  parseNumericLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  parseNullLiteral() {\n    return this.estreeParseLiteral(null);\n  }\n\n  parseBooleanLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  directiveToStmt(directive) {\n    const directiveLiteral = directive.value;\n    const stmt = this.startNodeAt(directive.start, directive.loc.start);\n    const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n    expression.value = directiveLiteral.extra.expressionValue;\n    expression.raw = directiveLiteral.extra.raw;\n    stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\n    stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n    return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\n  }\n\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n\n  checkDeclaration(node) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.value.params;\n  }\n\n  isValidDirective(stmt) {\n    var _stmt$expression$extr;\n\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);\n  }\n\n  stmtToDirective(stmt) {\n    const value = stmt.expression.value;\n    const directive = super.stmtToDirective(stmt);\n    this.addExtra(directive.value, \"expressionValue\", value);\n    return directive;\n  }\n\n  parseBlockBody(node, ...args) {\n    super.parseBlockBody(node, ...args);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n\n    classBody.body.push(method);\n  }\n\n  parsePrivateName() {\n    const node = super.parsePrivateName();\n\n    if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n      return node;\n    }\n\n    return this.convertPrivateNameToPrivateIdentifier(node);\n  }\n\n  convertPrivateNameToPrivateIdentifier(node) {\n    const name = super.getPrivateNameSV(node);\n    node = node;\n    delete node.id;\n    node.name = name;\n    node.type = \"PrivateIdentifier\";\n    return node;\n  }\n\n  isPrivateName(node) {\n    if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n      return super.isPrivateName(node);\n    }\n\n    return node.type === \"PrivateIdentifier\";\n  }\n\n  getPrivateNameSV(node) {\n    if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n      return super.getPrivateNameSV(node);\n    }\n\n    return node.name;\n  }\n\n  parseLiteral(value, type) {\n    const node = super.parseLiteral(value, type);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = \"FunctionExpression\";\n    delete funcNode.kind;\n    node.value = funcNode;\n\n    if (type === \"ClassPrivateMethod\") {\n      node.computed = false;\n    }\n\n    type = \"MethodDefinition\";\n    return this.finishNode(node, type);\n  }\n\n  parseClassProperty(...args) {\n    const propertyNode = super.parseClassProperty(...args);\n\n    if (this.getPluginOption(\"estree\", \"classFeatures\")) {\n      propertyNode.type = \"PropertyDefinition\";\n    }\n\n    return propertyNode;\n  }\n\n  parseClassPrivateProperty(...args) {\n    const propertyNode = super.parseClassPrivateProperty(...args);\n\n    if (this.getPluginOption(\"estree\", \"classFeatures\")) {\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n    }\n\n    return propertyNode;\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);\n\n    if (node) {\n      node.type = \"Property\";\n      if (node.kind === \"method\") node.kind = \"init\";\n      node.shorthand = false;\n    }\n\n    return node;\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n\n    return node;\n  }\n\n  isAssignable(node, isBinding) {\n    if (node != null && this.isObjectProperty(node)) {\n      return this.isAssignable(node.value, isBinding);\n    }\n\n    return super.isAssignable(node, isBinding);\n  }\n\n  toAssignable(node, isLHS = false) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.toAssignable(node.value, isLHS);\n      return node;\n    }\n\n    return super.toAssignable(node, isLHS);\n  }\n\n  toAssignableObjectExpressionProp(prop, ...args) {\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\n      this.raise(prop.key.start, ErrorMessages.PatternHasAccessor);\n    } else if (prop.method) {\n      this.raise(prop.key.start, ErrorMessages.PatternHasMethod);\n    } else {\n      super.toAssignableObjectExpressionProp(prop, ...args);\n    }\n  }\n\n  finishCallExpression(node, optional) {\n    super.finishCallExpression(node, optional);\n\n    if (node.callee.type === \"Import\") {\n      node.type = \"ImportExpression\";\n      node.source = node.arguments[0];\n\n      if (this.hasPlugin(\"importAssertions\")) {\n        var _node$arguments$;\n\n        node.attributes = (_node$arguments$ = node.arguments[1]) != null ? _node$arguments$ : null;\n      }\n\n      delete node.arguments;\n      delete node.callee;\n    }\n\n    return node;\n  }\n\n  toReferencedArguments(node) {\n    if (node.type === \"ImportExpression\") {\n      return;\n    }\n\n    super.toReferencedArguments(node);\n  }\n\n  parseExport(node) {\n    super.parseExport(node);\n\n    switch (node.type) {\n      case \"ExportAllDeclaration\":\n        node.exported = null;\n        break;\n\n      case \"ExportNamedDeclaration\":\n        if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n          node.type = \"ExportAllDeclaration\";\n          node.exported = node.specifiers[0].exported;\n          delete node.specifiers;\n        }\n\n        break;\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    const node = super.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n    if (state.optionalChainMember) {\n      if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\n        node.type = node.type.substring(8);\n      }\n\n      if (state.stop) {\n        const chain = this.startNodeAtNode(node);\n        chain.expression = node;\n        return this.finishNode(chain, \"ChainExpression\");\n      }\n    } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\n      node.optional = false;\n    }\n\n    return node;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    if (node.type === \"ChainExpression\") {\n      node = node.expression;\n    }\n\n    return super.hasPropertyAsPrivateName(node);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"ChainExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n  }\n\n  isObjectMethod(node) {\n    return node.method || node.kind === \"get\" || node.kind === \"set\";\n  }\n\n});\n\nclass TokContext {\n  constructor(token, preserveSpace) {\n    this.token = void 0;\n    this.preserveSpace = void 0;\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n}\nconst types = {\n  brace: new TokContext(\"{\"),\n  template: new TokContext(\"`\", true)\n};\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\nclass ExportedTokenType {\n  constructor(label, conf = {}) {\n    this.label = void 0;\n    this.keyword = void 0;\n    this.beforeExpr = void 0;\n    this.startsExpr = void 0;\n    this.rightAssociative = void 0;\n    this.isLoop = void 0;\n    this.isAssign = void 0;\n    this.prefix = void 0;\n    this.postfix = void 0;\n    this.binop = void 0;\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    {\n      this.updateContext = null;\n    }\n  }\n\n}\nconst keywords$1 = new Map();\n\nfunction createKeyword(name, options = {}) {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords$1.set(name, token);\n  return token;\n}\n\nfunction createBinop(name, binop) {\n  return createToken(name, {\n    beforeExpr,\n    binop\n  });\n}\n\nlet tokenTypeCounter = -1;\nconst tokenTypes = [];\nconst tokenLabels = [];\nconst tokenBinops = [];\nconst tokenBeforeExprs = [];\nconst tokenStartsExprs = [];\nconst tokenPrefixes = [];\n\nfunction createToken(name, options = {}) {\n  var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;\n\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push((_options$binop = options.binop) != null ? _options$binop : -1);\n  tokenBeforeExprs.push((_options$beforeExpr = options.beforeExpr) != null ? _options$beforeExpr : false);\n  tokenStartsExprs.push((_options$startsExpr = options.startsExpr) != null ? _options$startsExpr : false);\n  tokenPrefixes.push((_options$prefix = options.prefix) != null ? _options$prefix : false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n  return tokenTypeCounter;\n}\n\nconst tt = {\n  num: createToken(\"num\", {\n    startsExpr\n  }),\n  bigint: createToken(\"bigint\", {\n    startsExpr\n  }),\n  decimal: createToken(\"decimal\", {\n    startsExpr\n  }),\n  regexp: createToken(\"regexp\", {\n    startsExpr\n  }),\n  string: createToken(\"string\", {\n    startsExpr\n  }),\n  name: createToken(\"name\", {\n    startsExpr\n  }),\n  privateName: createToken(\"#name\", {\n    startsExpr\n  }),\n  eof: createToken(\"eof\"),\n  bracketL: createToken(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketHashL: createToken(\"#[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketBarL: createToken(\"[|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: createToken(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceHashL: createToken(\"#{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: createToken(\"}\", {\n    beforeExpr\n  }),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", {\n    beforeExpr\n  }),\n  semi: createToken(\";\", {\n    beforeExpr\n  }),\n  colon: createToken(\":\", {\n    beforeExpr\n  }),\n  doubleColon: createToken(\"::\", {\n    beforeExpr\n  }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", {\n    beforeExpr\n  }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", {\n    beforeExpr\n  }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", {\n    beforeExpr\n  }),\n  backQuote: createToken(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: createToken(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: createToken(\"#!...\"),\n  eq: createToken(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  slashAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  moduloAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: createToken(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: createToken(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: createToken(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", {\n    beforeExpr,\n    binop: 9,\n    prefix,\n    startsExpr\n  }),\n  modulo: createToken(\"%\", {\n    binop: 10,\n    startsExpr\n  }),\n  star: createToken(\"*\", {\n    binop: 10\n  }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", {\n    startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  _for: createKeyword(\"for\", {\n    isLoop\n  }),\n  _while: createKeyword(\"while\", {\n    isLoop\n  }),\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", {\n    beforeExpr: true\n  }),\n  jsxTagStart: createToken(\"jsxTagStart\", {\n    startsExpr: true\n  }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n  placeholder: createToken(\"%%\", {\n    startsExpr: true\n  })\n};\nfunction tokenComesBeforeExpression(token) {\n  return tokenBeforeExprs[token];\n}\nfunction tokenCanStartExpression(token) {\n  return tokenStartsExprs[token];\n}\nfunction tokenIsAssignment(token) {\n  return token >= 35 && token <= 38;\n}\nfunction tokenIsLoop(token) {\n  return token >= 89 && token <= 91;\n}\nfunction tokenIsKeyword(token) {\n  return token >= 57 && token <= 91;\n}\nfunction tokenIsOperator(token) {\n  return token >= 42 && token <= 58;\n}\nfunction tokenIsPostfix(token) {\n  return token === 39;\n}\nfunction tokenIsPrefix(token) {\n  return tokenPrefixes[token];\n}\nfunction tokenLabelName(token) {\n  return tokenLabels[token];\n}\nfunction tokenOperatorPrecedence(token) {\n  return tokenBinops[token];\n}\nfunction tokenIsRightAssociative(token) {\n  return token === 56;\n}\nfunction getExportedToken(token) {\n  return tokenTypes[token];\n}\nfunction isTokenType(obj) {\n  return typeof obj === \"number\";\n}\n{\n  tokenTypes[16].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[13].updateContext = tokenTypes[15].updateContext = tokenTypes[31].updateContext = context => {\n    context.push(types.brace);\n  };\n\n  tokenTypes[30].updateContext = context => {\n    if (context[context.length - 1] === types.template) {\n      context.pop();\n    } else {\n      context.push(types.template);\n    }\n  };\n\n  tokenTypes[94].updateContext = context => {\n    context.push(types.j_expr, types.j_oTag);\n  };\n}\n\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1070, 4050, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 46, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 482, 44, 11, 6, 17, 0, 322, 29, 19, 43, 1269, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4152, 8, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 357, 0, 62, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nconst reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\nfunction isKeyword(word) {\n  return keywords.has(word);\n}\n\nfunction isIteratorStart(current, next) {\n  return current === 64 && next === 64;\n}\nconst reservedWordLikeSet = new Set([\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\", \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\", \"eval\", \"arguments\", \"enum\", \"await\"]);\nfunction canBeReservedWord(word) {\n  return reservedWordLikeSet.has(word);\n}\n\nconst SCOPE_OTHER = 0b000000000,\n      SCOPE_PROGRAM = 0b000000001,\n      SCOPE_FUNCTION = 0b000000010,\n      SCOPE_ARROW = 0b000000100,\n      SCOPE_SIMPLE_CATCH = 0b000001000,\n      SCOPE_SUPER = 0b000010000,\n      SCOPE_DIRECT_SUPER = 0b000100000,\n      SCOPE_CLASS = 0b001000000,\n      SCOPE_STATIC_BLOCK = 0b010000000,\n      SCOPE_TS_MODULE = 0b100000000,\n      SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\nconst BIND_KIND_VALUE = 0b000000000001,\n      BIND_KIND_TYPE = 0b000000000010,\n      BIND_SCOPE_VAR = 0b000000000100,\n      BIND_SCOPE_LEXICAL = 0b000000001000,\n      BIND_SCOPE_FUNCTION = 0b000000010000,\n      BIND_FLAGS_NONE = 0b000001000000,\n      BIND_FLAGS_CLASS = 0b000010000000,\n      BIND_FLAGS_TS_ENUM = 0b000100000000,\n      BIND_FLAGS_TS_CONST_ENUM = 0b001000000000,\n      BIND_FLAGS_TS_EXPORT_ONLY = 0b010000000000,\n      BIND_FLAGS_FLOW_DECLARE_FN = 0b100000000000;\nconst BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n      BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n      BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n      BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n      BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n      BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n      BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n      BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\nconst CLASS_ELEMENT_FLAG_STATIC = 0b100,\n      CLASS_ELEMENT_KIND_GETTER = 0b010,\n      CLASS_ELEMENT_KIND_SETTER = 0b001,\n      CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nconst CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n      CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n      CLASS_ELEMENT_OTHER = 0;\n\nclass Scope {\n  constructor(flags) {\n    this.var = new Set();\n    this.lexical = new Set();\n    this.functions = new Set();\n    this.flags = flags;\n  }\n\n}\nclass ScopeHandler {\n  constructor(raise, inModule) {\n    this.scopeStack = [];\n    this.undefinedExports = new Map();\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        return false;\n      }\n    }\n  }\n\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags) {\n    return new Scope(flags);\n  }\n\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);\n  }\n\n  declareName(name, bindingType, pos) {\n    let scope = this.currentScope();\n\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope, name) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(scope, name, bindingType, pos) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, ErrorMessages.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return scope.lexical.has(name) || scope.functions.has(name) || scope.var.has(name);\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return scope.lexical.has(name) || !this.treatFunctionsAsVarInScope(scope) && scope.var.has(name);\n    }\n\n    return scope.lexical.has(name) && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical.values().next().value === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name);\n  }\n\n  checkLocalExport(id) {\n    const {\n      name\n    } = id;\n    const topLevelScope = this.scopeStack[0];\n\n    if (!topLevelScope.lexical.has(name) && !topLevelScope.var.has(name) && !topLevelScope.functions.has(name)) {\n      this.undefinedExports.set(name, id.start);\n    }\n  }\n\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  currentThisScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n\n}\n\nclass FlowScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.declareFunctions = new Set();\n  }\n\n}\n\nclass FlowScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new FlowScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return !scope.declareFunctions.has(name) && (scope.lexical.has(name) || scope.functions.has(name));\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nclass State {\n  constructor() {\n    this.strict = void 0;\n    this.curLine = void 0;\n    this.startLoc = void 0;\n    this.endLoc = void 0;\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.maybeInArrowParameters = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.inPropertyName = false;\n    this.hasFlowComment = false;\n    this.isAmbientContext = false;\n    this.inAbstractClass = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.comments = [];\n    this.commentStack = [];\n    this.pos = 0;\n    this.lineStart = 0;\n    this.type = 7;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.lastTokEnd = 0;\n    this.context = [types.brace];\n    this.exprAllowed = true;\n    this.containsEsc = false;\n    this.strictErrors = new Map();\n    this.tokensLength = 0;\n  }\n\n  init(options) {\n    this.strict = options.strictMode === false ? false : options.strictMode === true ? true : options.sourceType === \"module\";\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays) {\n    const state = new State();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      state[key] = val;\n    }\n\n    return state;\n  }\n\n}\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\nconst VALID_REGEX_FLAGS = new Set([103, 109, 115, 105, 121, 117, 100]);\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\n  hex: [46, 88, 95, 120]\n};\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [48, 49];\nallowedNumericSeparatorSiblings.oct = [...allowedNumericSeparatorSiblings.bin, 50, 51, 52, 53, 54, 55];\nallowedNumericSeparatorSiblings.dec = [...allowedNumericSeparatorSiblings.oct, 56, 57];\nallowedNumericSeparatorSiblings.hex = [...allowedNumericSeparatorSiblings.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102];\nclass Token {\n  constructor(state) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n}\nclass Tokenizer extends ParserError {\n  constructor(options, input) {\n    super();\n    this.isLookahead = void 0;\n    this.tokens = [];\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token) {\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  next() {\n    this.checkKeywordEscapes();\n\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  match(type) {\n    return this.state.type === type;\n  }\n\n  createLookaheadState(state) {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      lastTokEnd: state.end,\n      context: [this.curContext()],\n      inType: state.inType\n    };\n  }\n\n  lookahead() {\n    const old = this.state;\n    this.state = this.createLookaheadState(old);\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart() {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos) {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos) {\n    let cp = this.input.charCodeAt(pos);\n\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n\n    return cp;\n  }\n\n  setStrict(strict) {\n    this.state.strict = strict;\n\n    if (strict) {\n      this.state.strictErrors.forEach((message, pos) => this.raise(pos, message));\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  nextToken() {\n    const curContext = this.curContext();\n    if (!curContext.preserveSpace) this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n\n    if (this.state.pos >= this.length) {\n      this.finishToken(7);\n      return;\n    }\n\n    if (curContext === types.template) {\n      this.readTmplToken();\n    } else {\n      this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n    }\n  }\n\n  skipBlockComment() {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", start + 2);\n    if (end === -1) throw this.raise(start, ErrorMessages.UnterminatedComment);\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start + 2;\n\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    if (this.isLookahead) return;\n    const comment = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + 2,\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    if (this.isLookahead) return;\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n    const comment = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipSpace() {\n    const spaceStart = this.state.pos;\n    const comments = [];\n\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              {\n                const comment = this.skipBlockComment();\n\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n\n                break;\n              }\n\n            case 47:\n              {\n                const comment = this.skipLineComment(2);\n\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n\n                break;\n              }\n\n            default:\n              break loop;\n          }\n\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === 45 && !this.inModule) {\n            const pos = this.state.pos;\n\n            if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {\n              const comment = this.skipLineComment(3);\n\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === 60 && !this.inModule) {\n            const pos = this.state.pos;\n\n            if (this.input.charCodeAt(pos + 1) === 33 && this.input.charCodeAt(pos + 2) === 45 && this.input.charCodeAt(pos + 3) === 45) {\n              const comment = this.skipLineComment(4);\n\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null\n      };\n      this.state.commentStack.push(CommentWhitespace);\n    }\n  }\n\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.state.endLoc = this.state.curPosition();\n      this.updateContext(prevType);\n    }\n  }\n\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n\n    if (next >= 48 && next <= 57) {\n      throw this.raise(this.state.pos, ErrorMessages.UnexpectedDigitAfterHash);\n    }\n\n    if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n      this.expectPlugin(\"recordAndTuple\");\n\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(this.state.pos, next === 123 ? ErrorMessages.RecordExpressionHashIncorrectStartSyntaxType : ErrorMessages.TupleExpressionHashIncorrectStartSyntaxType);\n      }\n\n      this.state.pos += 2;\n\n      if (next === 123) {\n        this.finishToken(15);\n      } else {\n        this.finishToken(9);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(6, this.readWord1(next));\n    } else if (next === 92) {\n      ++this.state.pos;\n      this.finishToken(6, this.readWord1());\n    } else {\n      this.finishOp(33, 1);\n    }\n  }\n\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(29);\n    } else {\n      ++this.state.pos;\n      this.finishToken(24);\n    }\n  }\n\n  readToken_slash() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(37, 2);\n    } else {\n      this.finishOp(55, 1);\n    }\n  }\n\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== 33) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(34, value);\n    return true;\n  }\n\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? 54 : 53;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = 56;\n    }\n\n    if (next === 61 && !this.state.inType) {\n      width++;\n      type = code === 37 ? 38 : 36;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(36, 3);\n      } else {\n        this.finishOp(code === 124 ? 44 : 45, 2);\n      }\n\n      return;\n    }\n\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(42, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.state.pos += 2;\n        this.finishToken(17);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.state.pos += 2;\n        this.finishToken(12);\n        return;\n      }\n    }\n\n    if (next === 61) {\n      this.finishOp(36, 2);\n      return;\n    }\n\n    this.finishOp(code === 124 ? 46 : 48, 1);\n  }\n\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(36, 2);\n    } else {\n      this.finishOp(47, 1);\n    }\n  }\n\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(39, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(36, 2);\n    } else {\n      this.finishOp(52, 1);\n    }\n  }\n\n  readToken_lt_gt(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;\n\n      if (this.input.charCodeAt(this.state.pos + size) === 61) {\n        this.finishOp(36, size + 1);\n        return;\n      }\n\n      this.finishOp(51, size);\n      return;\n    }\n\n    if (next === 61) {\n      size = 2;\n    }\n\n    this.finishOp(50, size);\n  }\n\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(49, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(27);\n      return;\n    }\n\n    this.finishOp(code === 61 ? 35 : 40, 1);\n  }\n\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n\n    if (next === 63) {\n      if (next2 === 61) {\n        this.finishOp(36, 3);\n      } else {\n        this.finishOp(43, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(26);\n    } else {\n      ++this.state.pos;\n      this.finishToken(25);\n    }\n  }\n\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n\n      case 40:\n        ++this.state.pos;\n        this.finishToken(18);\n        return;\n\n      case 41:\n        ++this.state.pos;\n        this.finishToken(19);\n        return;\n\n      case 59:\n        ++this.state.pos;\n        this.finishToken(21);\n        return;\n\n      case 44:\n        ++this.state.pos;\n        this.finishToken(20);\n        return;\n\n      case 91:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.state.pos += 2;\n          this.finishToken(10);\n        } else {\n          ++this.state.pos;\n          this.finishToken(8);\n        }\n\n        return;\n\n      case 93:\n        ++this.state.pos;\n        this.finishToken(11);\n        return;\n\n      case 123:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.state.pos += 2;\n          this.finishToken(14);\n        } else {\n          ++this.state.pos;\n          this.finishToken(13);\n        }\n\n        return;\n\n      case 125:\n        ++this.state.pos;\n        this.finishToken(16);\n        return;\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(23, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(22);\n        }\n\n        return;\n\n      case 63:\n        this.readToken_question();\n        return;\n\n      case 96:\n        ++this.state.pos;\n        this.finishToken(30);\n        return;\n\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n\n      case 47:\n        this.readToken_slash();\n        return;\n\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case 94:\n        this.readToken_caret();\n        return;\n\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n\n      case 60:\n      case 62:\n        this.readToken_lt_gt(code);\n        return;\n\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n\n      case 126:\n        this.finishOp(41, 1);\n        return;\n\n      case 64:\n        ++this.state.pos;\n        this.finishToken(32);\n        return;\n\n      case 35:\n        this.readToken_numberSign();\n        return;\n\n      case 92:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n\n    }\n\n    throw this.raise(this.state.pos, ErrorMessages.InvalidOrUnexpectedToken, String.fromCodePoint(code));\n  }\n\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp() {\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let {\n      pos\n    } = this.state;\n\n    for (;; ++pos) {\n      if (pos >= this.length) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      const ch = this.input.charCodeAt(pos);\n\n      if (isNewLine(ch)) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === 91) {\n          inClass = true;\n        } else if (ch === 93 && inClass) {\n          inClass = false;\n        } else if (ch === 47 && !inClass) {\n          break;\n        }\n\n        escaped = ch === 92;\n      }\n    }\n\n    const content = this.input.slice(start, pos);\n    ++pos;\n    let mods = \"\";\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      const char = String.fromCharCode(cp);\n\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (mods.includes(char)) {\n          this.raise(pos + 1, ErrorMessages.DuplicateRegExpFlags);\n        }\n      } else if (isIdentifierChar(cp) || cp === 92) {\n        this.raise(pos + 1, ErrorMessages.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n\n    this.state.pos = pos;\n    this.finishToken(3, {\n      pattern: content,\n      flags: mods\n    });\n  }\n\n  readInt(radix, len, forceLen, allowNumSeparator = true) {\n    const start = this.state.pos;\n    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === 95) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(this.state.pos, ErrorMessages.NumericSeparatorInEscapeSequence);\n        }\n\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= 97) {\n        val = code - 97 + 10;\n      } else if (code >= 65) {\n        val = code - 65 + 10;\n      } else if (_isDigit(code)) {\n        val = code - 48;\n      } else {\n        val = Infinity;\n      }\n\n      if (val >= radix) {\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, ErrorMessages.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n\n    if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix) {\n    const start = this.state.pos;\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n\n    if (val == null) {\n      this.raise(this.state.start + 2, ErrorMessages.InvalidDigit, radix);\n    }\n\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 110) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === 109) {\n      throw this.raise(start, ErrorMessages.InvalidDecimal);\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(1, str);\n      return;\n    }\n\n    this.finishToken(0, val);\n  }\n\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, ErrorMessages.InvalidNumber);\n    }\n\n    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(start, ErrorMessages.StrictOctalLiteral);\n\n      if (!this.state.strict) {\n        const underscorePos = integer.indexOf(\"_\");\n\n        if (underscorePos > 0) {\n          this.raise(underscorePos + start, ErrorMessages.ZeroDigitNumericSeparator);\n        }\n      }\n\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 46 && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !isOctal) {\n      next = this.input.charCodeAt(++this.state.pos);\n\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n\n      if (this.readInt(10) === null) {\n        this.raise(start, ErrorMessages.InvalidOrMissingExponent);\n      }\n\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === 110) {\n      if (isFloat || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidBigIntLiteral);\n      }\n\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === 109) {\n      this.expectPlugin(\"decimal\", this.state.pos);\n\n      if (hasExponent || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidDecimal);\n      }\n\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(1, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(2, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(0, val);\n  }\n\n  readCodePoint(throwOnInvalid) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === 123) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n      ++this.state.pos;\n\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, ErrorMessages.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n\n    return code;\n  }\n\n  readString(quote) {\n    let out = \"\",\n        chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (ch === 8232 || ch === 8233) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(4, out);\n  }\n\n  readTmplToken() {\n    let out = \"\",\n        chunkStart = this.state.pos,\n        containsInvalid = false;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedTemplate);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n        if (this.state.pos === this.state.start && this.match(28)) {\n          if (ch === 36) {\n            this.state.pos += 2;\n            this.finishToken(31);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(30);\n            return;\n          }\n        }\n\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(28, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n\n        switch (ch) {\n          case 13:\n            if (this.input.charCodeAt(this.state.pos) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n            out += \"\\n\";\n            break;\n\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(pos, message) {\n    if (this.state.strict && !this.state.strictErrors.has(pos)) {\n      this.raise(pos, message);\n    } else {\n      this.state.strictErrors.set(pos, message);\n    }\n  }\n\n  readEscapedChar(inTemplate) {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n\n    switch (ch) {\n      case 110:\n        return \"\\n\";\n\n      case 114:\n        return \"\\r\";\n\n      case 120:\n        {\n          const code = this.readHexChar(2, false, throwOnInvalid);\n          return code === null ? null : String.fromCharCode(code);\n        }\n\n      case 117:\n        {\n          const code = this.readCodePoint(throwOnInvalid);\n          return code === null ? null : String.fromCodePoint(code);\n        }\n\n      case 116:\n        return \"\\t\";\n\n      case 98:\n        return \"\\b\";\n\n      case 118:\n        return \"\\u000b\";\n\n      case 102:\n        return \"\\f\";\n\n      case 13:\n        if (this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n        }\n\n      case 10:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n\n      case 8232:\n      case 8233:\n        return \"\";\n\n      case 56:\n      case 57:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(this.state.pos - 1, ErrorMessages.StrictNumericEscape);\n        }\n\n      default:\n        if (ch >= 48 && ch <= 55) {\n          const codePos = this.state.pos - 1;\n          const match = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/);\n          let octalStr = match[0];\n          let octal = parseInt(octalStr, 8);\n\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n\n          if (octalStr !== \"0\" || next === 56 || next === 57) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(codePos, ErrorMessages.StrictNumericEscape);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  readHexChar(len, forceLen, throwOnInvalid) {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, ErrorMessages.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n\n    return n;\n  }\n\n  readWord1(firstCode) {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(this.state.pos, ErrorMessages.MissingUnicodeEscape);\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, ErrorMessages.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  readWord(firstCode) {\n    const word = this.readWord1(firstCode);\n    const type = keywords$1.get(word) || 5;\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes() {\n    const {\n      type\n    } = this.state;\n\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(this.state.start, ErrorMessages.InvalidEscapedReservedWord, tokenLabelName(type));\n    }\n  }\n\n  updateContext(prevType) {\n    const {\n      context,\n      type\n    } = this.state;\n\n    switch (type) {\n      case 16:\n        context.pop();\n        break;\n\n      case 13:\n      case 15:\n      case 31:\n        context.push(types.brace);\n        break;\n\n      case 30:\n        if (context[context.length - 1] === types.template) {\n          context.pop();\n        } else {\n          context.push(types.template);\n        }\n\n        break;\n    }\n  }\n\n}\n\nclass ClassScope {\n  constructor() {\n    this.privateNames = new Set();\n    this.loneAccessors = new Map();\n    this.undefinedPrivateNames = new Map();\n  }\n\n}\nclass ClassScopeHandler {\n  constructor(raise) {\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n  }\n\n  current() {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n    const current = this.current();\n\n    for (const [name, pos] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(name, elementType, pos) {\n    const classScope = this.current();\n    let redefined = classScope.privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && classScope.loneAccessors.get(name);\n\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n        if (!redefined) classScope.loneAccessors.delete(name);\n      } else if (!redefined) {\n        classScope.loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, ErrorMessages.PrivateNameRedeclaration, name);\n    }\n\n    classScope.privateNames.add(name);\n    classScope.undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name, pos) {\n    let classScope;\n\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n    }\n  }\n\n}\n\nconst kExpression = 0,\n      kMaybeArrowParameterDeclaration = 1,\n      kMaybeAsyncArrowParameterDeclaration = 2,\n      kParameterDeclaration = 3;\n\nclass ExpressionScope {\n  constructor(type = kExpression) {\n    this.type = void 0;\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  constructor(type) {\n    super(type);\n    this.errors = new Map();\n  }\n\n  recordDeclarationError(pos, template) {\n    this.errors.set(pos, template);\n  }\n\n  clearDeclarationError(pos) {\n    this.errors.delete(pos);\n  }\n\n  iterateErrors(iterator) {\n    this.errors.forEach(iterator);\n  }\n\n}\n\nclass ExpressionScopeHandler {\n  constructor(raise) {\n    this.stack = [new ExpressionScope()];\n    this.raise = raise;\n  }\n\n  enter(scope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  recordParameterInitializerError(pos, template) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(pos, template);\n      } else {\n        return;\n      }\n\n      scope = stack[--i];\n    }\n\n    this.raise(pos, template);\n  }\n\n  recordParenthesizedIdentifierError(pos, template) {\n    const {\n      stack\n    } = this;\n    const scope = stack[stack.length - 1];\n\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.raise(pos, template);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(pos, template);\n    } else {\n      return;\n    }\n  }\n\n  recordAsyncArrowParametersError(pos, template) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(pos, template);\n      }\n\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern() {\n    const {\n      stack\n    } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors((template, pos) => {\n      this.raise(pos, template);\n      let i = stack.length - 2;\n      let scope = stack[i];\n\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(pos);\n        scope = stack[--i];\n      }\n    });\n  }\n\n}\nfunction newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\nfunction newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\nfunction newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\nfunction newExpressionScope() {\n  return new ExpressionScope();\n}\n\nconst PARAM = 0b0000,\n      PARAM_YIELD = 0b0001,\n      PARAM_AWAIT = 0b0010,\n      PARAM_RETURN = 0b0100,\n      PARAM_IN = 0b1000;\nclass ProductionParameterHandler {\n  constructor() {\n    this.stacks = [];\n  }\n\n  enter(flags) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags() {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait() {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield() {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn() {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn() {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n\n}\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, val) {\n    if (!node) return;\n    const extra = node.extra = node.extra || {};\n    extra[key] = val;\n  }\n\n  isRelational(op) {\n    return this.match(50) && this.state.value === op;\n  }\n\n  expectRelational(op) {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, 50);\n    }\n  }\n\n  isContextual(name) {\n    return this.match(5) && this.state.value === name && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(isIdentifierChar(nextCh) || (nextCh & 0xfc00) === 0xd800);\n    }\n\n    return false;\n  }\n\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  eatContextual(name) {\n    return this.isContextual(name) && this.eat(5);\n  }\n\n  expectContextual(name, template) {\n    if (!this.eatContextual(name)) this.unexpected(null, template);\n  }\n\n  canInsertSemicolon() {\n    return this.match(7) || this.match(16) || this.hasPrecedingLineBreak();\n  }\n\n  hasPrecedingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n  }\n\n  hasFollowingLineBreak() {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  isLineTerminator() {\n    return this.eat(21) || this.canInsertSemicolon();\n  }\n\n  semicolon(allowAsi = true) {\n    if (allowAsi ? this.isLineTerminator() : this.eat(21)) return;\n    this.raise(this.state.lastTokEnd, ErrorMessages.MissingSemicolon);\n  }\n\n  expect(type, pos) {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  assertNoSpace(message = \"Unexpected space.\") {\n    if (this.state.start > this.state.lastTokEnd) {\n      this.raise(this.state.lastTokEnd, {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedSpace\",\n        template: message\n      });\n    }\n  }\n\n  unexpected(pos, messageOrType = {\n    code: ErrorCodes.SyntaxError,\n    reasonCode: \"UnexpectedToken\",\n    template: \"Unexpected token\"\n  }) {\n    if (isTokenType(messageOrType)) {\n      messageOrType = {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedToken\",\n        template: `Unexpected token, expected \"${tokenLabelName(messageOrType)}\"`\n      };\n    }\n\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n  }\n\n  expectPlugin(name, pos) {\n    if (!this.hasPlugin(name)) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: [name]\n      }, `This experimental syntax requires enabling the parser plugin: '${name}'`);\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names, pos) {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: names\n      }, `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\", \")}'`);\n    }\n  }\n\n  tryParse(fn, oldState = this.state.clone()) {\n    const abortSignal = {\n      node: null\n    };\n\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(refExpressionErrors, andThrow) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssign,\n      doubleProto,\n      optionalParameters\n    } = refExpressionErrors;\n\n    if (!andThrow) {\n      return shorthandAssign >= 0 || doubleProto >= 0 || optionalParameters >= 0;\n    }\n\n    if (shorthandAssign >= 0) {\n      this.unexpected(shorthandAssign);\n    }\n\n    if (doubleProto >= 0) {\n      this.raise(doubleProto, ErrorMessages.DuplicateProto);\n    }\n\n    if (optionalParameters >= 0) {\n      this.unexpected(optionalParameters);\n    }\n  }\n\n  isLiteralPropertyName() {\n    return this.match(5) || tokenIsKeyword(this.state.type) || this.match(4) || this.match(0) || this.match(1) || this.match(2);\n  }\n\n  isPrivateName(node) {\n    return node.type === \"PrivateName\";\n  }\n\n  getPrivateNameSV(node) {\n    return node.id.name;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    return (node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\") && this.isPrivateName(node.property);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node) {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(inModule = this.options.sourceType === \"module\") {\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));\n    return () => {\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n}\nclass ExpressionErrors {\n  constructor() {\n    this.shorthandAssign = -1;\n    this.doubleProto = -1;\n    this.optionalParameters = -1;\n  }\n\n}\n\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser != null && parser.options.ranges) this.range = [pos, 0];\n    if (parser != null && parser.filename) this.loc.filename = parser.filename;\n  }\n\n}\n\nconst NodePrototype = Node.prototype;\n{\n  NodePrototype.__clone = function () {\n    const newNode = new Node();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node) {\n  return cloneIdentifier(node);\n}\n\nfunction cloneIdentifier(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra,\n    name\n  } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n\n  return cloned;\n}\nfunction cloneStringLiteral(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra\n  } = node;\n\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n\n  const cloned = Object.create(NodePrototype);\n  cloned.type = \"StringLiteral\";\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.value = node.value;\n  return cloned;\n}\nclass NodeUtils extends UtilParser {\n  startNode() {\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt(pos, loc) {\n    return new Node(this, pos, loc);\n  }\n\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\n  }\n\n  finishNodeAt(node, type, pos, loc) {\n\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    if (this.options.attachComment) this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node, start, startLoc) {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(node, end = this.state.lastTokEnd, endLoc = this.state.lastTokEndLoc) {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n\n}\n\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nconst FlowErrors = makeErrorTemplates({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  AssignReservedType: \"Cannot overwrite reserved type %0.\",\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName: \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues: \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType: \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied: \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType: \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType: \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType: \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName: \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized: \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized: \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired: \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor: \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst: \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: \"Unexpected reserved type %0.\",\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: \"`declare export %0` is not supported. Use `%1` instead.\",\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\"\n}, ErrorCodes.SyntaxError, \"flow\");\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state) {\n  return (state.type === 5 || tokenIsKeyword(state.type)) && state.value !== \"from\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\nvar flow = (superClass => class extends superClass {\n  constructor(...args) {\n    super(...args);\n    this.flowPragma = undefined;\n  }\n\n  getScopeHandler() {\n    return FlowScopeHandler;\n  }\n\n  shouldParseTypes() {\n    return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n  }\n\n  shouldParseEnums() {\n    return !!this.getPluginOption(\"flow\", \"enums\");\n  }\n\n  finishToken(type, val) {\n    if (type !== 4 && type !== 21 && type !== 34) {\n      if (this.flowPragma === undefined) {\n        this.flowPragma = null;\n      }\n    }\n\n    return super.finishToken(type, val);\n  }\n\n  addComment(comment) {\n    if (this.flowPragma === undefined) {\n      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n\n      if (!matches) ; else if (matches[1] === \"flow\") {\n        this.flowPragma = \"flow\";\n      } else if (matches[1] === \"noflow\") {\n        this.flowPragma = \"noflow\";\n      } else {\n        throw new Error(\"Unexpected flow pragma\");\n      }\n    }\n\n    return super.addComment(comment);\n  }\n\n  flowParseTypeInitialiser(tok) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(tok || 22);\n    const type = this.flowParseType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParsePredicate() {\n    const node = this.startNode();\n    const moduloPos = this.state.start;\n    this.next();\n    this.expectContextual(\"checks\");\n\n    if (this.state.lastTokStart > moduloPos + 1) {\n      this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n    }\n\n    if (this.eat(18)) {\n      node.value = this.parseExpression();\n      this.expect(19);\n      return this.finishNode(node, \"DeclaredPredicate\");\n    } else {\n      return this.finishNode(node, \"InferredPredicate\");\n    }\n  }\n\n  flowParseTypeAndPredicateInitialiser() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(22);\n    let type = null;\n    let predicate = null;\n\n    if (this.match(53)) {\n      this.state.inType = oldInType;\n      predicate = this.flowParsePredicate();\n    } else {\n      type = this.flowParseType();\n      this.state.inType = oldInType;\n\n      if (this.match(53)) {\n        predicate = this.flowParsePredicate();\n      }\n    }\n\n    return [type, predicate];\n  }\n\n  flowParseDeclareClass(node) {\n    this.next();\n    this.flowParseInterfaceish(node, true);\n    return this.finishNode(node, \"DeclareClass\");\n  }\n\n  flowParseDeclareFunction(node) {\n    this.next();\n    const id = node.id = this.parseIdentifier();\n    const typeNode = this.startNode();\n    const typeContainer = this.startNode();\n\n    if (this.isRelational(\"<\")) {\n      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      typeNode.typeParameters = null;\n    }\n\n    this.expect(18);\n    const tmp = this.flowParseFunctionTypeParams();\n    typeNode.params = tmp.params;\n    typeNode.rest = tmp.rest;\n    typeNode.this = tmp._this;\n    this.expect(19);\n    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n    typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n    id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n    this.resetEndLocation(id);\n    this.semicolon();\n    this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.start);\n    return this.finishNode(node, \"DeclareFunction\");\n  }\n\n  flowParseDeclare(node, insideModule) {\n    if (this.match(79)) {\n      return this.flowParseDeclareClass(node);\n    } else if (this.match(67)) {\n      return this.flowParseDeclareFunction(node);\n    } else if (this.match(73)) {\n      return this.flowParseDeclareVariable(node);\n    } else if (this.eatContextual(\"module\")) {\n      if (this.match(24)) {\n        return this.flowParseDeclareModuleExports(node);\n      } else {\n        if (insideModule) {\n          this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n        }\n\n        return this.flowParseDeclareModule(node);\n      }\n    } else if (this.isContextual(\"type\")) {\n      return this.flowParseDeclareTypeAlias(node);\n    } else if (this.isContextual(\"opaque\")) {\n      return this.flowParseDeclareOpaqueType(node);\n    } else if (this.isContextual(\"interface\")) {\n      return this.flowParseDeclareInterface(node);\n    } else if (this.match(81)) {\n      return this.flowParseDeclareExportDeclaration(node, insideModule);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  flowParseDeclareVariable(node) {\n    this.next();\n    node.id = this.flowParseTypeAnnotatableIdentifier(true);\n    this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareVariable\");\n  }\n\n  flowParseDeclareModule(node) {\n    this.scope.enter(SCOPE_OTHER);\n\n    if (this.match(4)) {\n      node.id = this.parseExprAtom();\n    } else {\n      node.id = this.parseIdentifier();\n    }\n\n    const bodyNode = node.body = this.startNode();\n    const body = bodyNode.body = [];\n    this.expect(13);\n\n    while (!this.match(16)) {\n      let bodyNode = this.startNode();\n\n      if (this.match(82)) {\n        this.next();\n\n        if (!this.isContextual(\"type\") && !this.match(86)) {\n          this.raise(this.state.lastTokStart, FlowErrors.InvalidNonTypeImportInDeclareModule);\n        }\n\n        this.parseImport(bodyNode);\n      } else {\n        this.expectContextual(\"declare\", FlowErrors.UnsupportedStatementInDeclareModule);\n        bodyNode = this.flowParseDeclare(bodyNode, true);\n      }\n\n      body.push(bodyNode);\n    }\n\n    this.scope.exit();\n    this.expect(16);\n    this.finishNode(bodyNode, \"BlockStatement\");\n    let kind = null;\n    let hasModuleExport = false;\n    body.forEach(bodyElement => {\n      if (isEsModuleType(bodyElement)) {\n        if (kind === \"CommonJS\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"ES\";\n      } else if (bodyElement.type === \"DeclareModuleExports\") {\n        if (hasModuleExport) {\n          this.raise(bodyElement.start, FlowErrors.DuplicateDeclareModuleExports);\n        }\n\n        if (kind === \"ES\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"CommonJS\";\n        hasModuleExport = true;\n      }\n    });\n    node.kind = kind || \"CommonJS\";\n    return this.finishNode(node, \"DeclareModule\");\n  }\n\n  flowParseDeclareExportDeclaration(node, insideModule) {\n    this.expect(81);\n\n    if (this.eat(64)) {\n      if (this.match(67) || this.match(79)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n      } else {\n        node.declaration = this.flowParseType();\n        this.semicolon();\n      }\n\n      node.default = true;\n      return this.finishNode(node, \"DeclareExportDeclaration\");\n    } else {\n      if (this.match(74) || this.isLet() || (this.isContextual(\"type\") || this.isContextual(\"interface\")) && !insideModule) {\n        const label = this.state.value;\n        const suggestion = exportSuggestions[label];\n        throw this.raise(this.state.start, FlowErrors.UnsupportedDeclareExportKind, label, suggestion);\n      }\n\n      if (this.match(73) || this.match(67) || this.match(79) || this.isContextual(\"opaque\")) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n        node.default = false;\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else if (this.match(54) || this.match(13) || this.isContextual(\"interface\") || this.isContextual(\"type\") || this.isContextual(\"opaque\")) {\n        node = this.parseExport(node);\n\n        if (node.type === \"ExportNamedDeclaration\") {\n          node.type = \"ExportDeclaration\";\n          node.default = false;\n          delete node.exportKind;\n        }\n\n        node.type = \"Declare\" + node.type;\n        return node;\n      }\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParseDeclareModuleExports(node) {\n    this.next();\n    this.expectContextual(\"exports\");\n    node.typeAnnotation = this.flowParseTypeAnnotation();\n    this.semicolon();\n    return this.finishNode(node, \"DeclareModuleExports\");\n  }\n\n  flowParseDeclareTypeAlias(node) {\n    this.next();\n    this.flowParseTypeAlias(node);\n    node.type = \"DeclareTypeAlias\";\n    return node;\n  }\n\n  flowParseDeclareOpaqueType(node) {\n    this.next();\n    this.flowParseOpaqueType(node, true);\n    node.type = \"DeclareOpaqueType\";\n    return node;\n  }\n\n  flowParseDeclareInterface(node) {\n    this.next();\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"DeclareInterface\");\n  }\n\n  flowParseInterfaceish(node, isClass = false) {\n    node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n    this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.extends = [];\n    node.implements = [];\n    node.mixins = [];\n\n    if (this.eat(80)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (!isClass && this.eat(20));\n    }\n\n    if (this.isContextual(\"mixins\")) {\n      this.next();\n\n      do {\n        node.mixins.push(this.flowParseInterfaceExtends());\n      } while (this.eat(20));\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n\n      do {\n        node.implements.push(this.flowParseInterfaceExtends());\n      } while (this.eat(20));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: isClass,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: isClass,\n      allowInexact: false\n    });\n  }\n\n  flowParseInterfaceExtends() {\n    const node = this.startNode();\n    node.id = this.flowParseQualifiedTypeIdentifier();\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    } else {\n      node.typeParameters = null;\n    }\n\n    return this.finishNode(node, \"InterfaceExtends\");\n  }\n\n  flowParseInterface(node) {\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"InterfaceDeclaration\");\n  }\n\n  checkNotUnderscore(word) {\n    if (word === \"_\") {\n      this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n    }\n  }\n\n  checkReservedType(word, startLoc, declaration) {\n    if (!reservedTypes.has(word)) return;\n    this.raise(startLoc, declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, word);\n  }\n\n  flowParseRestrictedIdentifier(liberal, declaration) {\n    this.checkReservedType(this.state.value, this.state.start, declaration);\n    return this.parseIdentifier(liberal);\n  }\n\n  flowParseTypeAlias(node) {\n    node.id = this.flowParseRestrictedIdentifier(false, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.right = this.flowParseTypeInitialiser(35);\n    this.semicolon();\n    return this.finishNode(node, \"TypeAlias\");\n  }\n\n  flowParseOpaqueType(node, declare) {\n    this.expectContextual(\"type\");\n    node.id = this.flowParseRestrictedIdentifier(true, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.supertype = null;\n\n    if (this.match(22)) {\n      node.supertype = this.flowParseTypeInitialiser(22);\n    }\n\n    node.impltype = null;\n\n    if (!declare) {\n      node.impltype = this.flowParseTypeInitialiser(35);\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"OpaqueType\");\n  }\n\n  flowParseTypeParameter(requireDefault = false) {\n    const nodeStart = this.state.start;\n    const node = this.startNode();\n    const variance = this.flowParseVariance();\n    const ident = this.flowParseTypeAnnotatableIdentifier();\n    node.name = ident.name;\n    node.variance = variance;\n    node.bound = ident.typeAnnotation;\n\n    if (this.match(35)) {\n      this.eat(35);\n      node.default = this.flowParseType();\n    } else {\n      if (requireDefault) {\n        this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n      }\n    }\n\n    return this.finishNode(node, \"TypeParameter\");\n  }\n\n  flowParseTypeParameterDeclaration() {\n    const oldInType = this.state.inType;\n    const node = this.startNode();\n    node.params = [];\n    this.state.inType = true;\n\n    if (this.isRelational(\"<\") || this.match(94)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    let defaultRequired = false;\n\n    do {\n      const typeParameter = this.flowParseTypeParameter(defaultRequired);\n      node.params.push(typeParameter);\n\n      if (typeParameter.default) {\n        defaultRequired = true;\n      }\n\n      if (!this.isRelational(\">\")) {\n        this.expect(20);\n      }\n    } while (!this.isRelational(\">\"));\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterDeclaration\");\n  }\n\n  flowParseTypeParameterInstantiation() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    this.state.noAnonFunctionType = false;\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseType());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(20);\n      }\n    }\n\n    this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseTypeParameterInstantiationCallOrNew() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(20);\n      }\n    }\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseInterfaceType() {\n    const node = this.startNode();\n    this.expectContextual(\"interface\");\n    node.extends = [];\n\n    if (this.eat(80)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (this.eat(20));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: false,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: false,\n      allowInexact: false\n    });\n    return this.finishNode(node, \"InterfaceTypeAnnotation\");\n  }\n\n  flowParseObjectPropertyKey() {\n    return this.match(0) || this.match(4) ? this.parseExprAtom() : this.parseIdentifier(true);\n  }\n\n  flowParseObjectTypeIndexer(node, isStatic, variance) {\n    node.static = isStatic;\n\n    if (this.lookahead().type === 22) {\n      node.id = this.flowParseObjectPropertyKey();\n      node.key = this.flowParseTypeInitialiser();\n    } else {\n      node.id = null;\n      node.key = this.flowParseType();\n    }\n\n    this.expect(11);\n    node.value = this.flowParseTypeInitialiser();\n    node.variance = variance;\n    return this.finishNode(node, \"ObjectTypeIndexer\");\n  }\n\n  flowParseObjectTypeInternalSlot(node, isStatic) {\n    node.static = isStatic;\n    node.id = this.flowParseObjectPropertyKey();\n    this.expect(11);\n    this.expect(11);\n\n    if (this.isRelational(\"<\") || this.match(18)) {\n      node.method = true;\n      node.optional = false;\n      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n    } else {\n      node.method = false;\n\n      if (this.eat(25)) {\n        node.optional = true;\n      }\n\n      node.value = this.flowParseTypeInitialiser();\n    }\n\n    return this.finishNode(node, \"ObjectTypeInternalSlot\");\n  }\n\n  flowParseObjectTypeMethodish(node) {\n    node.params = [];\n    node.rest = null;\n    node.typeParameters = null;\n    node.this = null;\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    this.expect(18);\n\n    if (this.match(77)) {\n      node.this = this.flowParseFunctionTypeParam(true);\n      node.this.name = null;\n\n      if (!this.match(19)) {\n        this.expect(20);\n      }\n    }\n\n    while (!this.match(19) && !this.match(29)) {\n      node.params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(19)) {\n        this.expect(20);\n      }\n    }\n\n    if (this.eat(29)) {\n      node.rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    this.expect(19);\n    node.returnType = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"FunctionTypeAnnotation\");\n  }\n\n  flowParseObjectTypeCallProperty(node, isStatic) {\n    const valueNode = this.startNode();\n    node.static = isStatic;\n    node.value = this.flowParseObjectTypeMethodish(valueNode);\n    return this.finishNode(node, \"ObjectTypeCallProperty\");\n  }\n\n  flowParseObjectType({\n    allowStatic,\n    allowExact,\n    allowSpread,\n    allowProto,\n    allowInexact\n  }) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const nodeStart = this.startNode();\n    nodeStart.callProperties = [];\n    nodeStart.properties = [];\n    nodeStart.indexers = [];\n    nodeStart.internalSlots = [];\n    let endDelim;\n    let exact;\n    let inexact = false;\n\n    if (allowExact && this.match(14)) {\n      this.expect(14);\n      endDelim = 17;\n      exact = true;\n    } else {\n      this.expect(13);\n      endDelim = 16;\n      exact = false;\n    }\n\n    nodeStart.exact = exact;\n\n    while (!this.match(endDelim)) {\n      let isStatic = false;\n      let protoStart = null;\n      let inexactStart = null;\n      const node = this.startNode();\n\n      if (allowProto && this.isContextual(\"proto\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== 22 && lookahead.type !== 25) {\n          this.next();\n          protoStart = this.state.start;\n          allowStatic = false;\n        }\n      }\n\n      if (allowStatic && this.isContextual(\"static\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== 22 && lookahead.type !== 25) {\n          this.next();\n          isStatic = true;\n        }\n      }\n\n      const variance = this.flowParseVariance();\n\n      if (this.eat(8)) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (this.eat(8)) {\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n        } else {\n          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n        }\n      } else if (this.match(18) || this.isRelational(\"<\")) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n      } else {\n        let kind = \"init\";\n\n        if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type === 5 || lookahead.type === 4 || lookahead.type === 0) {\n            kind = this.state.value;\n            this.next();\n          }\n        }\n\n        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n\n        if (propOrInexact === null) {\n          inexact = true;\n          inexactStart = this.state.lastTokStart;\n        } else {\n          nodeStart.properties.push(propOrInexact);\n        }\n      }\n\n      this.flowObjectTypeSemicolon();\n\n      if (inexactStart && !this.match(16) && !this.match(17)) {\n        this.raise(inexactStart, FlowErrors.UnexpectedExplicitInexactInObject);\n      }\n    }\n\n    this.expect(endDelim);\n\n    if (allowSpread) {\n      nodeStart.inexact = inexact;\n    }\n\n    const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n    this.state.inType = oldInType;\n    return out;\n  }\n\n  flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {\n    if (this.eat(29)) {\n      const isInexactToken = this.match(20) || this.match(21) || this.match(16) || this.match(17);\n\n      if (isInexactToken) {\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideNonObject);\n        } else if (!allowInexact) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n        }\n\n        if (variance) {\n          this.raise(variance.start, FlowErrors.InexactVariance);\n        }\n\n        return null;\n      }\n\n      if (!allowSpread) {\n        this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n      }\n\n      if (protoStart != null) {\n        this.unexpected(protoStart);\n      }\n\n      if (variance) {\n        this.raise(variance.start, FlowErrors.SpreadVariance);\n      }\n\n      node.argument = this.flowParseType();\n      return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n    } else {\n      node.key = this.flowParseObjectPropertyKey();\n      node.static = isStatic;\n      node.proto = protoStart != null;\n      node.kind = kind;\n      let optional = false;\n\n      if (this.isRelational(\"<\") || this.match(18)) {\n        node.method = true;\n\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n        if (kind === \"get\" || kind === \"set\") {\n          this.flowCheckGetterSetterParams(node);\n        }\n\n        if (!allowSpread && node.key.name === \"constructor\" && node.value.this) {\n          this.raise(node.value.this.start, FlowErrors.ThisParamBannedInConstructor);\n        }\n      } else {\n        if (kind !== \"init\") this.unexpected();\n        node.method = false;\n\n        if (this.eat(25)) {\n          optional = true;\n        }\n\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n      }\n\n      node.optional = optional;\n      return this.finishNode(node, \"ObjectTypeProperty\");\n    }\n  }\n\n  flowCheckGetterSetterParams(property) {\n    const paramCount = property.kind === \"get\" ? 0 : 1;\n    const start = property.start;\n    const length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n    if (property.value.this) {\n      this.raise(property.value.this.start, property.kind === \"get\" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam);\n    }\n\n    if (length !== paramCount) {\n      if (property.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (property.kind === \"set\" && property.value.rest) {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  flowObjectTypeSemicolon() {\n    if (!this.eat(21) && !this.eat(20) && !this.match(16) && !this.match(17)) {\n      this.unexpected();\n    }\n  }\n\n  flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    let node = id || this.flowParseRestrictedIdentifier(true);\n\n    while (this.eat(24)) {\n      const node2 = this.startNodeAt(startPos, startLoc);\n      node2.qualification = node;\n      node2.id = this.flowParseRestrictedIdentifier(true);\n      node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n    }\n\n    return node;\n  }\n\n  flowParseGenericType(startPos, startLoc, id) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.typeParameters = null;\n    node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    return this.finishNode(node, \"GenericTypeAnnotation\");\n  }\n\n  flowParseTypeofType() {\n    const node = this.startNode();\n    this.expect(86);\n    node.argument = this.flowParsePrimaryType();\n    return this.finishNode(node, \"TypeofTypeAnnotation\");\n  }\n\n  flowParseTupleType() {\n    const node = this.startNode();\n    node.types = [];\n    this.expect(8);\n\n    while (this.state.pos < this.length && !this.match(11)) {\n      node.types.push(this.flowParseType());\n      if (this.match(11)) break;\n      this.expect(20);\n    }\n\n    this.expect(11);\n    return this.finishNode(node, \"TupleTypeAnnotation\");\n  }\n\n  flowParseFunctionTypeParam(first) {\n    let name = null;\n    let optional = false;\n    let typeAnnotation = null;\n    const node = this.startNode();\n    const lh = this.lookahead();\n    const isThis = this.state.type === 77;\n\n    if (lh.type === 22 || lh.type === 25) {\n      if (isThis && !first) {\n        this.raise(node.start, FlowErrors.ThisParamMustBeFirst);\n      }\n\n      name = this.parseIdentifier(isThis);\n\n      if (this.eat(25)) {\n        optional = true;\n\n        if (isThis) {\n          this.raise(node.start, FlowErrors.ThisParamMayNotBeOptional);\n        }\n      }\n\n      typeAnnotation = this.flowParseTypeInitialiser();\n    } else {\n      typeAnnotation = this.flowParseType();\n    }\n\n    node.name = name;\n    node.optional = optional;\n    node.typeAnnotation = typeAnnotation;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  reinterpretTypeAsFunctionTypeParam(type) {\n    const node = this.startNodeAt(type.start, type.loc.start);\n    node.name = null;\n    node.optional = false;\n    node.typeAnnotation = type;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  flowParseFunctionTypeParams(params = []) {\n    let rest = null;\n    let _this = null;\n\n    if (this.match(77)) {\n      _this = this.flowParseFunctionTypeParam(true);\n      _this.name = null;\n\n      if (!this.match(19)) {\n        this.expect(20);\n      }\n    }\n\n    while (!this.match(19) && !this.match(29)) {\n      params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(19)) {\n        this.expect(20);\n      }\n    }\n\n    if (this.eat(29)) {\n      rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    return {\n      params,\n      rest,\n      _this\n    };\n  }\n\n  flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n    switch (id.name) {\n      case \"any\":\n        return this.finishNode(node, \"AnyTypeAnnotation\");\n\n      case \"bool\":\n      case \"boolean\":\n        return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n      case \"mixed\":\n        return this.finishNode(node, \"MixedTypeAnnotation\");\n\n      case \"empty\":\n        return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n      case \"number\":\n        return this.finishNode(node, \"NumberTypeAnnotation\");\n\n      case \"string\":\n        return this.finishNode(node, \"StringTypeAnnotation\");\n\n      case \"symbol\":\n        return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n      default:\n        this.checkNotUnderscore(id.name);\n        return this.flowParseGenericType(startPos, startLoc, id);\n    }\n  }\n\n  flowParsePrimaryType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const node = this.startNode();\n    let tmp;\n    let type;\n    let isGroupedType = false;\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n    switch (this.state.type) {\n      case 5:\n        if (this.isContextual(\"interface\")) {\n          return this.flowParseInterfaceType();\n        }\n\n        return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n\n      case 13:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: true\n        });\n\n      case 14:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: true,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: false\n        });\n\n      case 8:\n        this.state.noAnonFunctionType = false;\n        type = this.flowParseTupleType();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        return type;\n\n      case 50:\n        if (this.state.value === \"<\") {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(18);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(19);\n          this.expect(27);\n          node.returnType = this.flowParseType();\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        break;\n\n      case 18:\n        this.next();\n\n        if (!this.match(19) && !this.match(29)) {\n          if (this.match(5) || this.match(77)) {\n            const token = this.lookahead().type;\n            isGroupedType = token !== 25 && token !== 22;\n          } else {\n            isGroupedType = true;\n          }\n        }\n\n        if (isGroupedType) {\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.state.noAnonFunctionType || !(this.match(20) || this.match(19) && this.lookahead().type === 27)) {\n            this.expect(19);\n            return type;\n          } else {\n            this.eat(20);\n          }\n        }\n\n        if (type) {\n          tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n        } else {\n          tmp = this.flowParseFunctionTypeParams();\n        }\n\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        node.this = tmp._this;\n        this.expect(19);\n        this.expect(27);\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n      case 4:\n        return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n      case 84:\n      case 85:\n        node.value = this.match(84);\n        this.next();\n        return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n      case 52:\n        if (this.state.value === \"-\") {\n          this.next();\n\n          if (this.match(0)) {\n            return this.parseLiteralAtNode(-this.state.value, \"NumberLiteralTypeAnnotation\", node);\n          }\n\n          if (this.match(1)) {\n            return this.parseLiteralAtNode(-this.state.value, \"BigIntLiteralTypeAnnotation\", node);\n          }\n\n          throw this.raise(this.state.start, FlowErrors.UnexpectedSubtractionOperand);\n        }\n\n        throw this.unexpected();\n\n      case 0:\n        return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n      case 1:\n        return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n      case 87:\n        this.next();\n        return this.finishNode(node, \"VoidTypeAnnotation\");\n\n      case 83:\n        this.next();\n        return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n      case 77:\n        this.next();\n        return this.finishNode(node, \"ThisTypeAnnotation\");\n\n      case 54:\n        this.next();\n        return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n      case 86:\n        return this.flowParseTypeofType();\n\n      default:\n        if (tokenIsKeyword(this.state.type)) {\n          const label = tokenLabelName(this.state.type);\n          this.next();\n          return super.createIdentifier(node, label);\n        }\n\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParsePostfixType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let type = this.flowParsePrimaryType();\n    let seenOptionalIndexedAccess = false;\n\n    while ((this.match(8) || this.match(26)) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const optional = this.eat(26);\n      seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n      this.expect(8);\n\n      if (!optional && this.match(11)) {\n        node.elementType = type;\n        this.next();\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      } else {\n        node.objectType = type;\n        node.indexType = this.flowParseType();\n        this.expect(11);\n\n        if (seenOptionalIndexedAccess) {\n          node.optional = optional;\n          type = this.finishNode(node, \"OptionalIndexedAccessType\");\n        } else {\n          type = this.finishNode(node, \"IndexedAccessType\");\n        }\n      }\n    }\n\n    return type;\n  }\n\n  flowParsePrefixType() {\n    const node = this.startNode();\n\n    if (this.eat(25)) {\n      node.typeAnnotation = this.flowParsePrefixType();\n      return this.finishNode(node, \"NullableTypeAnnotation\");\n    } else {\n      return this.flowParsePostfixType();\n    }\n  }\n\n  flowParseAnonFunctionWithoutParens() {\n    const param = this.flowParsePrefixType();\n\n    if (!this.state.noAnonFunctionType && this.eat(27)) {\n      const node = this.startNodeAt(param.start, param.loc.start);\n      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n      node.rest = null;\n      node.this = null;\n      node.returnType = this.flowParseType();\n      node.typeParameters = null;\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    return param;\n  }\n\n  flowParseIntersectionType() {\n    const node = this.startNode();\n    this.eat(48);\n    const type = this.flowParseAnonFunctionWithoutParens();\n    node.types = [type];\n\n    while (this.eat(48)) {\n      node.types.push(this.flowParseAnonFunctionWithoutParens());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n  }\n\n  flowParseUnionType() {\n    const node = this.startNode();\n    this.eat(46);\n    const type = this.flowParseIntersectionType();\n    node.types = [type];\n\n    while (this.eat(46)) {\n      node.types.push(this.flowParseIntersectionType());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n  }\n\n  flowParseType() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const type = this.flowParseUnionType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParseTypeOrImplicitInstantiation() {\n    if (this.state.type === 5 && this.state.value === \"_\") {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.parseIdentifier();\n      return this.flowParseGenericType(startPos, startLoc, node);\n    } else {\n      return this.flowParseType();\n    }\n  }\n\n  flowParseTypeAnnotation() {\n    const node = this.startNode();\n    node.typeAnnotation = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"TypeAnnotation\");\n  }\n\n  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n    if (this.match(22)) {\n      ident.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(ident);\n    }\n\n    return ident;\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  flowParseVariance() {\n    let variance = null;\n\n    if (this.match(52)) {\n      variance = this.startNode();\n\n      if (this.state.value === \"+\") {\n        variance.kind = \"plus\";\n      } else {\n        variance.kind = \"minus\";\n      }\n\n      this.next();\n      this.finishNode(variance, \"Variance\");\n    }\n\n    return variance;\n  }\n\n  parseFunctionBody(node, allowExpressionBody, isMethod = false) {\n    if (allowExpressionBody) {\n      return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n    }\n\n    return super.parseFunctionBody(node, false, isMethod);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(22)) {\n      const typeNode = this.startNode();\n      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.state.strict && this.match(5) && this.state.value === \"interface\") {\n      const lookahead = this.lookahead();\n\n      if (lookahead.type === 5 || isKeyword(lookahead.value)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      }\n    } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    const stmt = super.parseStatement(context, topLevel);\n\n    if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n      this.flowPragma = null;\n    }\n\n    return stmt;\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type === \"Identifier\") {\n      if (expr.name === \"declare\") {\n        if (this.match(79) || this.match(5) || this.match(67) || this.match(73) || this.match(81)) {\n          return this.flowParseDeclare(node);\n        }\n      } else if (this.match(5)) {\n        if (expr.name === \"interface\") {\n          return this.flowParseInterface(node);\n        } else if (expr.name === \"type\") {\n          return this.flowParseTypeAlias(node);\n        } else if (expr.name === \"opaque\") {\n          return this.flowParseOpaqueType(node, false);\n        }\n      }\n    }\n\n    return super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    return this.isContextual(\"type\") || this.isContextual(\"interface\") || this.isContextual(\"opaque\") || this.shouldParseEnums() && this.isContextual(\"enum\") || super.shouldParseExportDeclaration();\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(5) && (this.state.value === \"type\" || this.state.value === \"interface\" || this.state.value === \"opaque\" || this.shouldParseEnums() && this.state.value === \"enum\")) {\n      return false;\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseExportDefaultExpression() {\n    if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (!this.match(25)) return expr;\n\n    if (this.state.maybeInArrowParameters) {\n      const nextCh = this.lookaheadCharCode();\n\n      if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {\n        this.setOptionalParametersError(refExpressionErrors);\n        return expr;\n      }\n    }\n\n    this.expect(25);\n    const state = this.state.clone();\n    const originalNoArrowAt = this.state.noArrowAt;\n    const node = this.startNodeAt(startPos, startLoc);\n    let {\n      consequent,\n      failed\n    } = this.tryParseConditionalConsequent();\n    let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n    if (failed || invalid.length > 0) {\n      const noArrowAt = [...originalNoArrowAt];\n\n      if (invalid.length > 0) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt;\n\n        for (let i = 0; i < invalid.length; i++) {\n          noArrowAt.push(invalid[i].start);\n        }\n\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n        [valid, invalid] = this.getArrowLikeExpressions(consequent);\n      }\n\n      if (failed && valid.length > 1) {\n        this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n      }\n\n      if (failed && valid.length === 1) {\n        this.state = state;\n        noArrowAt.push(valid[0].start);\n        this.state.noArrowAt = noArrowAt;\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n      }\n    }\n\n    this.getArrowLikeExpressions(consequent, true);\n    this.state.noArrowAt = originalNoArrowAt;\n    this.expect(22);\n    node.test = expr;\n    node.consequent = consequent;\n    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined));\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n\n  tryParseConditionalConsequent() {\n    this.state.noArrowParamsConversionAt.push(this.state.start);\n    const consequent = this.parseMaybeAssignAllowIn();\n    const failed = !this.match(22);\n    this.state.noArrowParamsConversionAt.pop();\n    return {\n      consequent,\n      failed\n    };\n  }\n\n  getArrowLikeExpressions(node, disallowInvalid) {\n    const stack = [node];\n    const arrows = [];\n\n    while (stack.length !== 0) {\n      const node = stack.pop();\n\n      if (node.type === \"ArrowFunctionExpression\") {\n        if (node.typeParameters || !node.returnType) {\n          this.finishArrowValidation(node);\n        } else {\n          arrows.push(node);\n        }\n\n        stack.push(node.body);\n      } else if (node.type === \"ConditionalExpression\") {\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n      }\n    }\n\n    if (disallowInvalid) {\n      arrows.forEach(node => this.finishArrowValidation(node));\n      return [arrows, []];\n    }\n\n    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n  }\n\n  finishArrowValidation(node) {\n    var _node$extra;\n\n    this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma, false);\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    super.checkParams(node, false, true);\n    this.scope.exit();\n  }\n\n  forwardNoArrowParamsConversionAt(node, parse) {\n    let result;\n\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      result = parse();\n      this.state.noArrowParamsConversionAt.pop();\n    } else {\n      result = parse();\n    }\n\n    return result;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(25)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(22)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n      return;\n    }\n\n    super.assertModuleNodeAllowed(node);\n  }\n\n  parseExport(node) {\n    const decl = super.parseExport(node);\n\n    if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n      decl.exportKind = decl.exportKind || \"value\";\n    }\n\n    return decl;\n  }\n\n  parseExportDeclaration(node) {\n    if (this.isContextual(\"type\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n\n      if (this.match(13)) {\n        node.specifiers = this.parseExportSpecifiers();\n        this.parseExportFrom(node);\n        return null;\n      } else {\n        return this.flowParseTypeAlias(declarationNode);\n      }\n    } else if (this.isContextual(\"opaque\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseOpaqueType(declarationNode, false);\n    } else if (this.isContextual(\"interface\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseInterface(declarationNode);\n    } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      node.exportKind = \"value\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(declarationNode);\n    } else {\n      return super.parseExportDeclaration(node);\n    }\n  }\n\n  eatExportStar(node) {\n    if (super.eatExportStar(...arguments)) return true;\n\n    if (this.isContextual(\"type\") && this.lookahead().type === 54) {\n      node.exportKind = \"type\";\n      this.next();\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    const pos = this.state.start;\n    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n\n    if (hasNamespace && node.exportKind === \"type\") {\n      this.unexpected(pos);\n    }\n\n    return hasNamespace;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    super.parseClassId(node, isStatement, optionalId);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n  }\n\n  parseClassMember(classBody, member, state) {\n    const pos = this.state.start;\n\n    if (this.isContextual(\"declare\")) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      member.declare = true;\n    }\n\n    super.parseClassMember(classBody, member, state);\n\n    if (member.declare) {\n      if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\" && member.type !== \"PropertyDefinition\") {\n        this.raise(pos, FlowErrors.DeclareClassElement);\n      } else if (member.value) {\n        this.raise(member.value.start, FlowErrors.DeclareClassFieldInitializer);\n      }\n    }\n  }\n\n  isIterator(word) {\n    return word === \"iterator\" || word === \"asyncIterator\";\n  }\n\n  readIterator() {\n    const word = super.readWord1();\n    const fullWord = \"@@\" + word;\n\n    if (!this.isIterator(word) || !this.state.inType) {\n      this.raise(this.state.pos, ErrorMessages.InvalidIdentifier, fullWord);\n    }\n\n    this.finishToken(5, fullWord);\n  }\n\n  getTokenFromCode(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 123 && next === 124) {\n      return this.finishOp(14, 2);\n    } else if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(50, 1);\n    } else if (this.state.inType && code === 63) {\n      if (next === 46) {\n        return this.finishOp(26, 2);\n      }\n\n      return this.finishOp(25, 1);\n    } else if (isIteratorStart(code, next)) {\n      this.state.pos += 2;\n      return this.readIterator();\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  isAssignable(node, isBinding) {\n    if (node.type === \"TypeCastExpression\") {\n      return this.isAssignable(node.expression, isBinding);\n    } else {\n      return super.isAssignable(node, isBinding);\n    }\n  }\n\n  toAssignable(node, isLHS = false) {\n    if (node.type === \"TypeCastExpression\") {\n      return super.toAssignable(this.typeCastToParameter(node), isLHS);\n    } else {\n      return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos, isLHS) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n\n    return super.toAssignableList(exprList, trailingCommaPos, isLHS);\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    for (let i = 0; i < exprList.length; i++) {\n      var _expr$extra;\n\n      const expr = exprList[i];\n\n      if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n        this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n      }\n    }\n\n    return exprList;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);\n\n    if (canBePattern && !this.state.maybeInArrowParameters) {\n      this.toReferencedList(node.elements);\n    }\n\n    return node;\n  }\n\n  checkLVal(expr, ...args) {\n    if (expr.type !== \"TypeCastExpression\") {\n      return super.checkLVal(expr, ...args);\n    }\n  }\n\n  parseClassProperty(node) {\n    if (this.match(22)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (this.match(22)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassPrivateProperty(node);\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(22) || super.isClassProperty();\n  }\n\n  isNonstaticConstructor(method) {\n    return !this.match(22) && super.isNonstaticConstructor(method);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n\n    if (method.params && isConstructor) {\n      const params = method.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n      }\n    } else if (method.type === \"MethodDefinition\" && isConstructor && method.value.params) {\n      const params = method.value.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n      }\n    }\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n      const implemented = node.implements = [];\n\n      do {\n        const node = this.startNode();\n        node.id = this.flowParseRestrictedIdentifier(true);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n\n        implemented.push(this.finishNode(node, \"ClassImplements\"));\n      } while (this.eat(20));\n    }\n  }\n\n  checkGetterSetterParams(method) {\n    super.checkGetterSetterParams(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length > 0) {\n      const param = params[0];\n\n      if (this.isThisParam(param) && method.kind === \"get\") {\n        this.raise(param.start, FlowErrors.GetterMayNotHaveThisParam);\n      } else if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.SetterMayNotHaveThisParam);\n      }\n    }\n  }\n\n  parsePropertyName(node, isPrivateNameAllowed) {\n    const variance = this.flowParseVariance();\n    const key = super.parsePropertyName(node, isPrivateNameAllowed);\n    node.variance = variance;\n    return key;\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    if (prop.variance) {\n      this.unexpected(prop.variance.start);\n    }\n\n    delete prop.variance;\n    let typeParameters;\n\n    if (this.isRelational(\"<\") && !isAccessor) {\n      typeParameters = this.flowParseTypeParameterDeclaration();\n      if (!this.match(18)) this.unexpected();\n    }\n\n    super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n\n    if (typeParameters) {\n      (prop.value || prop).typeParameters = typeParameters;\n    }\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(25)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(param.start, FlowErrors.PatternIsOptional);\n      }\n\n      if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.ThisParamMayNotBeOptional);\n      }\n\n      param.optional = true;\n    }\n\n    if (this.match(22)) {\n      param.typeAnnotation = this.flowParseTypeAnnotation();\n    } else if (this.isThisParam(param)) {\n      this.raise(param.start, FlowErrors.ThisParamAnnotationRequired);\n    }\n\n    if (this.match(35) && this.isThisParam(param)) {\n      this.raise(param.start, FlowErrors.ThisParamNoDefault);\n    }\n\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n    }\n\n    return node;\n  }\n\n  shouldParseDefaultImport(node) {\n    if (!hasTypeImportKind(node)) {\n      return super.shouldParseDefaultImport(node);\n    }\n\n    return isMaybeDefaultImport(this.state);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    node.importKind = \"value\";\n    let kind = null;\n\n    if (this.match(86)) {\n      kind = \"typeof\";\n    } else if (this.isContextual(\"type\")) {\n      kind = \"type\";\n    }\n\n    if (kind) {\n      const lh = this.lookahead();\n\n      if (kind === \"type\" && lh.type === 54) {\n        this.unexpected(lh.start);\n      }\n\n      if (isMaybeDefaultImport(lh) || lh.type === 13 || lh.type === 54) {\n        this.next();\n        node.importKind = kind;\n      }\n    }\n\n    return super.maybeParseDefaultImportSpecifier(node);\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    const firstIdentIsString = this.match(4);\n    const firstIdent = this.parseModuleExportName();\n    let specifierTypeKind = null;\n\n    if (firstIdent.type === \"Identifier\") {\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n    }\n\n    let isBinding = false;\n\n    if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n      const as_ident = this.parseIdentifier(true);\n\n      if (specifierTypeKind !== null && !this.match(5) && !tokenIsKeyword(this.state.type)) {\n        specifier.imported = as_ident;\n        specifier.importKind = specifierTypeKind;\n        specifier.local = cloneIdentifier(as_ident);\n      } else {\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = this.parseIdentifier();\n      }\n    } else {\n      if (specifierTypeKind !== null && (this.match(5) || tokenIsKeyword(this.state.type))) {\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n      } else {\n        if (firstIdentIsString) {\n          throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, firstIdent.value);\n        }\n\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n      }\n\n      if (this.eatContextual(\"as\")) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        isBinding = true;\n        specifier.local = cloneIdentifier(specifier.imported);\n      }\n    }\n\n    const nodeIsTypeImport = hasTypeImportKind(node);\n    const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n    if (nodeIsTypeImport && specifierIsTypeImport) {\n      this.raise(specifier.start, FlowErrors.ImportTypeShorthandOnlyInPureImport);\n    }\n\n    if (nodeIsTypeImport || specifierIsTypeImport) {\n      this.checkReservedType(specifier.local.name, specifier.local.start, true);\n    }\n\n    if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n      this.checkReservedWord(specifier.local.name, specifier.start, true, true);\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 77:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const kind = node.kind;\n\n    if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (this.match(22)) {\n      decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(22)) {\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = true;\n      node.returnType = this.flowParseTypeAnnotation();\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(22) || super.shouldParseAsyncArrow();\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    var _jsx;\n\n    let state = null;\n    let jsx;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(94) || this.isRelational(\"<\"))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n      const curContext = context[context.length - 1];\n\n      if (curContext === types.j_oTag) {\n        context.length -= 2;\n      } else if (curContext === types.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if ((_jsx = jsx) != null && _jsx.error || this.isRelational(\"<\")) {\n      var _jsx2, _jsx3;\n\n      state = state || this.state.clone();\n      let typeParameters;\n      const arrow = this.tryParse(abort => {\n        var _arrowExpression$extr;\n\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {\n          const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n          this.resetStartLocationFromNode(result, typeParameters);\n          return result;\n        });\n        if ((_arrowExpression$extr = arrowExpression.extra) != null && _arrowExpression$extr.parenthesized) abort();\n        const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n        if (expr.type !== \"ArrowFunctionExpression\") abort();\n        expr.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(expr, typeParameters);\n        return arrowExpression;\n      }, state);\n      let arrowExpression = null;\n\n      if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\n        if (!arrow.error && !arrow.aborted) {\n          if (arrow.node.async) {\n            this.raise(typeParameters.start, FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction);\n          }\n\n          return arrow.node;\n        }\n\n        arrowExpression = arrow.node;\n      }\n\n      if ((_jsx2 = jsx) != null && _jsx2.node) {\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrowExpression) {\n        this.state = arrow.failState;\n        return arrowExpression;\n      }\n\n      if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      throw this.raise(typeParameters.start, FlowErrors.UnexpectedTokenAfterTypeParameter);\n    }\n\n    return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n  }\n\n  parseArrow(node) {\n    if (this.match(22)) {\n      const result = this.tryParse(() => {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        if (this.canInsertSemicolon()) this.unexpected();\n        if (!this.match(27)) this.unexpected();\n        return typeNode;\n      });\n      if (result.thrown) return null;\n      if (result.error) this.state = result.failState;\n      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n    }\n\n    return super.parseArrow(node);\n  }\n\n  shouldParseArrow(params) {\n    return this.match(22) || super.shouldParseArrow(params);\n  }\n\n  setArrowFunctionParameters(node, params) {\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      node.params = params;\n    } else {\n      super.setArrowFunctionParameters(node, params);\n    }\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction) {\n    if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      return;\n    }\n\n    for (let i = 0; i < node.params.length; i++) {\n      if (this.isThisParam(node.params[i]) && i > 0) {\n        this.raise(node.params[i].start, FlowErrors.ThisParamMustBeFirst);\n      }\n    }\n\n    return super.checkParams(...arguments);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.arguments = this.parseCallExpressionArguments(19, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (base.type === \"Identifier\" && base.name === \"async\" && this.isRelational(\"<\")) {\n      const state = this.state.clone();\n      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n      const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);\n      if (result.node && !result.error) return result.node;\n\n      if (arrow.node) {\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (result.node) {\n        this.state = result.failState;\n        return result.node;\n      }\n\n      throw arrow.error || result.error;\n    }\n\n    return super.parseSubscripts(base, startPos, startLoc, noCalls);\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n    if (this.match(26) && this.isLookaheadToken_lt()) {\n      subscriptState.optionalChainMember = true;\n\n      if (noCalls) {\n        subscriptState.stop = true;\n        return base;\n      }\n\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.typeArguments = this.flowParseTypeParameterInstantiation();\n      this.expect(18);\n      node.arguments = this.parseCallExpressionArguments(19, false);\n      node.optional = true;\n      return this.finishCallExpression(node, true);\n    } else if (!noCalls && this.shouldParseTypes() && this.isRelational(\"<\")) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      const result = this.tryParse(() => {\n        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n        this.expect(18);\n        node.arguments = this.parseCallExpressionArguments(19, false);\n        if (subscriptState.optionalChainMember) node.optional = false;\n        return this.finishCallExpression(node, subscriptState.optionalChainMember);\n      });\n\n      if (result.node) {\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);\n  }\n\n  parseNewArguments(node) {\n    let targs = null;\n\n    if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n    }\n\n    node.typeArguments = targs;\n    super.parseNewArguments(node);\n  }\n\n  parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.parseFunctionParams(node);\n    if (!this.parseArrow(node)) return;\n    return this.parseArrowExpression(node, undefined, true);\n  }\n\n  readToken_mult_modulo(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 47 && this.state.hasFlowComment) {\n      this.state.hasFlowComment = false;\n      this.state.pos += 2;\n      this.nextToken();\n      return;\n    }\n\n    super.readToken_mult_modulo(code);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 124 && next === 125) {\n      this.finishOp(17, 2);\n      return;\n    }\n\n    super.readToken_pipe_amp(code);\n  }\n\n  parseTopLevel(file, program) {\n    const fileNode = super.parseTopLevel(file, program);\n\n    if (this.state.hasFlowComment) {\n      this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n    }\n\n    return fileNode;\n  }\n\n  skipBlockComment() {\n    if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n      if (this.state.hasFlowComment) {\n        this.unexpected(null, FlowErrors.NestedFlowComment);\n      }\n\n      this.hasFlowCommentCompletion();\n      this.state.pos += this.skipFlowComment();\n      this.state.hasFlowComment = true;\n      return;\n    }\n\n    if (this.state.hasFlowComment) {\n      const end = this.input.indexOf(\"*-/\", this.state.pos += 2);\n\n      if (end === -1) {\n        throw this.raise(this.state.pos - 2, ErrorMessages.UnterminatedComment);\n      }\n\n      this.state.pos = end + 3;\n      return;\n    }\n\n    return super.skipBlockComment();\n  }\n\n  skipFlowComment() {\n    const {\n      pos\n    } = this.state;\n    let shiftToFirstNonWhiteSpace = 2;\n\n    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n      shiftToFirstNonWhiteSpace++;\n    }\n\n    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n    if (ch2 === 58 && ch3 === 58) {\n      return shiftToFirstNonWhiteSpace + 2;\n    }\n\n    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n      return shiftToFirstNonWhiteSpace + 12;\n    }\n\n    if (ch2 === 58 && ch3 !== 58) {\n      return shiftToFirstNonWhiteSpace;\n    }\n\n    return false;\n  }\n\n  hasFlowCommentCompletion() {\n    const end = this.input.indexOf(\"*/\", this.state.pos);\n\n    if (end === -1) {\n      throw this.raise(this.state.pos, ErrorMessages.UnterminatedComment);\n    }\n  }\n\n  flowEnumErrorBooleanMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumBooleanMemberNotInitialized, memberName, enumName);\n  }\n\n  flowEnumErrorInvalidMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n    this.raise(pos, FlowErrors.EnumInvalidMemberName, memberName, suggestion, enumName);\n  }\n\n  flowEnumErrorDuplicateMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n  }\n\n  flowEnumErrorInconsistentMemberValues(pos, {\n    enumName\n  }) {\n    this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n  }\n\n  flowEnumErrorInvalidExplicitType(pos, {\n    enumName,\n    suppliedType\n  }) {\n    return this.raise(pos, suppliedType === null ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors.EnumInvalidExplicitType, enumName, suppliedType);\n  }\n\n  flowEnumErrorInvalidMemberInitializer(pos, {\n    enumName,\n    explicitType,\n    memberName\n  }) {\n    let message = null;\n\n    switch (explicitType) {\n      case \"boolean\":\n      case \"number\":\n      case \"string\":\n        message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n        break;\n\n      case \"symbol\":\n        message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n        break;\n\n      default:\n        message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n    }\n\n    return this.raise(pos, message, enumName, memberName, explicitType);\n  }\n\n  flowEnumErrorNumberMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumNumberMemberNotInitialized, enumName, memberName);\n  }\n\n  flowEnumErrorStringMemberInconsistentlyInitailized(pos, {\n    enumName\n  }) {\n    this.raise(pos, FlowErrors.EnumStringMemberInconsistentlyInitailized, enumName);\n  }\n\n  flowEnumMemberInit() {\n    const startPos = this.state.start;\n\n    const endOfInit = () => this.match(20) || this.match(16);\n\n    switch (this.state.type) {\n      case 0:\n        {\n          const literal = this.parseNumericLiteral(this.state.value);\n\n          if (endOfInit()) {\n            return {\n              type: \"number\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case 4:\n        {\n          const literal = this.parseStringLiteral(this.state.value);\n\n          if (endOfInit()) {\n            return {\n              type: \"string\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case 84:\n      case 85:\n        {\n          const literal = this.parseBooleanLiteral(this.match(84));\n\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      default:\n        return {\n          type: \"invalid\",\n          pos: startPos\n        };\n    }\n  }\n\n  flowEnumMemberRaw() {\n    const pos = this.state.start;\n    const id = this.parseIdentifier(true);\n    const init = this.eat(35) ? this.flowEnumMemberInit() : {\n      type: \"none\",\n      pos\n    };\n    return {\n      id,\n      init\n    };\n  }\n\n  flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {\n    const {\n      explicitType\n    } = context;\n\n    if (explicitType === null) {\n      return;\n    }\n\n    if (explicitType !== expectedType) {\n      this.flowEnumErrorInvalidMemberInitializer(pos, context);\n    }\n  }\n\n  flowEnumMembers({\n    enumName,\n    explicitType\n  }) {\n    const seenNames = new Set();\n    const members = {\n      booleanMembers: [],\n      numberMembers: [],\n      stringMembers: [],\n      defaultedMembers: []\n    };\n    let hasUnknownMembers = false;\n\n    while (!this.match(16)) {\n      if (this.eat(29)) {\n        hasUnknownMembers = true;\n        break;\n      }\n\n      const memberNode = this.startNode();\n      const {\n        id,\n        init\n      } = this.flowEnumMemberRaw();\n      const memberName = id.name;\n\n      if (memberName === \"\") {\n        continue;\n      }\n\n      if (/^[a-z]/.test(memberName)) {\n        this.flowEnumErrorInvalidMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      if (seenNames.has(memberName)) {\n        this.flowEnumErrorDuplicateMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      seenNames.add(memberName);\n      const context = {\n        enumName,\n        explicitType,\n        memberName\n      };\n      memberNode.id = id;\n\n      switch (init.type) {\n        case \"boolean\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"boolean\");\n            memberNode.init = init.value;\n            members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n            break;\n          }\n\n        case \"number\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n            break;\n          }\n\n        case \"string\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n            break;\n          }\n\n        case \"invalid\":\n          {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n          }\n\n        case \"none\":\n          {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(init.pos, context);\n                break;\n\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                break;\n\n              default:\n                members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n            }\n          }\n      }\n\n      if (!this.match(16)) {\n        this.expect(20);\n      }\n    }\n\n    return {\n      members,\n      hasUnknownMembers\n    };\n  }\n\n  flowEnumStringMembers(initializedMembers, defaultedMembers, {\n    enumName\n  }) {\n    if (initializedMembers.length === 0) {\n      return defaultedMembers;\n    } else if (defaultedMembers.length === 0) {\n      return initializedMembers;\n    } else if (defaultedMembers.length > initializedMembers.length) {\n      for (const member of initializedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return defaultedMembers;\n    } else {\n      for (const member of defaultedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return initializedMembers;\n    }\n  }\n\n  flowEnumParseExplicitType({\n    enumName\n  }) {\n    if (this.eatContextual(\"of\")) {\n      if (!this.match(5)) {\n        throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: null\n        });\n      }\n\n      const {\n        value\n      } = this.state;\n      this.next();\n\n      if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n        this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: value\n        });\n      }\n\n      return value;\n    }\n\n    return null;\n  }\n\n  flowEnumBody(node, {\n    enumName,\n    nameLoc\n  }) {\n    const explicitType = this.flowEnumParseExplicitType({\n      enumName\n    });\n    this.expect(13);\n    const {\n      members,\n      hasUnknownMembers\n    } = this.flowEnumMembers({\n      enumName,\n      explicitType\n    });\n    node.hasUnknownMembers = hasUnknownMembers;\n\n    switch (explicitType) {\n      case \"boolean\":\n        node.explicitType = true;\n        node.members = members.booleanMembers;\n        this.expect(16);\n        return this.finishNode(node, \"EnumBooleanBody\");\n\n      case \"number\":\n        node.explicitType = true;\n        node.members = members.numberMembers;\n        this.expect(16);\n        return this.finishNode(node, \"EnumNumberBody\");\n\n      case \"string\":\n        node.explicitType = true;\n        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n          enumName\n        });\n        this.expect(16);\n        return this.finishNode(node, \"EnumStringBody\");\n\n      case \"symbol\":\n        node.members = members.defaultedMembers;\n        this.expect(16);\n        return this.finishNode(node, \"EnumSymbolBody\");\n\n      default:\n        {\n          const empty = () => {\n            node.members = [];\n            this.expect(16);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n\n          node.explicitType = false;\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName\n            });\n            this.expect(16);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.booleanMembers;\n            this.expect(16);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.numberMembers;\n            this.expect(16);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, {\n              enumName\n            });\n            return empty();\n          }\n        }\n    }\n  }\n\n  flowParseEnumDeclaration(node) {\n    const id = this.parseIdentifier();\n    node.id = id;\n    node.body = this.flowEnumBody(this.startNode(), {\n      enumName: id.name,\n      nameLoc: id.start\n    });\n    return this.finishNode(node, \"EnumDeclaration\");\n  }\n\n  isLookaheadToken_lt() {\n    const next = this.nextTokenStart();\n\n    if (this.input.charCodeAt(next) === 60) {\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== 60 && afterNext !== 61;\n    }\n\n    return false;\n  }\n\n  maybeUnwrapTypeCastExpression(node) {\n    return node.type === \"TypeCastExpression\" ? node.expression : node;\n  }\n\n});\n\nconst entities = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\nconst JsxErrors = makeErrorTemplates({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>.\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression: \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n}, ErrorCodes.SyntaxError, \"jsx\");\ntypes.j_oTag = new TokContext(\"<tag\");\ntypes.j_cTag = new TokContext(\"</tag\");\ntypes.j_expr = new TokContext(\"<tag>...</tag>\", true);\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = (superClass => class extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.exprAllowed) {\n              ++this.state.pos;\n              return this.finishToken(94);\n            }\n\n            return super.getTokenFromCode(ch);\n          }\n\n          out += this.input.slice(chunkStart, this.state.pos);\n          return this.finishToken(93, out);\n\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n\n        case 62:\n        case 125:\n\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n\n      }\n    }\n  }\n\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    return this.finishToken(4, out);\n  }\n\n  jsxReadEntity() {\n    let str = \"\";\n    let count = 0;\n    let entity;\n    let ch = this.input[this.state.pos];\n    const startPos = ++this.state.pos;\n\n    while (this.state.pos < this.length && count++ < 10) {\n      ch = this.input[this.state.pos++];\n\n      if (ch === \";\") {\n        if (str[0] === \"#\") {\n          if (str[1] === \"x\") {\n            str = str.substr(2);\n\n            if (HEX_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 16));\n            }\n          } else {\n            str = str.substr(1);\n\n            if (DECIMAL_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 10));\n            }\n          }\n        } else {\n          entity = entities[str];\n        }\n\n        break;\n      }\n\n      str += ch;\n    }\n\n    if (!entity) {\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    return entity;\n  }\n\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n\n    return this.finishToken(92, this.input.slice(start, this.state.pos));\n  }\n\n  jsxParseIdentifier() {\n    const node = this.startNode();\n\n    if (this.match(92)) {\n      node.name = this.state.value;\n    } else if (tokenIsKeyword(this.state.type)) {\n      node.name = tokenLabelName(this.state.type);\n    } else {\n      this.unexpected();\n    }\n\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n\n  jsxParseNamespacedName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(22)) return name;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n\n  jsxParseElementName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n\n    if (node.type === \"JSXNamespacedName\") {\n      return node;\n    }\n\n    while (this.eat(24)) {\n      const newNode = this.startNodeAt(startPos, startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n\n    return node;\n  }\n\n  jsxParseAttributeValue() {\n    let node;\n\n    switch (this.state.type) {\n      case 13:\n        node = this.startNode();\n        this.next();\n        node = this.jsxParseExpressionContainer(node);\n\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          this.raise(node.start, JsxErrors.AttributeIsEmpty);\n        }\n\n        return node;\n\n      case 94:\n      case 4:\n        return this.parseExprAtom();\n\n      default:\n        throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n    }\n  }\n\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n  }\n\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.expect(16);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n\n  jsxParseExpressionContainer(node) {\n    if (this.match(16)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      const expression = this.parseExpression();\n      node.expression = expression;\n    }\n\n    this.expect(16);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n\n  jsxParseAttribute() {\n    const node = this.startNode();\n\n    if (this.eat(13)) {\n      this.expect(29);\n      node.argument = this.parseMaybeAssignAllowIn();\n      this.expect(16);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(35) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n\n  jsxParseOpeningElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(95)) {\n      this.expect(95);\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n\n    while (!this.match(55) && !this.match(95)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n\n    node.attributes = attributes;\n    node.selfClosing = this.eat(55);\n    this.expect(95);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n\n  jsxParseClosingElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(95)) {\n      this.expect(95);\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    this.expect(95);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n\n  jsxParseElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n    let closingElement = null;\n\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case 94:\n            startPos = this.state.start;\n            startLoc = this.state.startLoc;\n            this.next();\n\n            if (this.eat(55)) {\n              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n\n            children.push(this.jsxParseElementAt(startPos, startLoc));\n            break;\n\n          case 93:\n            children.push(this.parseExprAtom());\n            break;\n\n          case 13:\n            {\n              const node = this.startNode();\n              this.next();\n\n              if (this.match(29)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      if (isFragment(openingElement) && !isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagFragment);\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n        }\n      }\n    }\n\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n\n    node.children = children;\n\n    if (this.isRelational(\"<\")) {\n      throw this.raise(this.state.start, JsxErrors.UnwrappedAdjacentJSXElements);\n    }\n\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n\n  jsxParseElement() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startPos, startLoc);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.match(93)) {\n      return this.parseLiteral(this.state.value, \"JSXText\");\n    } else if (this.match(94)) {\n      return this.jsxParseElement();\n    } else if (this.isRelational(\"<\") && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.finishToken(94);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  createLookaheadState(state) {\n    const lookaheadState = super.createLookaheadState(state);\n    lookaheadState.inPropertyName = state.inPropertyName;\n    return lookaheadState;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inPropertyName) return super.getTokenFromCode(code);\n    const context = this.curContext();\n\n    if (context === types.j_expr) {\n      return this.jsxReadToken();\n    }\n\n    if (context === types.j_oTag || context === types.j_cTag) {\n      if (isIdentifierStart(code)) {\n        return this.jsxReadWord();\n      }\n\n      if (code === 62) {\n        ++this.state.pos;\n        return this.finishToken(95);\n      }\n\n      if ((code === 34 || code === 39) && context === types.j_oTag) {\n        return this.jsxReadString(code);\n      }\n    }\n\n    if (code === 60 && this.state.exprAllowed && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      return this.finishToken(94);\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  updateContext(prevType) {\n    super.updateContext(prevType);\n    const {\n      context,\n      type\n    } = this.state;\n\n    if (type === 55 && prevType === 94) {\n      context.splice(-2, 2, types.j_cTag);\n      this.state.exprAllowed = false;\n    } else if (type === 94) {\n      context.push(types.j_expr, types.j_oTag);\n    } else if (type === 95) {\n      const out = context.pop();\n\n      if (out === types.j_oTag && prevType === 55 || out === types.j_cTag) {\n        context.pop();\n        this.state.exprAllowed = context[context.length - 1] === types.j_expr;\n      } else {\n        this.state.exprAllowed = true;\n      }\n    } else if (tokenIsKeyword(type) && (prevType === 24 || prevType === 26)) {\n      this.state.exprAllowed = false;\n    } else {\n      this.state.exprAllowed = tokenComesBeforeExpression(type);\n    }\n  }\n\n});\n\nclass TypeScriptScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.types = new Set();\n    this.enums = new Set();\n    this.constEnums = new Set();\n    this.classes = new Set();\n    this.exportOnlyBindings = new Set();\n  }\n\n}\n\nclass TypeScriptScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n\n      scope.types.add(name);\n    }\n\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n\n      return true;\n    }\n\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        return false;\n      }\n    }\n\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id) {\n    const topLevelScope = this.scopeStack[0];\n    const {\n      name\n    } = id;\n\n    if (!topLevelScope.types.has(name) && !topLevelScope.exportOnlyBindings.has(name)) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nconst TSErrors = makeErrorTemplates({\n  AbstractMethodHasImplementation: \"Method '%0' cannot have an implementation because it is marked abstract.\",\n  AbstractPropertyHasInitializer: \"Property '%0' cannot have an initializer because it is marked abstract.\",\n  AccesorCannotDeclareThisParameter: \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstructorHasTypeParameters: \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: \"'declare' is not allowed in %0ters.\",\n  DeclareClassFieldHasInitializer: \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation: \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier: \"Accessibility modifier already seen.\",\n  DuplicateModifier: \"Duplicate modifier: '%0'.\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare: \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  IncompatibleModifiers: \"'%0' modifier cannot be used with '%1' modifier.\",\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: \"Index signatures cannot have an accessibility modifier ('%0').\",\n  IndexSignatureHasDeclare: \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride: \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier.\",\n  InvalidModifierOnTypeMember: \"'%0' modifier cannot appear on a type member.\",\n  InvalidModifiersOrder: \"'%0' modifier must precede '%1' modifier.\",\n  InvalidTupleMemberLabel: \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName: \"'interface' declarations must be followed by an identifier.\",\n  MixedLabeledAndUnlabeledElements: \"Tuple members must all have names or all not have names.\",\n  NonAbstractClassHasAbstractMethod: \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer: \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass: \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: \"Private elements cannot have an accessibility modifier ('%0').\",\n  ReadonlyForMethodSignature: \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  SetAccesorCannotHaveOptionalParameter: \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter: \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType: \"A 'set' accessor cannot have a return type annotation.\",\n  StaticBlockCannotHaveModifier: \"Static class blocks cannot have any modifier.\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed: \"A type-only import can specify a default import or named bindings, but not both.\",\n  UnexpectedParameterModifier: \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0.\"\n}, ErrorCodes.SyntaxError, \"typescript\");\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier) {\n  return modifier === \"private\" || modifier === \"public\" || modifier === \"protected\";\n}\n\nvar typescript = (superClass => class extends superClass {\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n\n  tsIsIdentifier() {\n    return this.match(5);\n  }\n\n  tsTokenCanFollowModifier() {\n    return (this.match(8) || this.match(13) || this.match(54) || this.match(29) || this.match(6) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();\n  }\n\n  tsNextTokenCanFollowModifier() {\n    this.next();\n    return this.tsTokenCanFollowModifier();\n  }\n\n  tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {\n    if (!this.match(5)) {\n      return undefined;\n    }\n\n    const modifier = this.state.value;\n\n    if (allowedModifiers.indexOf(modifier) !== -1) {\n      if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n        return undefined;\n      }\n\n      if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n        return modifier;\n      }\n    }\n\n    return undefined;\n  }\n\n  tsParseModifiers(modified, allowedModifiers, disallowedModifiers, errorTemplate, stopOnStartOfClassStaticBlock) {\n    const enforceOrder = (pos, modifier, before, after) => {\n      if (modifier === before && modified[after]) {\n        this.raise(pos, TSErrors.InvalidModifiersOrder, before, after);\n      }\n    };\n\n    const incompatible = (pos, modifier, mod1, mod2) => {\n      if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {\n        this.raise(pos, TSErrors.IncompatibleModifiers, mod1, mod2);\n      }\n    };\n\n    for (;;) {\n      const startPos = this.state.start;\n      const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);\n      if (!modifier) break;\n\n      if (tsIsAccessModifier(modifier)) {\n        if (modified.accessibility) {\n          this.raise(startPos, TSErrors.DuplicateAccessibilityModifier);\n        } else {\n          enforceOrder(startPos, modifier, modifier, \"override\");\n          enforceOrder(startPos, modifier, modifier, \"static\");\n          enforceOrder(startPos, modifier, modifier, \"readonly\");\n          modified.accessibility = modifier;\n        }\n      } else {\n        if (Object.hasOwnProperty.call(modified, modifier)) {\n          this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n        } else {\n          enforceOrder(startPos, modifier, \"static\", \"readonly\");\n          enforceOrder(startPos, modifier, \"static\", \"override\");\n          enforceOrder(startPos, modifier, \"override\", \"readonly\");\n          enforceOrder(startPos, modifier, \"abstract\", \"override\");\n          incompatible(startPos, modifier, \"declare\", \"override\");\n          incompatible(startPos, modifier, \"static\", \"abstract\");\n        }\n\n        modified[modifier] = true;\n      }\n\n      if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {\n        this.raise(startPos, errorTemplate, modifier);\n      }\n    }\n  }\n\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(16);\n\n      case \"HeritageClauseElement\":\n        return this.match(13);\n\n      case \"TupleElementTypes\":\n        return this.match(11);\n\n      case \"TypeParametersOrArguments\":\n        return this.isRelational(\">\");\n    }\n\n    throw new Error(\"Unreachable\");\n  }\n\n  tsParseList(kind, parseElement) {\n    const result = [];\n\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n\n    return result;\n  }\n\n  tsParseDelimitedList(kind, parseElement) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true));\n  }\n\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess) {\n    const result = [];\n\n    for (;;) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      const element = parseElement();\n\n      if (element == null) {\n        return undefined;\n      }\n\n      result.push(element);\n\n      if (this.eat(20)) {\n        continue;\n      }\n\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      if (expectSuccess) {\n        this.expect(20);\n      }\n\n      return undefined;\n    }\n\n    return result;\n  }\n\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(8);\n      } else {\n        this.expectRelational(\"<\");\n      }\n    }\n\n    const result = this.tsParseDelimitedList(kind, parseElement);\n\n    if (bracket) {\n      this.expect(11);\n    } else {\n      this.expectRelational(\">\");\n    }\n\n    return result;\n  }\n\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(82);\n    this.expect(18);\n\n    if (!this.match(4)) {\n      this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n    }\n\n    node.argument = this.parseExprAtom();\n    this.expect(19);\n\n    if (this.eat(24)) {\n      node.qualifier = this.tsParseEntityName(true);\n    }\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSImportType\");\n  }\n\n  tsParseEntityName(allowReservedWords) {\n    let entity = this.parseIdentifier();\n\n    while (this.eat(24)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n\n    return entity;\n  }\n\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName(false);\n\n    if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    node.asserts = false;\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(86);\n\n    if (this.match(82)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName(true);\n    }\n\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n\n  tsParseTypeParameter() {\n    const node = this.startNode();\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsEatThenParseType(80);\n    node.default = this.tsEatThenParseType(35);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsTryParseTypeParameters() {\n    if (this.isRelational(\"<\")) {\n      return this.tsParseTypeParameters();\n    }\n  }\n\n  tsParseTypeParameters() {\n    const node = this.startNode();\n\n    if (this.isRelational(\"<\") || this.match(94)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true);\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeParameters);\n    }\n\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n\n  tsTryNextParseConstantContext() {\n    if (this.lookahead().type === 74) {\n      this.next();\n      return this.tsParseTypeReference();\n    }\n\n    return null;\n  }\n\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === 27;\n    signature.typeParameters = this.tsTryParseTypeParameters();\n    this.expect(18);\n    signature.parameters = this.tsParseBindingListForSignature();\n\n    if (returnTokenRequired) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n\n  tsParseBindingListForSignature() {\n    return this.parseBindingList(19, 41).map(pattern => {\n      if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n        this.raise(pattern.start, TSErrors.UnsupportedSignatureParameterKind, pattern.type);\n      }\n\n      return pattern;\n    });\n  }\n\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(20) && !this.isLineTerminator()) {\n      this.expect(21);\n    }\n  }\n\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(22, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n    return this.eat(5) && this.match(22);\n  }\n\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(8) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return undefined;\n    }\n\n    this.expect(8);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(11);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(25)) node.optional = true;\n    const nodeAny = node;\n\n    if (this.match(18) || this.isRelational(\"<\")) {\n      if (readonly) {\n        this.raise(node.start, TSErrors.ReadonlyForMethodSignature);\n      }\n\n      const method = nodeAny;\n\n      if (method.kind && this.isRelational(\"<\")) {\n        this.raise(this.state.pos, TSErrors.AccesorCannotHaveTypeParameters);\n      }\n\n      this.tsFillSignature(22, method);\n      this.tsParseTypeMemberSemicolon();\n\n      if (method.kind === \"get\") {\n        if (method.parameters.length > 0) {\n          this.raise(this.state.pos, ErrorMessages.BadGetterArity);\n\n          if (this.isThisParam(method.parameters[0])) {\n            this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);\n          }\n        }\n      } else if (method.kind === \"set\") {\n        if (method.parameters.length !== 1) {\n          this.raise(this.state.pos, ErrorMessages.BadSetterArity);\n        } else {\n          const firstParameter = method.parameters[0];\n\n          if (this.isThisParam(firstParameter)) {\n            this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);\n          }\n\n          if (firstParameter.type === \"Identifier\" && firstParameter.optional) {\n            this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveOptionalParameter);\n          }\n\n          if (firstParameter.type === \"RestElement\") {\n            this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveRestParameter);\n          }\n        }\n\n        if (method.typeAnnotation) {\n          this.raise(method.typeAnnotation.start, TSErrors.SetAccesorCannotHaveReturnType);\n        }\n      } else {\n        method.kind = \"method\";\n      }\n\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n\n  tsParseTypeMember() {\n    const node = this.startNode();\n\n    if (this.match(18) || this.isRelational(\"<\")) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n    }\n\n    if (this.match(76)) {\n      const id = this.startNode();\n      this.next();\n\n      if (this.match(18) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n      } else {\n        node.key = this.createIdentifier(id, \"new\");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n\n    this.tsParseModifiers(node, [\"readonly\"], [\"declare\", \"abstract\", \"private\", \"protected\", \"public\", \"static\", \"override\"], TSErrors.InvalidModifierOnTypeMember);\n    const idx = this.tsTryParseIndexSignature(node);\n\n    if (idx) {\n      return idx;\n    }\n\n    this.parsePropertyName(node, false);\n\n    if (!node.computed && node.key.type === \"Identifier\" && (node.key.name === \"get\" || node.key.name === \"set\") && this.tsTokenCanFollowModifier()) {\n      node.kind = node.key.name;\n      this.parsePropertyName(node, false);\n    }\n\n    return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n  }\n\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n\n  tsParseObjectTypeMembers() {\n    this.expect(13);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(16);\n    return members;\n  }\n\n  tsIsStartOfMappedType() {\n    this.next();\n\n    if (this.eat(52)) {\n      return this.isContextual(\"readonly\");\n    }\n\n    if (this.isContextual(\"readonly\")) {\n      this.next();\n    }\n\n    if (!this.match(8)) {\n      return false;\n    }\n\n    this.next();\n\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n\n    this.next();\n    return this.match(57);\n  }\n\n  tsParseMappedTypeParameter() {\n    const node = this.startNode();\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsExpectThenParseType(57);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(13);\n\n    if (this.match(52)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(\"readonly\");\n    } else if (this.eatContextual(\"readonly\")) {\n      node.readonly = true;\n    }\n\n    this.expect(8);\n    node.typeParameter = this.tsParseMappedTypeParameter();\n    node.nameType = this.eatContextual(\"as\") ? this.tsParseType() : null;\n    this.expect(11);\n\n    if (this.match(52)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(25);\n    } else if (this.eat(25)) {\n      node.optional = true;\n    }\n\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(16);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    let labeledElements = null;\n    node.elementTypes.forEach(elementNode => {\n      var _labeledElements;\n\n      let {\n        type\n      } = elementNode;\n\n      if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\n        this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n      }\n\n      seenOptionalElement = seenOptionalElement || type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\";\n\n      if (type === \"TSRestType\") {\n        elementNode = elementNode.typeAnnotation;\n        type = elementNode.type;\n      }\n\n      const isLabeled = type === \"TSNamedTupleMember\";\n      labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;\n\n      if (labeledElements !== isLabeled) {\n        this.raise(elementNode.start, TSErrors.MixedLabeledAndUnlabeledElements);\n      }\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n\n  tsParseTupleElementType() {\n    const {\n      start: startPos,\n      startLoc\n    } = this.state;\n    const rest = this.eat(29);\n    let type = this.tsParseType();\n    const optional = this.eat(25);\n    const labeled = this.eat(22);\n\n    if (labeled) {\n      const labeledNode = this.startNodeAtNode(type);\n      labeledNode.optional = optional;\n\n      if (type.type === \"TSTypeReference\" && !type.typeParameters && type.typeName.type === \"Identifier\") {\n        labeledNode.label = type.typeName;\n      } else {\n        this.raise(type.start, TSErrors.InvalidTupleMemberLabel);\n        labeledNode.label = type;\n      }\n\n      labeledNode.elementType = this.tsParseType();\n      type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n    } else if (optional) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n\n    if (rest) {\n      const restNode = this.startNodeAt(startPos, startLoc);\n      restNode.typeAnnotation = type;\n      type = this.finishNode(restNode, \"TSRestType\");\n    }\n\n    return type;\n  }\n\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(18);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(19);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n\n  tsParseFunctionOrConstructorType(type, abstract) {\n    const node = this.startNode();\n\n    if (type === \"TSConstructorType\") {\n      node.abstract = !!abstract;\n      if (abstract) this.next();\n      this.next();\n    }\n\n    this.tsFillSignature(27, node);\n    return this.finishNode(node, type);\n  }\n\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n\n    node.literal = (() => {\n      switch (this.state.type) {\n        case 0:\n        case 1:\n        case 4:\n        case 84:\n        case 85:\n          return this.parseExprAtom();\n\n        default:\n          throw this.unexpected();\n      }\n    })();\n\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseTemplateLiteralType() {\n    const node = this.startNode();\n    node.literal = this.parseTemplate(false);\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  parseTemplateSubstitution() {\n    if (this.state.inType) return this.tsParseType();\n    return super.parseTemplateSubstitution();\n  }\n\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case 5:\n      case 87:\n      case 83:\n        {\n          const type = this.match(87) ? \"TSVoidKeyword\" : this.match(83) ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n          if (type !== undefined && this.lookaheadCharCode() !== 46) {\n            const node = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n\n          return this.tsParseTypeReference();\n        }\n\n      case 4:\n      case 0:\n      case 1:\n      case 84:\n      case 85:\n        return this.tsParseLiteralTypeNode();\n\n      case 52:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n          const nextToken = this.lookahead();\n\n          if (nextToken.type !== 0 && nextToken.type !== 1) {\n            throw this.unexpected();\n          }\n\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n\n        break;\n\n      case 77:\n        return this.tsParseThisTypeOrThisTypePredicate();\n\n      case 86:\n        return this.tsParseTypeQuery();\n\n      case 82:\n        return this.tsParseImportType();\n\n      case 13:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n      case 8:\n        return this.tsParseTupleType();\n\n      case 18:\n        return this.tsParseParenthesizedType();\n\n      case 30:\n        return this.tsParseTemplateLiteralType();\n    }\n\n    throw this.unexpected();\n  }\n\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n\n    while (!this.hasPrecedingLineBreak() && this.eat(8)) {\n      if (this.match(11)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(11);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(11);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n\n    return type;\n  }\n\n  tsParseTypeOperator(operator) {\n    const node = this.startNode();\n    this.expectContextual(operator);\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n    if (operator === \"readonly\") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case \"TSTupleType\":\n      case \"TSArrayType\":\n        return;\n\n      default:\n        this.raise(node.start, TSErrors.UnexpectedReadonly);\n    }\n  }\n\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(\"infer\");\n    const typeParameter = this.startNode();\n    typeParameter.name = this.tsParseTypeParameterName();\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n\n  tsParseTypeOperatorOrHigher() {\n    const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw => this.isContextual(kw));\n    return operator ? this.tsParseTypeOperator(operator) : this.isContextual(\"infer\") ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n  }\n\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    const node = this.startNode();\n    const hasLeadingOperator = this.eat(operator);\n    const types = [];\n\n    do {\n      types.push(parseConstituentType());\n    } while (this.eat(operator));\n\n    if (types.length === 1 && !hasLeadingOperator) {\n      return types[0];\n    }\n\n    node.types = types;\n    return this.finishNode(node, kind);\n  }\n\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), 48);\n  }\n\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), 46);\n  }\n\n  tsIsStartOfFunctionType() {\n    if (this.isRelational(\"<\")) {\n      return true;\n    }\n\n    return this.match(18) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n\n  tsSkipParameterStart() {\n    if (this.match(5) || this.match(77)) {\n      this.next();\n      return true;\n    }\n\n    if (this.match(13)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(13)) {\n          ++braceStackCounter;\n        } else if (this.match(16)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    if (this.match(8)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(8)) {\n          ++braceStackCounter;\n        } else if (this.match(11)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n\n    if (this.match(19) || this.match(29)) {\n      return true;\n    }\n\n    if (this.tsSkipParameterStart()) {\n      if (this.match(22) || this.match(20) || this.match(25) || this.match(35)) {\n        return true;\n      }\n\n      if (this.match(19)) {\n        this.next();\n\n        if (this.match(27)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const node = this.startNode();\n      const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n\n      if (asserts && this.match(77)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n\n        if (thisTypePredicate.type === \"TSThisType\") {\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          node.typeAnnotation = null;\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n        } else {\n          this.resetStartLocationFromNode(thisTypePredicate, node);\n          thisTypePredicate.asserts = true;\n        }\n\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        node.typeAnnotation = null;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const type = this.tsParseTypeAnnotation(false);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    return this.match(22) ? this.tsParseTypeOrTypePredicateAnnotation(22) : undefined;\n  }\n\n  tsTryParseTypeAnnotation() {\n    return this.match(22) ? this.tsParseTypeAnnotation() : undefined;\n  }\n\n  tsTryParseType() {\n    return this.tsEatThenParseType(22);\n  }\n\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n\n  tsParseTypePredicateAsserts() {\n    if (!this.match(5) || this.state.value !== \"asserts\") {\n      return false;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.next();\n\n    if (!this.match(5) && !this.match(77)) {\n      return false;\n    }\n\n    if (containsEsc) {\n      this.raise(this.state.lastTokStart, ErrorMessages.InvalidEscapedReservedWord, \"asserts\");\n    }\n\n    return true;\n  }\n\n  tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {\n    this.tsInType(() => {\n      if (eatColon) this.expect(22);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n\n    if (this.hasPrecedingLineBreak() || !this.eat(80)) {\n      return type;\n    }\n\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsParseNonConditionalType();\n    this.expect(25);\n    node.trueType = this.tsParseType();\n    this.expect(22);\n    node.falseType = this.tsParseType();\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n\n  isAbstractConstructorSignature() {\n    return this.isContextual(\"abstract\") && this.lookahead().type === 76;\n  }\n\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n\n    if (this.match(76)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    } else if (this.isAbstractConstructorSignature()) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\", true);\n    }\n\n    return this.tsParseUnionTypeOrHigher();\n  }\n\n  tsParseTypeAssertion() {\n    const node = this.startNode();\n\n    const _const = this.tsTryNextParseConstantContext();\n\n    node.typeAnnotation = _const || this.tsNextThenParseType();\n    this.expectRelational(\">\");\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n\n  tsParseHeritageClause(descriptor) {\n    const originalStart = this.state.start;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n\n    if (!delimitedList.length) {\n      this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n    }\n\n    return delimitedList;\n  }\n\n  tsParseExpressionWithTypeArguments() {\n    const node = this.startNode();\n    node.expression = this.tsParseEntityName(false);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n  }\n\n  tsParseInterfaceDeclaration(node) {\n    if (this.match(5)) {\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"typescript interface declaration\", BIND_TS_INTERFACE);\n    } else {\n      node.id = null;\n      this.raise(this.state.start, TSErrors.MissingInterfaceName);\n    }\n\n    node.typeParameters = this.tsTryParseTypeParameters();\n\n    if (this.eat(80)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript type alias\", BIND_TS_TYPE);\n    node.typeParameters = this.tsTryParseTypeParameters();\n    node.typeAnnotation = this.tsInType(() => {\n      this.expect(35);\n\n      if (this.isContextual(\"intrinsic\") && this.lookahead().type !== 24) {\n        const node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"TSIntrinsicKeyword\");\n      }\n\n      return this.tsParseType();\n    });\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n\n  tsEatThenParseType(token) {\n    return !this.match(token) ? undefined : this.tsNextThenParseType();\n  }\n\n  tsExpectThenParseType(token) {\n    return this.tsDoThenParseType(() => this.expect(token));\n  }\n\n  tsNextThenParseType() {\n    return this.tsDoThenParseType(() => this.next());\n  }\n\n  tsDoThenParseType(cb) {\n    return this.tsInType(() => {\n      cb();\n      return this.tsParseType();\n    });\n  }\n\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(4) ? this.parseExprAtom() : this.parseIdentifier(true);\n\n    if (this.eat(35)) {\n      node.initializer = this.parseMaybeAssignAllowIn();\n    }\n\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n\n  tsParseEnumDeclaration(node, isConst) {\n    if (isConst) node.const = true;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript enum declaration\", isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);\n    this.expect(13);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(16);\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(13);\n    this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, 16);\n    this.scope.exit();\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n\n  tsParseModuleOrNamespaceDeclaration(node, nested = false) {\n    node.id = this.parseIdentifier();\n\n    if (!nested) {\n      this.checkLVal(node.id, \"module or namespace declaration\", BIND_TS_NAMESPACE);\n    }\n\n    if (this.eat(24)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(\"global\")) {\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(4)) {\n      node.id = this.parseExprAtom();\n    } else {\n      this.unexpected();\n    }\n\n    if (this.match(13)) {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseImportEqualsDeclaration(node, isExport) {\n    node.isExport = isExport || false;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"import equals declaration\", BIND_LEXICAL);\n    this.expect(35);\n    const moduleReference = this.tsParseModuleReference();\n\n    if (node.importKind === \"type\" && moduleReference.type !== \"TSExternalModuleReference\") {\n      this.raise(moduleReference.start, TSErrors.ImportAliasHasImportType);\n    }\n\n    node.moduleReference = moduleReference;\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n\n  tsIsExternalModuleReference() {\n    return this.isContextual(\"require\") && this.lookaheadCharCode() === 40;\n  }\n\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(\"require\");\n    this.expect(18);\n\n    if (!this.match(4)) {\n      throw this.unexpected();\n    }\n\n    node.expression = this.parseExprAtom();\n    this.expect(19);\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return undefined;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n\n    if (result !== undefined && result !== false) {\n      return result;\n    } else {\n      this.state = state;\n      return undefined;\n    }\n  }\n\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n\n    let starttype = this.state.type;\n    let kind;\n\n    if (this.isContextual(\"let\")) {\n      starttype = 73;\n      kind = \"let\";\n    }\n\n    return this.tsInAmbientContext(() => {\n      switch (starttype) {\n        case 67:\n          nany.declare = true;\n          return this.parseFunctionStatement(nany, false, true);\n\n        case 79:\n          nany.declare = true;\n          return this.parseClass(nany, true, false);\n\n        case 74:\n          if (this.match(74) && this.isLookaheadContextual(\"enum\")) {\n            this.expect(74);\n            this.expectContextual(\"enum\");\n            return this.tsParseEnumDeclaration(nany, true);\n          }\n\n        case 73:\n          kind = kind || this.state.value;\n          return this.parseVarStatement(nany, kind);\n\n        case 5:\n          {\n            const value = this.state.value;\n\n            if (value === \"global\") {\n              return this.tsParseAmbientExternalModuleDeclaration(nany);\n            } else {\n              return this.tsParseDeclaration(nany, value, true);\n            }\n          }\n      }\n    });\n  }\n\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n  }\n\n  tsParseExpressionStatement(node, expr) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n\n          break;\n        }\n\n      case \"global\":\n        if (this.match(13)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          const mod = node;\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          this.prodParam.exit();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n\n        break;\n\n      default:\n        return this.tsParseDeclaration(node, expr.name, false);\n    }\n  }\n\n  tsParseDeclaration(node, value, next) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminator(next) && (this.match(79) || this.match(5))) {\n          return this.tsParseAbstractDeclaration(node);\n        }\n\n        break;\n\n      case \"enum\":\n        if (next || this.match(5)) {\n          if (next) this.next();\n          return this.tsParseEnumDeclaration(node, false);\n        }\n\n        break;\n\n      case \"interface\":\n        if (this.tsCheckLineTerminator(next) && this.match(5)) {\n          return this.tsParseInterfaceDeclaration(node);\n        }\n\n        break;\n\n      case \"module\":\n        if (this.tsCheckLineTerminator(next)) {\n          if (this.match(4)) {\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          } else if (this.match(5)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n        }\n\n        break;\n\n      case \"namespace\":\n        if (this.tsCheckLineTerminator(next) && this.match(5)) {\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"type\":\n        if (this.tsCheckLineTerminator(next) && this.match(5)) {\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n\n        break;\n    }\n  }\n\n  tsCheckLineTerminator(next) {\n    if (next) {\n      if (this.hasFollowingLineBreak()) return false;\n      this.next();\n      return true;\n    }\n\n    return !this.isLineTerminator();\n  }\n\n  tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n    if (!this.isRelational(\"<\")) {\n      return undefined;\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = this.tsParseTypeParameters();\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(27);\n      return node;\n    });\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    if (!res) {\n      return undefined;\n    }\n\n    return this.parseArrowExpression(res, null, true);\n  }\n\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expectRelational(\"<\");\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeArguments);\n    }\n\n    this.expectRelational(\">\");\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n\n  tsIsDeclarationStart() {\n    if (this.match(5)) {\n      switch (this.state.value) {\n        case \"abstract\":\n        case \"declare\":\n        case \"enum\":\n        case \"interface\":\n        case \"module\":\n        case \"namespace\":\n        case \"type\":\n          return true;\n      }\n    }\n\n    return false;\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let accessibility;\n    let readonly = false;\n    let override = false;\n\n    if (allowModifiers !== undefined) {\n      const modified = {};\n      this.tsParseModifiers(modified, [\"public\", \"private\", \"protected\", \"override\", \"readonly\"]);\n      accessibility = modified.accessibility;\n      override = modified.override;\n      readonly = modified.readonly;\n\n      if (allowModifiers === false && (accessibility || readonly || override)) {\n        this.raise(startPos, TSErrors.UnexpectedParameterModifier);\n      }\n    }\n\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (accessibility || readonly || override) {\n      const pp = this.startNodeAt(startPos, startLoc);\n\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n      if (override) pp.override = override;\n\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n      }\n\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(22)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(22);\n    }\n\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" ? \"TSDeclareMethod\" : undefined;\n\n    if (bodilessType && !this.match(13) && this.isLineTerminator()) {\n      this.finishNode(node, bodilessType);\n      return;\n    }\n\n    if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n      this.raise(node.start, TSErrors.DeclareFunctionHasImplementation);\n\n      if (node.declare) {\n        super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        return;\n      }\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkLVal(node.id, \"function name\", BIND_TS_AMBIENT);\n    } else {\n      super.registerFunctionStatementId(...arguments);\n    }\n  }\n\n  tsCheckForInvalidTypeCasts(items) {\n    items.forEach(node => {\n      if ((node == null ? void 0 : node.type) === \"TSTypeCastExpression\") {\n        this.raise(node.typeAnnotation.start, TSErrors.UnexpectedTypeAnnotation);\n      }\n    });\n  }\n\n  toReferencedList(exprList, isInParens) {\n    this.tsCheckForInvalidTypeCasts(exprList);\n    return exprList;\n  }\n\n  parseArrayLike(...args) {\n    const node = super.parseArrayLike(...args);\n\n    if (node.type === \"ArrayExpression\") {\n      this.tsCheckForInvalidTypeCasts(node.elements);\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(40)) {\n      this.state.exprAllowed = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startPos, startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n\n    let isOptionalCall = false;\n\n    if (this.match(26) && this.lookaheadCharCode() === 60) {\n      if (noCalls) {\n        state.stop = true;\n        return base;\n      }\n\n      state.optionalChainMember = isOptionalCall = true;\n      this.next();\n    }\n\n    if (this.isRelational(\"<\")) {\n      let missingParenErrorPos;\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsyncArrow(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (typeArguments) {\n          if (isOptionalCall && !this.match(18)) {\n            missingParenErrorPos = this.state.pos;\n            this.unexpected();\n          }\n\n          if (!noCalls && this.eat(18)) {\n            node.arguments = this.parseCallExpressionArguments(19, false);\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n            node.typeParameters = typeArguments;\n\n            if (state.optionalChainMember) {\n              node.optional = isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          } else if (this.match(30)) {\n            const result = this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n            result.typeParameters = typeArguments;\n            return result;\n          }\n        }\n\n        this.unexpected();\n      });\n\n      if (missingParenErrorPos) {\n        this.unexpected(missingParenErrorPos, 18);\n      }\n\n      if (result) return result;\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n  }\n\n  parseNewArguments(node) {\n    if (this.isRelational(\"<\")) {\n      const typeParameters = this.tsTryParseAndCatch(() => {\n        const args = this.tsParseTypeArguments();\n        if (!this.match(18)) this.unexpected();\n        return args;\n      });\n\n      if (typeParameters) {\n        node.typeParameters = typeParameters;\n      }\n    }\n\n    super.parseNewArguments(node);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (tokenOperatorPrecedence(57) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(\"as\")) {\n      const node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.expression = left;\n\n      const _const = this.tsTryNextParseConstantContext();\n\n      if (_const) {\n        node.typeAnnotation = _const;\n      } else {\n        node.typeAnnotation = this.tsNextThenParseType();\n      }\n\n      this.finishNode(node, \"TSAsExpression\");\n      this.reScan_lt_gt();\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {}\n\n  checkDuplicateExports() {}\n\n  parseImport(node) {\n    node.importKind = \"value\";\n\n    if (this.match(5) || this.match(54) || this.match(13)) {\n      let ahead = this.lookahead();\n\n      if (this.isContextual(\"type\") && ahead.type !== 20 && !(ahead.type === 5 && ahead.value === \"from\") && ahead.type !== 35) {\n        node.importKind = \"type\";\n        this.next();\n        ahead = this.lookahead();\n      }\n\n      if (this.match(5) && ahead.type === 35) {\n        return this.tsParseImportEqualsDeclaration(node);\n      }\n    }\n\n    const importNode = super.parseImport(node);\n\n    if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n      this.raise(importNode.start, TSErrors.TypeImportCannotSpecifyDefaultAndNamed);\n    }\n\n    return importNode;\n  }\n\n  parseExport(node) {\n    if (this.match(82)) {\n      this.next();\n\n      if (this.isContextual(\"type\") && this.lookaheadCharCode() !== 61) {\n        node.importKind = \"type\";\n        this.next();\n      } else {\n        node.importKind = \"value\";\n      }\n\n      return this.tsParseImportEqualsDeclaration(node, true);\n    } else if (this.eat(35)) {\n      const assign = node;\n      assign.expression = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(\"as\")) {\n      const decl = node;\n      this.expectContextual(\"namespace\");\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      if (this.isContextual(\"type\") && this.lookahead().type === 13) {\n        this.next();\n        node.exportKind = \"type\";\n      } else {\n        node.exportKind = \"value\";\n      }\n\n      return super.parseExport(node);\n    }\n  }\n\n  isAbstractClass() {\n    return this.isContextual(\"abstract\") && this.lookahead().type === 79;\n  }\n\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      cls.abstract = true;\n      this.parseClass(cls, true, true);\n      return cls;\n    }\n\n    if (this.state.value === \"interface\") {\n      const interfaceNode = this.startNode();\n      this.next();\n      const result = this.tsParseInterfaceDeclaration(interfaceNode);\n      if (result) return result;\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseStatementContent(context, topLevel) {\n    if (this.state.type === 74) {\n      const ahead = this.lookahead();\n\n      if (ahead.type === 5 && ahead.value === \"enum\") {\n        const node = this.startNode();\n        this.expect(74);\n        this.expectContextual(\"enum\");\n        return this.tsParseEnumDeclaration(node, true);\n      }\n    }\n\n    return super.parseStatementContent(context, topLevel);\n  }\n\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n\n  tsHasSomeModifiers(member, modifiers) {\n    return modifiers.some(modifier => {\n      if (tsIsAccessModifier(modifier)) {\n        return member.accessibility === modifier;\n      }\n\n      return !!member[modifier];\n    });\n  }\n\n  tsIsStartOfStaticBlocks() {\n    return this.isContextual(\"static\") && this.lookaheadCharCode() === 123;\n  }\n\n  parseClassMember(classBody, member, state) {\n    const modifiers = [\"declare\", \"private\", \"public\", \"protected\", \"override\", \"abstract\", \"readonly\", \"static\"];\n    this.tsParseModifiers(member, modifiers, undefined, undefined, true);\n\n    const callParseClassMemberWithIsStatic = () => {\n      if (this.tsIsStartOfStaticBlocks()) {\n        this.next();\n        this.next();\n\n        if (this.tsHasSomeModifiers(member, modifiers)) {\n          this.raise(this.state.pos, TSErrors.StaticBlockCannotHaveModifier);\n        }\n\n        this.parseClassStaticBlock(classBody, member);\n      } else {\n        this.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);\n      }\n    };\n\n    if (member.declare) {\n      this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n    } else {\n      callParseClassMemberWithIsStatic();\n    }\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const idx = this.tsTryParseIndexSignature(member);\n\n    if (idx) {\n      classBody.body.push(idx);\n\n      if (member.abstract) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n      }\n\n      if (member.accessibility) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAccessibility, member.accessibility);\n      }\n\n      if (member.declare) {\n        this.raise(member.start, TSErrors.IndexSignatureHasDeclare);\n      }\n\n      if (member.override) {\n        this.raise(member.start, TSErrors.IndexSignatureHasOverride);\n      }\n\n      return;\n    }\n\n    if (!this.state.inAbstractClass && member.abstract) {\n      this.raise(member.start, TSErrors.NonAbstractClassHasAbstractMethod);\n    }\n\n    if (member.override) {\n      if (!state.hadSuperClass) {\n        this.raise(member.start, TSErrors.OverrideNotInSubClass);\n      }\n    }\n\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(25);\n    if (optional) methodOrProp.optional = true;\n\n    if (methodOrProp.readonly && this.match(18)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n    }\n\n    if (methodOrProp.declare && this.match(18)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n    return decl || super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (!this.state.maybeInArrowParameters || !this.match(25)) {\n      return super.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n    }\n\n    const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n    if (!result.node) {\n      if (result.error) {\n        super.setOptionalParametersError(refExpressionErrors, result.error);\n      }\n\n      return expr;\n    }\n\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(25)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(22)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  parseExportDeclaration(node) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(\"declare\");\n\n    if (isDeclare && (this.isContextual(\"declare\") || !this.shouldParseExportDeclaration())) {\n      throw this.raise(this.state.start, TSErrors.ExpectedAmbientAfterExportDeclare);\n    }\n\n    let declaration;\n\n    if (this.match(5)) {\n      declaration = this.tsTryParseExportDeclaration();\n    }\n\n    if (!declaration) {\n      declaration = super.parseExportDeclaration(node);\n    }\n\n    if (declaration && (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare)) {\n      node.exportKind = \"type\";\n    }\n\n    if (declaration && isDeclare) {\n      this.resetStartLocation(declaration, startPos, startLoc);\n      declaration.declare = true;\n    }\n\n    return declaration;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n      return;\n    }\n\n    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional && this.eat(40)) {\n      node.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n\n    if (this.state.isAmbientContext && this.match(35)) {\n      this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n    }\n\n    if (node.abstract && this.match(35)) {\n      const {\n        key\n      } = node;\n      this.raise(this.state.start, TSErrors.AbstractPropertyHasInitializer, key.type === \"Identifier\" && !node.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`);\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n    }\n\n    if (node.accessibility) {\n      this.raise(node.start, TSErrors.PrivateElementHasAccessibility, node.accessibility);\n    }\n\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters();\n\n    if (typeParameters && isConstructor) {\n      this.raise(typeParameters.start, TSErrors.ConstructorHasTypeParameters);\n    }\n\n    if (method.declare && (method.kind === \"get\" || method.kind === \"set\")) {\n      this.raise(method.start, TSErrors.DeclareAccessor, method.kind);\n    }\n\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.tsParseTypeArguments();\n    }\n\n    if (this.eatContextual(\"implements\")) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n\n  parseObjPropValue(prop, ...args) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) prop.typeParameters = typeParameters;\n    super.parseObjPropValue(prop, ...args);\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (decl.id.type === \"Identifier\" && this.eat(40)) {\n      decl.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(22)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  parseMaybeAssign(...args) {\n    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;\n\n    let state;\n    let jsx;\n    let typeCast;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(94) || this.isRelational(\"<\"))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n\n      if (context[context.length - 1] === types.j_oTag) {\n        context.length -= 2;\n      } else if (context[context.length - 1] === types.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if (!((_jsx = jsx) != null && _jsx.error) && !this.isRelational(\"<\")) {\n      return super.parseMaybeAssign(...args);\n    }\n\n    let typeParameters;\n    state = state || this.state.clone();\n    const arrow = this.tryParse(abort => {\n      var _expr$extra, _typeParameters;\n\n      typeParameters = this.tsParseTypeParameters();\n      const expr = super.parseMaybeAssign(...args);\n\n      if (expr.type !== \"ArrowFunctionExpression\" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {\n        abort();\n      }\n\n      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n\n      expr.typeParameters = typeParameters;\n      return expr;\n    }, state);\n    if (!arrow.error && !arrow.aborted) return arrow.node;\n\n    if (!jsx) {\n      assert(!this.hasPlugin(\"jsx\"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n\n    if ((_jsx2 = jsx) != null && _jsx2.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n\n    if (arrow.node) {\n      this.state = arrow.failState;\n      return arrow.node;\n    }\n\n    if ((_typeCast = typeCast) != null && _typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n\n    if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n    if (arrow.thrown) throw arrow.error;\n    if ((_typeCast2 = typeCast) != null && _typeCast2.thrown) throw typeCast.error;\n    throw ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n      return this.tsParseTypeAssertion();\n    } else {\n      return super.parseMaybeUnary(refExpressionErrors);\n    }\n  }\n\n  parseArrow(node) {\n    if (this.match(22)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(22);\n        if (this.canInsertSemicolon() || !this.match(27)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n\n    return super.parseArrow(node);\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(25)) {\n      if (param.type !== \"Identifier\" && !this.state.isAmbientContext && !this.state.inType) {\n        this.raise(param.start, TSErrors.PatternIsOptional);\n      }\n\n      param.optional = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return this.isAssignable(node.expression, isBinding);\n\n      case \"TSParameterProperty\":\n        return true;\n\n      default:\n        return super.isAssignable(node, isBinding);\n    }\n  }\n\n  toAssignable(node, isLHS = false) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n\n      case \"TSParameterProperty\":\n        return super.toAssignable(node, isLHS);\n\n      case \"ParenthesizedExpression\":\n        return this.toAssignableParenthesizedExpression(node, isLHS);\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableParenthesizedExpression(node, isLHS) {\n    switch (node.expression.type) {\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n      case \"ParenthesizedExpression\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  checkLVal(expr, contextDescription, ...args) {\n    var _expr$extra2;\n\n    switch (expr.type) {\n      case \"TSTypeCastExpression\":\n        return;\n\n      case \"TSParameterProperty\":\n        this.checkLVal(expr.parameter, \"parameter property\", ...args);\n        return;\n\n      case \"TSAsExpression\":\n      case \"TSTypeAssertion\":\n        if (!args[0] && contextDescription !== \"parenthesized expression\" && !((_expr$extra2 = expr.extra) != null && _expr$extra2.parenthesized)) {\n          this.raise(expr.start, ErrorMessages.InvalidLhs, contextDescription);\n          break;\n        }\n\n        this.checkLVal(expr.expression, \"parenthesized expression\", ...args);\n        return;\n\n      case \"TSNonNullExpression\":\n        this.checkLVal(expr.expression, contextDescription, ...args);\n        return;\n\n      default:\n        super.checkLVal(expr, contextDescription, ...args);\n        return;\n    }\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 77:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsParseTypeArguments();\n\n      if (this.match(18)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n\n      this.unexpected(this.state.start, 18);\n    }\n\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.state.isAmbientContext && this.match(20) && this.lookaheadCharCode() === close) {\n      this.next();\n    } else {\n      super.checkCommaAfterRest(close);\n    }\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(40) || this.match(22) || super.isClassProperty();\n  }\n\n  parseMaybeDefault(...args) {\n    const node = super.parseMaybeDefault(...args);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, TSErrors.TypeAnnotationAfterAssign);\n    }\n\n    return node;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(50, 1);\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  reScan_lt_gt() {\n    if (this.match(50)) {\n      const code = this.input.charCodeAt(this.state.start);\n\n      if (code === 60 || code === 62) {\n        this.state.pos -= 1;\n        this.readToken_lt_gt(code);\n      }\n    }\n  }\n\n  toAssignableList(exprList) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if (!expr) continue;\n\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          exprList[i] = this.typeCastToParameter(expr);\n          break;\n\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (!this.state.maybeInArrowParameters) {\n            exprList[i] = this.typeCastToParameter(expr);\n          } else {\n            this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n          }\n\n          break;\n      }\n    }\n\n    return super.toAssignableList(...arguments);\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  shouldParseArrow(params) {\n    if (this.match(22)) {\n      return params.every(expr => this.isAssignable(expr, true));\n    }\n\n    return super.shouldParseArrow(params);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(22) || super.shouldParseAsyncArrow();\n  }\n\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArguments());\n      if (typeArguments) node.typeParameters = typeArguments;\n    }\n\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const firstParam = params[0];\n    const hasContextParam = firstParam && this.isThisParam(firstParam);\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n\n  parseCatchClauseParam() {\n    const param = super.parseCatchClauseParam();\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      param.typeAnnotation = type;\n      this.resetEndLocation(param);\n    }\n\n    return param;\n  }\n\n  tsInAmbientContext(cb) {\n    const oldIsAmbientContext = this.state.isAmbientContext;\n    this.state.isAmbientContext = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.isAmbientContext = oldIsAmbientContext;\n    }\n  }\n\n  parseClass(node, ...args) {\n    const oldInAbstractClass = this.state.inAbstractClass;\n    this.state.inAbstractClass = !!node.abstract;\n\n    try {\n      return super.parseClass(node, ...args);\n    } finally {\n      this.state.inAbstractClass = oldInAbstractClass;\n    }\n  }\n\n  tsParseAbstractDeclaration(node) {\n    if (this.match(79)) {\n      node.abstract = true;\n      return this.parseClass(node, true, false);\n    } else if (this.isContextual(\"interface\")) {\n      if (!this.hasFollowingLineBreak()) {\n        node.abstract = true;\n        this.raise(node.start, TSErrors.NonClassMethodPropertyHasAbstractModifer);\n        this.next();\n        return this.tsParseInterfaceDeclaration(node);\n      }\n    } else {\n      this.unexpected(null, 79);\n    }\n  }\n\n  parseMethod(...args) {\n    const method = super.parseMethod(...args);\n\n    if (method.abstract) {\n      const hasBody = this.hasPlugin(\"estree\") ? !!method.value.body : !!method.body;\n\n      if (hasBody) {\n        const {\n          key\n        } = method;\n        this.raise(method.start, TSErrors.AbstractMethodHasImplementation, key.type === \"Identifier\" && !method.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`);\n      }\n    }\n\n    return method;\n  }\n\n  tsParseTypeParameterName() {\n    const typeName = this.parseIdentifier();\n    return typeName.name;\n  }\n\n  shouldParseAsAmbientContext() {\n    return !!this.getPluginOption(\"typescript\", \"dts\");\n  }\n\n  parse() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.parse();\n  }\n\n  getExpression() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.getExpression();\n  }\n\n});\n\nconst PlaceHolderErrors = makeErrorTemplates({\n  ClassNameIsRequired: \"A class name is required.\"\n}, ErrorCodes.SyntaxError);\nvar placeholders = (superClass => class extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(96)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      this.expect(96);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n\n  finishPlaceholder(node, expectedNode) {\n    const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n    node.expectedNode = expectedNode;\n    return isFinished ? node : this.finishNode(node, \"Placeholder\");\n  }\n\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      return this.finishOp(96, 2);\n    }\n\n    return super.getTokenFromCode(...arguments);\n  }\n\n  parseExprAtom() {\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments);\n  }\n\n  parseIdentifier() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(...arguments);\n  }\n\n  checkReservedWord(word) {\n    if (word !== undefined) super.checkReservedWord(...arguments);\n  }\n\n  parseBindingAtom() {\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments);\n  }\n\n  checkLVal(expr) {\n    if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n  }\n\n  toAssignable(node) {\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n      node.expectedNode = \"Pattern\";\n      return node;\n    }\n\n    return super.toAssignable(...arguments);\n  }\n\n  isLet(context) {\n    if (super.isLet(context)) {\n      return true;\n    }\n\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    if (context) return false;\n    const nextToken = this.lookahead();\n\n    if (nextToken.type === 96) {\n      return true;\n    }\n\n    return false;\n  }\n\n  verifyBreakContinue(node) {\n    if (node.label && node.label.type === \"Placeholder\") return;\n    super.verifyBreakContinue(...arguments);\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n      return super.parseExpressionStatement(...arguments);\n    }\n\n    if (this.match(22)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n      this.next();\n      stmt.body = this.parseStatement(\"label\");\n      return this.finishNode(stmt, \"LabeledStatement\");\n    }\n\n    this.semicolon();\n    node.name = expr.name;\n    return this.finishPlaceholder(node, \"Statement\");\n  }\n\n  parseBlock() {\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(...arguments);\n  }\n\n  parseFunctionId() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(...arguments);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n\n    if (placeholder) {\n      if (this.match(80) || this.match(96) || this.match(13)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n        return this.finishNode(node, type);\n      } else {\n        this.unexpected(null, PlaceHolderErrors.ClassNameIsRequired);\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n\n    this.parseClassSuper(node);\n    node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, type);\n  }\n\n  parseExport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseExport(...arguments);\n\n    if (!this.isContextual(\"from\") && !this.match(20)) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    this.expectPlugin(\"exportDefaultFrom\");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n    return super.parseExport(node);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(64)) {\n      const next = this.nextTokenStart();\n\n      if (this.isUnparsedContextual(next, \"from\")) {\n        if (this.input.startsWith(tokenLabelName(96), this.nextTokenStartSince(next + 4))) {\n          return true;\n        }\n      }\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (node.specifiers && node.specifiers.length > 0) {\n      return true;\n    }\n\n    return super.maybeParseExportDefaultSpecifier(...arguments);\n  }\n\n  checkExport(node) {\n    const {\n      specifiers\n    } = node;\n\n    if (specifiers != null && specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\n    }\n\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseImport(...arguments);\n    node.specifiers = [];\n\n    if (!this.isContextual(\"from\") && !this.match(20)) {\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    this.finishNode(specifier, \"ImportDefaultSpecifier\");\n    node.specifiers.push(specifier);\n\n    if (this.eat(20)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n\n    this.expectContextual(\"from\");\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource(...arguments);\n  }\n\n});\n\nvar v8intrinsic = (superClass => class extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(53)) {\n      const v8IntrinsicStart = this.state.start;\n      const node = this.startNode();\n      this.eat(53);\n\n      if (this.match(5)) {\n        const name = this.parseIdentifierName(this.state.start);\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = \"V8IntrinsicIdentifier\";\n\n        if (this.match(18)) {\n          return identifier;\n        }\n      }\n\n      this.unexpected(v8IntrinsicStart);\n    }\n  }\n\n  parseExprAtom() {\n    return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n  }\n\n});\n\nfunction hasPlugin(plugins, name) {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\nfunction getPluginOption(plugins, name, option) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(`\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`);\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, \"recordAndTuple\") && getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\") === \"hash\";\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\"Cannot combine placeholders plugin and Hack-style pipes.\");\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\"Cannot combine v8intrinsic plugin and Hack-style pipes.\");\n      }\n\n      const topicToken = getPluginOption(plugins, \"pipelineOperator\", \"topicToken\");\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n        throw new Error(`\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`);\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\"Cannot combine importAssertions and moduleAttributes plugins.\");\n      }\n\n      const moduleAttributesVerionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\n\n      if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n        throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n      }\n    }\n  }\n\n  if (hasPlugin(plugins, \"recordAndTuple\") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"asyncDoExpressions\") && !hasPlugin(plugins, \"doExpressions\")) {\n    const error = new Error(\"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\");\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n}\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\n\nconst defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false,\n  attachComment: true\n};\nfunction getOptions(opts) {\n  const options = {};\n\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\n\nclass LValParser extends NodeUtils {\n  toAssignable(node, isLHS = false) {\n    var _node$extra, _node$extra3;\n\n    let parenthesized = undefined;\n\n    if (node.type === \"ParenthesizedExpression\" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n\n      if (isLHS) {\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        }\n      } else {\n        this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n          var _node$extra2;\n\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (isLast && prop.type === \"RestElement\" && (_node$extra2 = node.extra) != null && _node$extra2.trailingComma) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value, isLHS);\n        break;\n\n      case \"SpreadElement\":\n        {\n          this.checkToRestConversion(node);\n          node.type = \"RestElement\";\n          const arg = node.argument;\n          this.toAssignable(arg, isLHS);\n          break;\n        }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingComma, isLHS);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, ErrorMessages.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(parenthesized, isLHS);\n        break;\n    }\n\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n    if (prop.type === \"ObjectMethod\") {\n      const error = prop.kind === \"get\" || prop.kind === \"set\" ? ErrorMessages.PatternHasAccessor : ErrorMessages.PatternHasMethod;\n      this.raise(prop.key.start, error);\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos, isLHS) {\n    let end = exprList.length;\n\n    if (end) {\n      const last = exprList[end - 1];\n\n      if ((last == null ? void 0 : last.type) === \"RestElement\") {\n        --end;\n      } else if ((last == null ? void 0 : last.type) === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n\n    return exprList;\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\":\n        {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return prop.type !== \"ObjectMethod\" && (i === last || prop.type !== \"SpreadElement\") && this.isAssignable(prop);\n          });\n        }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(element => element === null || this.isAssignable(element));\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  parseSpread(refExpressionErrors, refNeedsArrowPos) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined, refNeedsArrowPos);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 8:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(11, 93, true);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n\n      case 13:\n        return this.parseObjectLike(16, true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(20);\n      }\n\n      if (allowEmpty && this.match(20)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(29)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n\n        if (this.match(32) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, ErrorMessages.UnsupportedParameterDecorator);\n        }\n\n        while (this.match(32)) {\n          decorators.push(this.parseDecorator());\n        }\n\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n\n    return elts;\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param) {\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    var _startLoc, _startPos, _left;\n\n    startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;\n    startPos = (_startPos = startPos) != null ? _startPos : this.state.start;\n    left = (_left = left) != null ? _left : this.parseBindingAtom();\n    if (!this.eat(35)) return left;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  checkLVal(expr, contextDescription, bindingType = BIND_NONE, checkClashes, disallowLetBinding, strictModeChanged = false) {\n    switch (expr.type) {\n      case \"Identifier\":\n        {\n          const {\n            name\n          } = expr;\n\n          if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(name, this.inModule) : isStrictBindOnlyReservedWord(name))) {\n            this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.StrictEvalArguments : ErrorMessages.StrictEvalArgumentsBinding, name);\n          }\n\n          if (checkClashes) {\n            if (checkClashes.has(name)) {\n              this.raise(expr.start, ErrorMessages.ParamDupe);\n            } else {\n              checkClashes.add(name);\n            }\n          }\n\n          if (disallowLetBinding && name === \"let\") {\n            this.raise(expr.start, ErrorMessages.LetInLexicalBinding);\n          }\n\n          if (!(bindingType & BIND_NONE)) {\n            this.scope.declareName(name, bindingType, expr.start);\n          }\n\n          break;\n        }\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, ErrorMessages.InvalidPropertyBindingPattern);\n        }\n\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (this.isObjectProperty(prop)) prop = prop.value;else if (this.isObjectMethod(prop)) continue;\n          this.checkLVal(prop, \"object destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n        }\n\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(elem, \"array destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n          }\n        }\n\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(expr.left, \"assignment pattern\", bindingType, checkClashes);\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(expr.argument, \"rest element\", bindingType, checkClashes);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(expr.expression, \"parenthesized expression\", bindingType, checkClashes);\n        break;\n\n      default:\n        {\n          this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.InvalidLhs : ErrorMessages.InvalidLhsBinding, contextDescription);\n        }\n    }\n  }\n\n  checkToRestConversion(node) {\n    if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n      this.raise(node.argument.start, ErrorMessages.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.match(20)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos) {\n    throw this.raise(pos, ErrorMessages.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos) {\n    this.raise(pos, ErrorMessages.RestTrailingComma);\n  }\n\n}\n\nconst invalidHackPipeBodies = new Map([[\"ArrowFunctionExpression\", \"arrow function\"], [\"AssignmentExpression\", \"assignment\"], [\"ConditionalExpression\", \"conditional\"], [\"YieldExpression\", \"yield\"]]);\nclass ExpressionParser extends LValParser {\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(key.start, ErrorMessages.RecordNoProto);\n        return;\n      }\n\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, ErrorMessages.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr, potentialArrowAt) {\n    return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\n  }\n\n  getExpression() {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n\n    if (!this.match(7)) {\n      this.unexpected();\n    }\n\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n\n    return expr;\n  }\n\n  parseExpression(disallowIn, refExpressionErrors) {\n    if (disallowIn) {\n      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n    }\n\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  parseExpressionBase(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n\n    if (this.match(20)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n\n      while (this.eat(20)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {\n    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n\n  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {\n    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n\n  setOptionalParametersError(refExpressionErrors, resultError) {\n    var _resultError$pos;\n\n    refExpressionErrors.optionalParameters = (_resultError$pos = resultError == null ? void 0 : resultError.pos) != null ? _resultError$pos : this.state.start;\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    if (this.isContextual(\"yield\")) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    if (this.match(18) || this.match(5)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(35)) {\n        node.left = this.toAssignable(left, true);\n        refExpressionErrors.doubleProto = -1;\n      } else {\n        node.left = left;\n      }\n\n      if (refExpressionErrors.shorthandAssign >= node.left.start) {\n        refExpressionErrors.shorthandAssign = -1;\n      }\n\n      this.checkLVal(left, \"assignment expression\");\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  parseMaybeConditional(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (this.eat(25)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(22);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(refExpressionErrors) {\n    return this.match(6) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  parseExprOps(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (this.isPrivateName(left)) {\n      const value = this.getPrivateNameSV(left);\n      const {\n        start\n      } = left;\n\n      if (minPrec >= tokenOperatorPrecedence(57) || !this.prodParam.hasIn || !this.match(57)) {\n        this.raise(start, ErrorMessages.PrivateInExpectedIn, value);\n      }\n\n      this.classScope.usePrivateName(value, start);\n    }\n\n    const op = this.state.type;\n\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(57))) {\n      let prec = tokenOperatorPrecedence(op);\n\n      if (prec > minPrec) {\n        if (op === 42) {\n          this.expectPlugin(\"pipelineOperator\");\n\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        }\n\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n        const logical = op === 44 || op === 45;\n        const coalesce = op === 43;\n\n        if (coalesce) {\n          prec = tokenOperatorPrecedence(45);\n        }\n\n        this.next();\n\n        if (op === 42 && this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\") {\n          if (this.match(5) && this.state.value === \"await\" && this.prodParam.hasAwait) {\n            throw this.raise(this.state.start, ErrorMessages.UnexpectedAwaitAfterPipelineBody);\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n        const nextOp = this.state.type;\n\n        if (coalesce && (nextOp === 44 || nextOp === 45) || logical && nextOp === 43) {\n          throw this.raise(this.state.start, ErrorMessages.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n\n    return left;\n  }\n\n  parseExprOpRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    switch (op) {\n      case 42:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(\"yield\")) {\n                throw this.raise(this.state.start, ErrorMessages.PipeBodyIsTighter, this.state.value);\n              }\n\n              return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  parseExprOpBaseRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, tokenIsRightAssociative(op) ? prec - 1 : prec);\n  }\n\n  parseHackPipeBody() {\n    var _body$extra;\n\n    const {\n      start\n    } = this.state;\n    const body = this.parseMaybeAssign();\n\n    if (invalidHackPipeBodies.has(body.type) && !((_body$extra = body.extra) != null && _body$extra.parenthesized)) {\n      this.raise(start, ErrorMessages.PipeUnparenthesizedBody, invalidHackPipeBodies.get(body.type));\n    }\n\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(start, ErrorMessages.PipeTopicUnused);\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(node) {\n    if (this.match(56)) {\n      this.raise(node.argument.start, ErrorMessages.UnexpectedTokenUnaryExponentiation);\n    }\n  }\n\n  parseMaybeUnary(refExpressionErrors, sawUnary) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(\"await\");\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n\n    const update = this.match(39);\n    const node = this.startNode();\n\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(71)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n\n      const isDelete = this.match(88);\n      this.next();\n      node.argument = this.parseMaybeUnary(null, true);\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, ErrorMessages.StrictDelete);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(node.start, ErrorMessages.DeletePrivateField);\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const {\n        type\n      } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(53);\n\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(startPos, ErrorMessages.AwaitNotInAsyncContext);\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  parseUpdate(node, update, refExpressionErrors) {\n    if (update) {\n      this.checkLVal(node.argument, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprSubscripts(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false\n    };\n\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n\n    return base;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!noCalls && this.eat(23)) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (this.match(30)) {\n      return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (this.match(26)) {\n      if (noCalls && this.lookaheadCharCode() === 40) {\n        state.stop = true;\n        return base;\n      }\n\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(18)) {\n      return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);\n    } else {\n      const computed = this.eat(8);\n\n      if (computed || optional || this.eat(24)) {\n        return this.parseMember(base, startPos, startLoc, state, computed, optional);\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  parseMember(base, startPos, startLoc, state, computed, optional) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.computed = computed;\n    const privateName = !computed && this.match(6) && this.state.value;\n    const property = computed ? this.parseExpression() : privateName ? this.parsePrivateName() : this.parseIdentifier(true);\n\n    if (privateName !== false) {\n      if (node.object.type === \"Super\") {\n        this.raise(startPos, ErrorMessages.SuperPrivateField);\n      }\n\n      this.classScope.usePrivateName(privateName, property.start);\n    }\n\n    node.property = property;\n\n    if (computed) {\n      this.expect(11);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  parseBind(base, startPos, startLoc, noCalls, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n  }\n\n  parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n    this.state.maybeInArrowParameters = true;\n    this.next();\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n\n    if (state.maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(19);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(19, base.type === \"Import\", base.type !== \"Super\", node, refExpressionErrors);\n    }\n\n    this.finishCallExpression(node, state.optionalChainMember);\n\n    if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\n    } else {\n      if (state.maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  toReferencedArguments(node, isParenthesizedExpr) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  parseTaggedTemplateExpression(base, startPos, startLoc, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n\n    if (state.optionalChainMember) {\n      this.raise(startPos, ErrorMessages.OptionalChainingNoTemplate);\n    }\n\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n  }\n\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(node.start, ErrorMessages.ImportCallArity, this.hasPlugin(\"importAssertions\") || this.hasPlugin(\"moduleAttributes\") ? \"one or two arguments\" : \"one argument\");\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(arg.start, ErrorMessages.ImportCallSpreadArgument);\n          }\n        }\n      }\n    }\n\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n\n  parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(20);\n\n        if (this.match(close)) {\n          if (dynamicImport && !this.hasPlugin(\"importAssertions\") && !this.hasPlugin(\"moduleAttributes\")) {\n            this.raise(this.state.lastTokStart, ErrorMessages.ImportCallArgumentTrailingComma);\n          }\n\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(27) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(27);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);\n    setInnerComments(node, call.innerComments);\n    setInnerComments(node, call.callee.trailingComments);\n    return node;\n  }\n\n  parseNoCallExpr() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    let node;\n\n    switch (this.state.type) {\n      case 78:\n        return this.parseSuper();\n\n      case 82:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(24)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(18)) {\n          this.raise(this.state.lastTokStart, ErrorMessages.UnsupportedImport);\n        }\n\n        return this.finishNode(node, \"Import\");\n\n      case 77:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case 5:\n        {\n          if (this.isContextual(\"module\") && this.lookaheadCharCode() === 123 && !this.hasFollowingLineBreak()) {\n            return this.parseModuleExpression();\n          }\n\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n            if (this.match(67)) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseFunction(this.startNodeAtNode(id), undefined, true);\n            } else if (this.match(5)) {\n              if (this.lookaheadCharCode() === 61) {\n                return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id));\n              } else {\n                return id;\n              }\n            } else if (this.match(89)) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (canBeArrow && this.match(27) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n          }\n\n          return id;\n        }\n\n      case 89:\n        {\n          return this.parseDo(this.startNode(), false);\n        }\n\n      case 55:\n      case 37:\n        {\n          this.readRegexp();\n          return this.parseRegExpLiteral(this.state.value);\n        }\n\n      case 0:\n        return this.parseNumericLiteral(this.state.value);\n\n      case 1:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case 2:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case 4:\n        return this.parseStringLiteral(this.state.value);\n\n      case 83:\n        return this.parseNullLiteral();\n\n      case 84:\n        return this.parseBooleanLiteral(true);\n\n      case 85:\n        return this.parseBooleanLiteral(false);\n\n      case 18:\n        {\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          return this.parseParenAndDistinguishExpression(canBeArrow);\n        }\n\n      case 10:\n      case 9:\n        {\n          return this.parseArrayLike(this.state.type === 10 ? 12 : 11, false, true, refExpressionErrors);\n        }\n\n      case 8:\n        {\n          return this.parseArrayLike(11, true, false, refExpressionErrors);\n        }\n\n      case 14:\n      case 15:\n        {\n          return this.parseObjectLike(this.state.type === 14 ? 17 : 16, false, true, refExpressionErrors);\n        }\n\n      case 13:\n        {\n          return this.parseObjectLike(16, false, false, refExpressionErrors);\n        }\n\n      case 67:\n        return this.parseFunctionOrFunctionSent();\n\n      case 32:\n        this.parseDecorators();\n\n      case 79:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case 76:\n        return this.parseNewOrNewTarget();\n\n      case 30:\n        return this.parseTemplate(false);\n\n      case 23:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(callee.start, ErrorMessages.UnsupportedBind);\n          }\n        }\n\n      case 6:\n        {\n          this.raise(this.state.start, ErrorMessages.PrivateInExpectedIn, this.state.value);\n          return this.parsePrivateName();\n        }\n\n      case 38:\n        if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"hack\" && this.getPluginOption(\"pipelineOperator\", \"topicToken\") === \"%\") {\n          this.state.value = \"%\";\n          this.state.type = 53;\n          this.state.pos--;\n          this.state.end--;\n          this.state.endLoc.column--;\n        } else {\n          throw this.unexpected();\n        }\n\n      case 53:\n      case 33:\n        {\n          const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n          if (pipeProposal) {\n            node = this.startNode();\n            const start = this.state.start;\n            const tokenType = this.state.type;\n            this.next();\n            return this.finishTopicReference(node, start, pipeProposal, tokenType);\n          }\n        }\n\n      case 50:\n        {\n          if (this.state.value === \"<\") {\n            const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n\n            if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n              this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n            }\n          }\n        }\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  finishTopicReference(node, start, pipeProposal, tokenType) {\n    if (this.testTopicReferenceConfiguration(pipeProposal, start, tokenType)) {\n      let nodeType;\n\n      if (pipeProposal === \"smart\") {\n        nodeType = \"PipelinePrimaryTopicReference\";\n      } else {\n        nodeType = \"TopicReference\";\n      }\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        if (pipeProposal === \"smart\") {\n          this.raise(start, ErrorMessages.PrimaryTopicNotAllowed);\n        } else {\n          this.raise(start, ErrorMessages.PipeTopicUnbound);\n        }\n      }\n\n      this.registerTopicReference();\n      return this.finishNode(node, nodeType);\n    } else {\n      throw this.raise(start, ErrorMessages.PipeTopicUnconfiguredToken, tokenLabelName(tokenType));\n    }\n  }\n\n  testTopicReferenceConfiguration(pipeProposal, start, tokenType) {\n    switch (pipeProposal) {\n      case \"hack\":\n        {\n          const pluginTopicToken = this.getPluginOption(\"pipelineOperator\", \"topicToken\");\n          return tokenLabelName(tokenType) === pluginTopicToken;\n        }\n\n      case \"smart\":\n        return tokenType === 33;\n\n      default:\n        throw this.raise(start, ErrorMessages.PipeTopicRequiresHackPipes);\n    }\n  }\n\n  parseAsyncArrowUnaryFunction(node) {\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.pos, ErrorMessages.LineTerminatorBeforeArrow);\n    }\n\n    this.expect(27);\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  parseDo(node, isAsync) {\n    this.expectPlugin(\"doExpressions\");\n\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n\n    node.async = isAsync;\n    this.next();\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    if (isAsync) {\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  parseSuper() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(18) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.SuperNotAllowed);\n    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.UnexpectedSuper);\n    }\n\n    if (!this.match(18) && !this.match(8) && !this.match(24)) {\n      this.raise(node.start, ErrorMessages.UnsupportedSuper);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parseMaybePrivateName(isPrivateNameAllowed) {\n    const isPrivate = this.match(6);\n\n    if (isPrivate) {\n      if (!isPrivateNameAllowed) {\n        this.raise(this.state.start + 1, ErrorMessages.UnexpectedPrivateField);\n      }\n\n      return this.parsePrivateName();\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parsePrivateName() {\n    const node = this.startNode();\n    const id = this.startNodeAt(this.state.start + 1, new Position(this.state.curLine, this.state.start + 1 - this.state.lineStart));\n    const name = this.state.value;\n    this.next();\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.prodParam.hasYield && this.match(24)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n      this.next();\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(node.property.start, ErrorMessages.UnsupportedMetaProperty, meta.name, propertyName);\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next();\n\n    if (this.isContextual(\"meta\")) {\n      if (!this.inModule) {\n        this.raise(id.start, SourceTypeModuleErrorMessages.ImportMetaOutsideModule);\n      }\n\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode(value, type, node) {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseLiteral(value, type) {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value) {\n    return this.parseLiteral(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value) {\n    return this.parseLiteral(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value) {\n    return this.parseLiteral(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value) {\n    return this.parseLiteral(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value) {\n    const node = this.parseLiteral(value.value, \"RegExpLiteral\");\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let val;\n    this.next();\n    this.expressionScope.enter(newArrowHeadScope());\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(19)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(20, refExpressionErrors.optionalParameters === -1 ? null : refExpressionErrors.optionalParameters);\n\n        if (this.match(19)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(29)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n        this.checkCommaAfterRest(41);\n        break;\n      } else {\n        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));\n      }\n    }\n\n    const innerEndPos = this.state.lastTokEnd;\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(19);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n\n    if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    this.toReferencedListDeep(exprList, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow(params) {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node) {\n    if (this.eat(27)) {\n      return node;\n    }\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    return node;\n  }\n\n  parseNewOrNewTarget() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(24)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(metaProp.start, ErrorMessages.UnexpectedNewTarget);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  parseNew(node) {\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, ErrorMessages.ImportCallNotNewExpression);\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.OptionalChainingNoNew);\n    } else if (this.eat(26)) {\n      this.raise(this.state.start, ErrorMessages.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node) {\n    if (this.eat(18)) {\n      const args = this.parseExprList(19);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  parseTemplateElement(isTagged) {\n    const elem = this.startNode();\n\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.start + 1, ErrorMessages.InvalidEscapeSequenceTemplate);\n      }\n    }\n\n    elem.value = {\n      raw: this.input.slice(this.state.start, this.state.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value\n    };\n    this.next();\n    elem.tail = this.match(30);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n\n    while (!curElt.tail) {\n      this.expect(31);\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.expect(16);\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  parseTemplateSubstitution() {\n    return this.parseExpression();\n  }\n\n  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(20);\n\n        if (this.match(close)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          break;\n        }\n      }\n\n      const prop = this.parsePropertyDefinition(isPattern, refExpressionErrors);\n\n      if (!isPattern) {\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (isRecord && !this.isObjectProperty(prop) && prop.type !== \"SpreadElement\") {\n        this.raise(prop.start, ErrorMessages.InvalidRecordProperty);\n      }\n\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.next();\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n\n    return this.finishNode(node, type);\n  }\n\n  maybeAsyncOrAccessorProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(8) || this.match(54));\n  }\n\n  parsePropertyDefinition(isPattern, refExpressionErrors) {\n    let decorators = [];\n\n    if (this.match(32)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, ErrorMessages.UnsupportedPropertyDecorator);\n      }\n\n      while (this.match(32)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(29)) {\n      if (decorators.length) this.unexpected();\n\n      if (isPattern) {\n        this.next();\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(125);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(54);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, false);\n\n    if (!isPattern && !isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(54);\n        this.parsePropertyName(prop, false);\n      }\n\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n\n        if (this.match(54)) {\n          isGenerator = true;\n          this.raise(this.state.pos, ErrorMessages.AccessorIsGenerator, keyName);\n          this.next();\n        }\n\n        this.parsePropertyName(prop, false);\n      }\n    }\n\n    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.params;\n  }\n\n  checkGetterSetterParams(method) {\n    var _params;\n\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const start = method.start;\n\n    if (params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (method.kind === \"set\" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === \"RestElement\") {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    if (isAccessor) {\n      this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(18)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    prop.shorthand = false;\n\n    if (this.eat(22)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));\n      } else if (this.match(35) && refExpressionErrors) {\n        if (refExpressionErrors.shorthandAssign === -1) {\n          refExpressionErrors.shorthandAssign = this.state.start;\n        }\n\n        prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n    if (!node) this.unexpected();\n    return node;\n  }\n\n  parsePropertyName(prop, isPrivateNameAllowed) {\n    if (this.eat(8)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(11);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      const type = this.state.type;\n      prop.key = type === 0 || type === 4 || type === 1 || type === 2 ? this.parseExprAtom() : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n      if (type !== 6) {\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor;\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    return node;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n  }\n\n  parseArrowExpression(node, params, isAsync, trailingCommaPos) {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n\n    if (!this.match(8) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(node, params, trailingCommaPos) {\n    node.params = this.toAssignableList(params, trailingCommaPos, false);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    const isExpression = allowExpression && !this.match(13);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\n        const nonSimple = !this.isSimpleParamList(node.params);\n\n        if (hasStrictModeDirective && nonSimple) {\n          const errorPos = (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.end : node.start;\n          this.raise(errorPos, ErrorMessages.IllegalLanguageModeDirective);\n        }\n\n        const strictModeChanged = !oldStrict && this.state.strict;\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n\n        if (this.state.strict && node.id) {\n          this.checkLVal(node.id, \"function name\", BIND_OUTSIDE, undefined, undefined, strictModeChanged);\n        }\n      });\n      this.prodParam.exit();\n      this.expressionScope.exit();\n      this.state.labels = oldLabels;\n    }\n  }\n\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n\n    return true;\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {\n    const checkClashes = new Set();\n\n    for (const param of node.params) {\n      this.checkLVal(param, \"function parameter list\", BIND_VAR, allowDuplicates ? null : checkClashes, undefined, strictModeChanged);\n    }\n  }\n\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(20);\n\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n\n    return elts;\n  }\n\n  parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {\n    let elt;\n\n    if (this.match(20)) {\n      if (!allowEmpty) {\n        this.raise(this.state.pos, ErrorMessages.UnexpectedToken, \",\");\n      }\n\n      elt = null;\n    } else if (this.match(29)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartPos, spreadNodeStartLoc);\n    } else if (this.match(25)) {\n      this.expectPlugin(\"partialApplication\");\n\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, ErrorMessages.UnexpectedArgumentPlaceholder);\n      }\n\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);\n    }\n\n    return elt;\n  }\n\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos, liberal) {\n    let name;\n    const {\n      start,\n      type\n    } = this.state;\n\n    if (type === 5) {\n      name = this.state.value;\n    } else if (tokenIsKeyword(type)) {\n      name = tokenLabelName(type);\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      this.state.type = 5;\n    } else {\n      this.checkReservedWord(name, start, tokenIsKeyword(type), false);\n    }\n\n    this.next();\n    return name;\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (word.length > 10) {\n      return;\n    }\n\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(startLoc, ErrorMessages.YieldBindingIdentifier);\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifier);\n        return;\n      } else if (this.scope.inStaticBlock) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifierInStaticBlock);\n        return;\n      } else {\n        this.expressionScope.recordAsyncArrowParametersError(startLoc, ErrorMessages.AwaitBindingIdentifier);\n      }\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(startLoc, ErrorMessages.ArgumentsInClass);\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedReservedWord, word);\n    }\n  }\n\n  isAwaitAllowed() {\n    if (this.prodParam.hasAwait) return true;\n\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n\n    return false;\n  }\n\n  parseAwait(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.AwaitExpressionFormalParameter);\n\n    if (this.eat(54)) {\n      this.raise(node.start, ErrorMessages.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait() {\n    return this.hasPrecedingLineBreak() || this.match(52) || this.match(18) || this.match(8) || this.match(30) || this.match(3) || this.match(55) || this.hasPlugin(\"v8intrinsic\") && this.match(53);\n  }\n\n  parseYield() {\n    const node = this.startNode();\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.YieldInParameter);\n    this.next();\n    let delegating = false;\n    let argument = null;\n\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(54);\n\n      switch (this.state.type) {\n        case 21:\n        case 7:\n        case 16:\n        case 19:\n        case 11:\n        case 17:\n        case 22:\n        case 20:\n          if (!delegating) break;\n\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  checkPipelineAtInfixOperator(left, leftStartPos) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(leftStartPos, ErrorMessages.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  checkHackPipeBodyEarlyErrors(startPos) {\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(startPos, ErrorMessages.PipeTopicUnused);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpr, startPos, startLoc) {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n\n    if (this.isSimpleReference(childExpr)) {\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      this.checkSmartPipeTopicBodyEarlyErrors(startPos);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n\n      case \"Identifier\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  checkSmartPipeTopicBodyEarlyErrors(startPos) {\n    if (this.match(27)) {\n      throw this.raise(this.state.start, ErrorMessages.PipelineBodyNoArrow);\n    } else if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(startPos, ErrorMessages.PipelineTopicUnused);\n    }\n  }\n\n  withTopicBindingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSmartMixTopicForbiddingContext(callback) {\n    const proposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (proposal === \"smart\") {\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        maxNumOfResolvableTopics: 0,\n        maxTopicIndex: null\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  disallowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n\n  parseFSharpPipelineBody(prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, prec);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n\n  parseModuleExpression() {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode();\n    this.next();\n    this.eat(13);\n    const revertScopes = this.initializeScopes(true);\n    this.enterInitialScopes();\n    const program = this.startNode();\n\n    try {\n      node.body = this.parseProgram(program, 16, \"module\");\n    } finally {\n      revertScopes();\n    }\n\n    this.eat(16);\n    return this.finishNode(node, \"ModuleExpression\");\n  }\n\n}\n\nconst loopLabel = {\n  kind: \"loop\"\n},\n      switchLabel = {\n  kind: \"switch\"\n};\nconst FUNC_NO_FLAGS = 0b000,\n      FUNC_STATEMENT = 0b001,\n      FUNC_HANGING_STATEMENT = 0b010,\n      FUNC_NULLABLE_ID = 0b100;\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\nfunction babel7CompatTokens(tokens) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const {\n      type\n    } = token;\n\n    if (type === 6) {\n      {\n        const {\n          loc,\n          start,\n          value,\n          end\n        } = token;\n        const hashEndPos = start + 1;\n        const hashEndLoc = new Position(loc.start.line, loc.start.column + 1);\n        tokens.splice(i, 1, new Token({\n          type: getExportedToken(33),\n          value: \"#\",\n          start: start,\n          end: hashEndPos,\n          startLoc: loc.start,\n          endLoc: hashEndLoc\n        }), new Token({\n          type: getExportedToken(5),\n          value: value,\n          start: hashEndPos,\n          end: end,\n          startLoc: hashEndLoc,\n          endLoc: loc.end\n        }));\n        i++;\n        continue;\n      }\n    }\n\n    if (typeof type === \"number\") {\n      token.type = getExportedToken(type);\n    }\n  }\n\n  return tokens;\n}\n\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n    if (this.options.tokens) file.tokens = babel7CompatTokens(this.tokens);\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(program, end = 7, sourceType = this.options.sourceType) {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n      for (const [name] of Array.from(this.scope.undefinedExports)) {\n        const pos = this.scope.undefinedExports.get(name);\n        this.raise(pos, ErrorMessages.ModuleExportUndefined, name);\n      }\n    }\n\n    return this.finishNode(program, \"Program\");\n  }\n\n  stmtToDirective(stmt) {\n    const directive = stmt;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n    const directiveLiteral = directive.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    directiveLiteral.type = \"DirectiveLiteral\";\n    return directive;\n  }\n\n  parseInterpreterDirective() {\n    if (!this.match(34)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context) {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    return this.isLetKeyword(context);\n  }\n\n  isLetKeyword(context) {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n\n    if (nextCh === 92 || nextCh === 91) {\n      return true;\n    }\n\n    if (context) return false;\n    if (nextCh === 123) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n\n      if (keywordRelationalOperator.test(this.input)) {\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n\n        if (!isIdentifierChar(endCh) && endCh !== 92) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.match(32)) {\n      this.parseDecorators(true);\n    }\n\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context, topLevel) {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = 73;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case 59:\n        return this.parseBreakContinueStatement(node, true);\n\n      case 62:\n        return this.parseBreakContinueStatement(node, false);\n\n      case 63:\n        return this.parseDebuggerStatement(node);\n\n      case 89:\n        return this.parseDoStatement(node);\n\n      case 90:\n        return this.parseForStatement(node);\n\n      case 67:\n        if (this.lookaheadCharCode() === 46) break;\n\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, ErrorMessages.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, ErrorMessages.SloppyFunction);\n          }\n        }\n\n        return this.parseFunctionStatement(node, false, !context);\n\n      case 79:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case 68:\n        return this.parseIfStatement(node);\n\n      case 69:\n        return this.parseReturnStatement(node);\n\n      case 70:\n        return this.parseSwitchStatement(node);\n\n      case 71:\n        return this.parseThrowStatement(node);\n\n      case 72:\n        return this.parseTryStatement(node);\n\n      case 74:\n      case 73:\n        kind = kind || this.state.value;\n\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, ErrorMessages.UnexpectedLexicalDeclaration);\n        }\n\n        return this.parseVarStatement(node, kind);\n\n      case 91:\n        return this.parseWhileStatement(node);\n\n      case 75:\n        return this.parseWithStatement(node);\n\n      case 13:\n        return this.parseBlock();\n\n      case 21:\n        return this.parseEmptyStatement(node);\n\n      case 82:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n            break;\n          }\n        }\n\n      case 81:\n        {\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(this.state.start, ErrorMessages.UnexpectedImportExport);\n          }\n\n          this.next();\n          let result;\n\n          if (starttype === 82) {\n            result = this.parseImport(node);\n\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node);\n\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n\n          this.assertModuleNodeAllowed(node);\n          return result;\n        }\n\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (context) {\n              this.raise(this.state.start, ErrorMessages.AsyncFunctionInSingleStatementContext);\n            }\n\n            this.next();\n            return this.parseFunctionStatement(node, true, !context);\n          }\n        }\n    }\n\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (starttype === 5 && expr.type === \"Identifier\" && this.eat(22)) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(node.start, SourceTypeModuleErrorMessages.ImportOutsideModule);\n    }\n  }\n\n  takeDecorators(node) {\n    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator() {\n    return this.match(79);\n  }\n\n  parseDecorators(allowExport) {\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    while (this.match(32)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(81)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, ErrorMessages.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      this.state.decoratorStack.push([]);\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr;\n\n      if (this.eat(18)) {\n        expr = this.parseExpression();\n        this.expect(19);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(24)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(18)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(19, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(node, isBreak) {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n\n  verifyBreakContinue(node, isBreak) {\n    let i;\n\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n\n    if (i === this.state.labels.length) {\n      this.raise(node.start, ErrorMessages.IllegalBreakContinue, isBreak ? \"break\" : \"continue\");\n    }\n  }\n\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression() {\n    this.expect(18);\n    const val = this.parseExpression();\n    this.expect(19);\n    return val;\n  }\n\n  parseDoStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"do\"));\n    this.state.labels.pop();\n    this.expect(91);\n    node.test = this.parseHeaderExpression();\n    this.eat(21);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = -1;\n\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(18);\n\n    if (this.match(21)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(\"let\");\n    const isLet = startsWithLet && this.isLetKeyword();\n\n    if (this.match(73) || this.match(74) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if ((this.match(57) || this.isContextual(\"of\")) && init.declarations.length === 1) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n\n    const startsWithUnescapedName = this.match(5) && !this.state.containsEsc;\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(\"of\");\n\n    if (isForOf) {\n      if (startsWithLet) {\n        this.raise(init.start, ErrorMessages.ForOfLet);\n      } else if (awaitAt === -1 && startsWithUnescapedName && init.type === \"Identifier\" && init.name === \"async\") {\n        this.raise(init.start, ErrorMessages.ForOfAsync);\n      }\n    }\n\n    if (isForOf || this.match(57)) {\n      this.toAssignable(init, true);\n      const description = isForOf ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n  }\n\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(65) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, ErrorMessages.IllegalReturn);\n    }\n\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(13);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n    let cur;\n\n    for (let sawDefault; !this.match(16);) {\n      if (this.match(60) || this.match(64)) {\n        const isCase = this.match(60);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(this.state.lastTokStart, ErrorMessages.MultipleDefaultsInSwitch);\n          }\n\n          sawDefault = true;\n          cur.test = null;\n        }\n\n        this.expect(22);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node) {\n    this.next();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.NewlineAfterThrow);\n    }\n\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam() {\n    const param = this.parseBindingAtom();\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n    return param;\n  }\n\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(61)) {\n      const clause = this.startNode();\n      this.next();\n\n      if (this.match(18)) {\n        this.expect(18);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(19);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(66) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, ErrorMessages.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"while\"));\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(this.state.start, ErrorMessages.StrictWith);\n    }\n\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"with\"));\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(node, maybeName, expr, context) {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(expr.start, ErrorMessages.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type) ? \"loop\" : this.match(70) ? \"switch\" : null;\n\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {\n    const node = this.startNode();\n\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n\n    this.expect(13);\n\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n\n    this.parseBlockBody(node, allowDirectives, false, 16, afterBlockParse);\n\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n  }\n\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n\n        parsedNonDirective = true;\n        this.state.strictErrors.clear();\n      }\n\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  parseFor(node, init) {\n    node.init = init;\n    this.semicolon(false);\n    node.test = this.match(21) ? null : this.parseExpression();\n    this.semicolon(false);\n    node.update = this.match(19) ? null : this.parseExpression();\n    this.expect(19);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(57);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(init.start, ErrorMessages.ForInOfLoopInitializer, isForIn ? \"for-in\" : \"for-of\");\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, ErrorMessages.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n    this.expect(19);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  parseVar(node, isFor, kind) {\n    const declarations = node.declarations = [];\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n\n      if (this.eat(35)) {\n        decl.init = isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n      } else {\n        if (kind === \"const\" && !(this.match(57) || this.isContextual(\"of\"))) {\n          if (!isTypescript) {\n            this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Const declarations\");\n          }\n        } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(57) || this.isContextual(\"of\")))) {\n          this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Complex binding patterns\");\n        }\n\n        decl.init = null;\n      }\n\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(20)) break;\n    }\n\n    return node;\n  }\n\n  parseVarId(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, \"variable declaration\", kind === \"var\" ? BIND_VAR : BIND_LEXICAL, undefined, kind !== \"var\");\n  }\n\n  parseFunction(node, statement = FUNC_NO_FLAGS, isAsync = false) {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n    this.initFunction(node, isAsync);\n\n    if (this.match(54) && isHangingStatement) {\n      this.raise(this.state.start, ErrorMessages.GeneratorInSingleStatementContext);\n    }\n\n    node.generator = this.eat(54);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, false);\n    this.withSmartMixTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId) {\n    return requireId || this.match(5) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    this.expect(18);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(19, 41, false, allowModifiers);\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n\n  isClassProperty() {\n    return this.match(35) || this.match(21) || this.match(16);\n  }\n\n  isClassMethod() {\n    return this.match(18);\n  }\n\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n\n  parseClassBody(hadSuperClass, oldStrict) {\n    this.classScope.enter();\n    const state = {\n      hadConstructor: false,\n      hadSuperClass\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(13);\n    this.withSmartMixTopicForbiddingContext(() => {\n      while (!this.match(16)) {\n        if (this.eat(21)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, ErrorMessages.DecoratorSemicolon);\n          }\n\n          continue;\n        }\n\n        if (this.match(32)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(member.start, ErrorMessages.DecoratorConstructor);\n        }\n      }\n    });\n    this.state.strict = oldStrict;\n    this.next();\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, ErrorMessages.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMemberFromModifier(classBody, member) {\n    const key = this.parseIdentifier(true);\n\n    if (this.isClassMethod()) {\n      const method = member;\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(classBody, method, false, false, false, false);\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop = member;\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(classBody, member, state) {\n    const isStatic = this.isContextual(\"static\");\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      if (this.eat(13)) {\n        this.parseClassStaticBlock(classBody, member);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n\n    if (this.eat(54)) {\n      method.kind = \"method\";\n      const isPrivateName = this.match(6);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n\n    const isContextual = this.match(5) && !this.state.containsEsc;\n    const isPrivate = this.match(6);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStart = this.state.start;\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, ErrorMessages.DuplicateConstructor);\n        }\n\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(key.start, ErrorMessages.OverrideOnConstructor);\n        }\n\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isContextual && key.name === \"async\" && !this.isLineTerminator()) {\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(54);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      const isPrivate = this.match(6);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if (isContextual && (key.name === \"get\" || key.name === \"set\") && !(this.match(54) && this.isLineTerminator())) {\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      const isPrivate = this.match(6);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAccessor);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassElementName(member) {\n    const {\n      type,\n      value,\n      start\n    } = this.state;\n\n    if ((type === 5 || type === 4) && member.static && value === \"prototype\") {\n      this.raise(start, ErrorMessages.StaticPrototype);\n    }\n\n    if (type === 6 && value === \"constructor\") {\n      this.raise(start, ErrorMessages.ConstructorClassPrivateField);\n    }\n\n    return this.parsePropertyName(member, true);\n  }\n\n  parseClassStaticBlock(classBody, member) {\n    var _member$decorators;\n\n    this.expectPlugin(\"classStaticBlock\", member.start);\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    this.prodParam.enter(PARAM);\n    const body = member.body = [];\n    this.parseBlockOrModuleBlockBody(body, undefined, false, 16);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode(member, \"StaticBlock\"));\n\n    if ((_member$decorators = member.decorators) != null && _member$decorators.length) {\n      this.raise(member.start, ErrorMessages.DecoratorStaticBlock);\n    }\n  }\n\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n      this.raise(prop.key.start, ErrorMessages.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(classBody, prop) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.start);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n    classBody.body.push(node);\n    const kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.start);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {}\n\n  parseClassPrivateProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseInitializer(node) {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(35) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(node, isStatement, optionalId, bindingType = BIND_CLASS) {\n    if (this.match(5)) {\n      node.id = this.parseIdentifier();\n\n      if (isStatement) {\n        this.checkLVal(node.id, \"class name\", bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, ErrorMessages.MissingClassName);\n      }\n    }\n  }\n\n  parseClassSuper(node) {\n    node.superClass = this.eat(80) ? this.parseExprSubscripts() : null;\n  }\n\n  parseExport(node) {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(20);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(20));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n      throw this.unexpected(null, 13);\n    }\n\n    let hasDeclaration;\n\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(64)) {\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, 13);\n  }\n\n  eatExportStar(node) {\n    return this.eat(54);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(13)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n      node.source = null;\n      node.declaration = null;\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n\n    return false;\n  }\n\n  isAsyncFunction() {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(67) || isAsync) {\n      this.next();\n\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n    } else if (this.match(79)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(32)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorBeforeExport);\n      }\n\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(74) || this.match(73) || this.isLet()) {\n      throw this.raise(this.state.start, ErrorMessages.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssignAllowIn();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  parseExportDeclaration(node) {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(5)) {\n      const value = this.state.value;\n\n      if (value === \"async\" && !this.state.containsEsc || value === \"let\") {\n        return false;\n      }\n\n      if ((value === \"type\" || value === \"interface\") && !this.state.containsEsc) {\n        const l = this.lookahead();\n\n        if (l.type === 5 && l.value !== \"from\" || l.type === 13) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(64)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n\n    if (this.input.charCodeAt(next) === 44 || this.match(5) && hasFrom) {\n      return true;\n    }\n\n    if (this.match(64) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n      return nextAfterFrom === 34 || nextAfterFrom === 39;\n    }\n\n    return false;\n  }\n\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration() {\n    const {\n      type\n    } = this.state;\n\n    if (type === 32) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, ErrorMessages.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return type === 73 || type === 74 || type === 67 || type === 79 || this.isLet() || this.isAsyncFunction();\n  }\n\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          var _declaration$extra;\n\n          const declaration = node.declaration;\n\n          if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {\n            this.raise(declaration.start, ErrorMessages.ExportDefaultFromAsIdentifier);\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        for (const specifier of node.specifiers) {\n          const {\n            exported\n          } = specifier;\n          const exportedName = exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n\n          if (!isFrom && specifier.local) {\n            const {\n              local\n            } = specifier;\n\n            if (local.type !== \"Identifier\") {\n              this.raise(specifier.start, ErrorMessages.ExportBindingIsString, local.value, exportedName);\n            } else {\n              this.checkReservedWord(local.name, local.start, true, false);\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (currentContextDecorators.length) {\n      throw this.raise(node.start, ErrorMessages.UnsupportedDecoratorExport);\n    }\n  }\n\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(node, name) {\n    if (this.exportedIdentifiers.has(name)) {\n      this.raise(node.start, name === \"default\" ? ErrorMessages.DuplicateDefaultExport : ErrorMessages.DuplicateExport, name);\n    }\n\n    this.exportedIdentifiers.add(name);\n  }\n\n  parseExportSpecifiers() {\n    const nodes = [];\n    let first = true;\n    this.expect(13);\n\n    while (!this.eat(16)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(20);\n        if (this.eat(16)) break;\n      }\n\n      const node = this.startNode();\n      const isString = this.match(4);\n      const local = this.parseModuleExportName();\n      node.local = local;\n\n      if (this.eatContextual(\"as\")) {\n        node.exported = this.parseModuleExportName();\n      } else if (isString) {\n        node.exported = cloneStringLiteral(local);\n      } else {\n        node.exported = cloneIdentifier(local);\n      }\n\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  parseModuleExportName() {\n    if (this.match(4)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n\n      if (surrogate) {\n        this.raise(result.start, ErrorMessages.ModuleExportNameHasLoneSurrogate, surrogate[0].charCodeAt(0).toString(16));\n      }\n\n      return result;\n    }\n\n    return this.parseIdentifier(true);\n  }\n\n  parseImport(node) {\n    node.specifiers = [];\n\n    if (!this.match(4)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(20);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n\n    node.source = this.parseImportSource();\n    const assertions = this.maybeParseImportAssertions();\n\n    if (assertions) {\n      node.assertions = assertions;\n    } else {\n      const attributes = this.maybeParseModuleAttributes();\n\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    if (!this.match(4)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  shouldParseDefaultImport(node) {\n    return this.match(5);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  parseAssertEntries() {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(16)) {\n        break;\n      }\n\n      const node = this.startNode();\n      const keyName = this.state.value;\n\n      if (attrNames.has(keyName)) {\n        this.raise(this.state.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, keyName);\n      }\n\n      attrNames.add(keyName);\n\n      if (this.match(4)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n\n      this.expect(22);\n\n      if (!this.match(4)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(20));\n\n    return attrs;\n  }\n\n  maybeParseModuleAttributes() {\n    if (this.match(75) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n\n    const attrs = [];\n    const attributes = new Set();\n\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, node.key.name);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, node.key.name);\n      }\n\n      attributes.add(node.key.name);\n      this.expect(22);\n\n      if (!this.match(4)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(20));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    if (this.isContextual(\"assert\") && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n\n    this.eat(13);\n    const attrs = this.parseAssertEntries();\n    this.eat(16);\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    if (this.shouldParseDefaultImport(node)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(54)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(13);\n\n    while (!this.eat(16)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(22)) {\n          throw this.raise(this.state.start, ErrorMessages.DestructureNamedImport);\n        }\n\n        this.expect(20);\n        if (this.eat(16)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    const importedIsString = this.match(4);\n    specifier.imported = this.parseModuleExportName();\n\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const {\n        imported\n      } = specifier;\n\n      if (importedIsString) {\n        throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, imported.value);\n      }\n\n      this.checkReservedWord(imported.name, specifier.start, true, true);\n      specifier.local = cloneIdentifier(imported);\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n  isThisParam(param) {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n\n}\n\nclass Parser extends StatementParser {\n  constructor(options, input) {\n    options = getOptions(options);\n    super(options, input);\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n\n  parse() {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n\n}\n\nfunction pluginsMap(plugins) {\n  const pluginMap = new Map();\n\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n\n  return pluginMap;\n}\n\nfunction parse(input, options) {\n  var _options;\n\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(internalTokenTypes) {\n  const tokenTypes = {};\n\n  for (const typeName of Object.keys(internalTokenTypes)) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n\n  return tokenTypes;\n}\n\nconst tokTypes = generateExportedTokenTypes(tt);\n\nfunction getParser(options, input) {\n  let cls = Parser;\n\n  if (options != null && options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = tokTypes;\n//# sourceMappingURL=index.js.map\n"]},"metadata":{},"sourceType":"script"}