{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AnyTypeAnnotation = AnyTypeAnnotation;\nexports.ArrayTypeAnnotation = ArrayTypeAnnotation;\nexports.BooleanTypeAnnotation = BooleanTypeAnnotation;\nexports.BooleanLiteralTypeAnnotation = BooleanLiteralTypeAnnotation;\nexports.NullLiteralTypeAnnotation = NullLiteralTypeAnnotation;\nexports.DeclareClass = DeclareClass;\nexports.DeclareFunction = DeclareFunction;\nexports.InferredPredicate = InferredPredicate;\nexports.DeclaredPredicate = DeclaredPredicate;\nexports.DeclareInterface = DeclareInterface;\nexports.DeclareModule = DeclareModule;\nexports.DeclareModuleExports = DeclareModuleExports;\nexports.DeclareTypeAlias = DeclareTypeAlias;\nexports.DeclareOpaqueType = DeclareOpaqueType;\nexports.DeclareVariable = DeclareVariable;\nexports.DeclareExportDeclaration = DeclareExportDeclaration;\nexports.DeclareExportAllDeclaration = DeclareExportAllDeclaration;\nexports.EnumDeclaration = EnumDeclaration;\nexports.EnumBooleanBody = EnumBooleanBody;\nexports.EnumNumberBody = EnumNumberBody;\nexports.EnumStringBody = EnumStringBody;\nexports.EnumSymbolBody = EnumSymbolBody;\nexports.EnumDefaultedMember = EnumDefaultedMember;\nexports.EnumBooleanMember = EnumBooleanMember;\nexports.EnumNumberMember = EnumNumberMember;\nexports.EnumStringMember = EnumStringMember;\nexports.ExistsTypeAnnotation = ExistsTypeAnnotation;\nexports.FunctionTypeAnnotation = FunctionTypeAnnotation;\nexports.FunctionTypeParam = FunctionTypeParam;\nexports.GenericTypeAnnotation = exports.ClassImplements = exports.InterfaceExtends = InterfaceExtends;\nexports._interfaceish = _interfaceish;\nexports._variance = _variance;\nexports.InterfaceDeclaration = InterfaceDeclaration;\nexports.InterfaceTypeAnnotation = InterfaceTypeAnnotation;\nexports.IntersectionTypeAnnotation = IntersectionTypeAnnotation;\nexports.MixedTypeAnnotation = MixedTypeAnnotation;\nexports.EmptyTypeAnnotation = EmptyTypeAnnotation;\nexports.NullableTypeAnnotation = NullableTypeAnnotation;\nexports.NumberTypeAnnotation = NumberTypeAnnotation;\nexports.StringTypeAnnotation = StringTypeAnnotation;\nexports.ThisTypeAnnotation = ThisTypeAnnotation;\nexports.TupleTypeAnnotation = TupleTypeAnnotation;\nexports.TypeofTypeAnnotation = TypeofTypeAnnotation;\nexports.TypeAlias = TypeAlias;\nexports.TypeAnnotation = TypeAnnotation;\nexports.TypeParameterDeclaration = exports.TypeParameterInstantiation = TypeParameterInstantiation;\nexports.TypeParameter = TypeParameter;\nexports.OpaqueType = OpaqueType;\nexports.ObjectTypeAnnotation = ObjectTypeAnnotation;\nexports.ObjectTypeInternalSlot = ObjectTypeInternalSlot;\nexports.ObjectTypeCallProperty = ObjectTypeCallProperty;\nexports.ObjectTypeIndexer = ObjectTypeIndexer;\nexports.ObjectTypeProperty = ObjectTypeProperty;\nexports.ObjectTypeSpreadProperty = ObjectTypeSpreadProperty;\nexports.QualifiedTypeIdentifier = QualifiedTypeIdentifier;\nexports.SymbolTypeAnnotation = SymbolTypeAnnotation;\nexports.UnionTypeAnnotation = UnionTypeAnnotation;\nexports.TypeCastExpression = TypeCastExpression;\nexports.Variance = Variance;\nexports.VoidTypeAnnotation = VoidTypeAnnotation;\nexports.IndexedAccessType = IndexedAccessType;\nexports.OptionalIndexedAccessType = OptionalIndexedAccessType;\nObject.defineProperty(exports, \"NumberLiteralTypeAnnotation\", {\n  enumerable: true,\n  get: function () {\n    return _types2.NumericLiteral;\n  }\n});\nObject.defineProperty(exports, \"StringLiteralTypeAnnotation\", {\n  enumerable: true,\n  get: function () {\n    return _types2.StringLiteral;\n  }\n});\n\nvar _t = require(\"@babel/types\");\n\nvar _modules = require(\"./modules\");\n\nvar _types2 = require(\"./types\");\n\nconst {\n  isDeclareExportDeclaration,\n  isStatement\n} = _t;\n\nfunction AnyTypeAnnotation() {\n  this.word(\"any\");\n}\n\n_c = AnyTypeAnnotation;\n\nfunction ArrayTypeAnnotation(node) {\n  this.print(node.elementType, node);\n  this.token(\"[\");\n  this.token(\"]\");\n}\n\n_c2 = ArrayTypeAnnotation;\n\nfunction BooleanTypeAnnotation() {\n  this.word(\"boolean\");\n}\n\n_c3 = BooleanTypeAnnotation;\n\nfunction BooleanLiteralTypeAnnotation(node) {\n  this.word(node.value ? \"true\" : \"false\");\n}\n\n_c4 = BooleanLiteralTypeAnnotation;\n\nfunction NullLiteralTypeAnnotation() {\n  this.word(\"null\");\n}\n\n_c5 = NullLiteralTypeAnnotation;\n\nfunction DeclareClass(node, parent) {\n  if (!isDeclareExportDeclaration(parent)) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this.word(\"class\");\n  this.space();\n\n  this._interfaceish(node);\n}\n\n_c6 = DeclareClass;\n\nfunction DeclareFunction(node, parent) {\n  if (!isDeclareExportDeclaration(parent)) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this.word(\"function\");\n  this.space();\n  this.print(node.id, node);\n  this.print(node.id.typeAnnotation.typeAnnotation, node);\n\n  if (node.predicate) {\n    this.space();\n    this.print(node.predicate, node);\n  }\n\n  this.semicolon();\n}\n\n_c7 = DeclareFunction;\n\nfunction InferredPredicate() {\n  this.token(\"%\");\n  this.word(\"checks\");\n}\n\n_c8 = InferredPredicate;\n\nfunction DeclaredPredicate(node) {\n  this.token(\"%\");\n  this.word(\"checks\");\n  this.token(\"(\");\n  this.print(node.value, node);\n  this.token(\")\");\n}\n\n_c9 = DeclaredPredicate;\n\nfunction DeclareInterface(node) {\n  this.word(\"declare\");\n  this.space();\n  this.InterfaceDeclaration(node);\n}\n\n_c10 = DeclareInterface;\n\nfunction DeclareModule(node) {\n  this.word(\"declare\");\n  this.space();\n  this.word(\"module\");\n  this.space();\n  this.print(node.id, node);\n  this.space();\n  this.print(node.body, node);\n}\n\n_c11 = DeclareModule;\n\nfunction DeclareModuleExports(node) {\n  this.word(\"declare\");\n  this.space();\n  this.word(\"module\");\n  this.token(\".\");\n  this.word(\"exports\");\n  this.print(node.typeAnnotation, node);\n}\n\n_c12 = DeclareModuleExports;\n\nfunction DeclareTypeAlias(node) {\n  this.word(\"declare\");\n  this.space();\n  this.TypeAlias(node);\n}\n\n_c13 = DeclareTypeAlias;\n\nfunction DeclareOpaqueType(node, parent) {\n  if (!isDeclareExportDeclaration(parent)) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this.OpaqueType(node);\n}\n\n_c14 = DeclareOpaqueType;\n\nfunction DeclareVariable(node, parent) {\n  if (!isDeclareExportDeclaration(parent)) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this.word(\"var\");\n  this.space();\n  this.print(node.id, node);\n  this.print(node.id.typeAnnotation, node);\n  this.semicolon();\n}\n\n_c15 = DeclareVariable;\n\nfunction DeclareExportDeclaration(node) {\n  this.word(\"declare\");\n  this.space();\n  this.word(\"export\");\n  this.space();\n\n  if (node.default) {\n    this.word(\"default\");\n    this.space();\n  }\n\n  FlowExportDeclaration.apply(this, arguments);\n}\n\n_c16 = DeclareExportDeclaration;\n\nfunction DeclareExportAllDeclaration() {\n  this.word(\"declare\");\n  this.space();\n\n  _modules.ExportAllDeclaration.apply(this, arguments);\n}\n\n_c17 = DeclareExportAllDeclaration;\n\nfunction EnumDeclaration(node) {\n  const {\n    id,\n    body\n  } = node;\n  this.word(\"enum\");\n  this.space();\n  this.print(id, node);\n  this.print(body, node);\n}\n\n_c18 = EnumDeclaration;\n\nfunction enumExplicitType(context, name, hasExplicitType) {\n  if (hasExplicitType) {\n    context.space();\n    context.word(\"of\");\n    context.space();\n    context.word(name);\n  }\n\n  context.space();\n}\n\nfunction enumBody(context, node) {\n  const {\n    members\n  } = node;\n  context.token(\"{\");\n  context.indent();\n  context.newline();\n\n  for (const member of members) {\n    context.print(member, node);\n    context.newline();\n  }\n\n  if (node.hasUnknownMembers) {\n    context.token(\"...\");\n    context.newline();\n  }\n\n  context.dedent();\n  context.token(\"}\");\n}\n\nfunction EnumBooleanBody(node) {\n  const {\n    explicitType\n  } = node;\n  enumExplicitType(this, \"boolean\", explicitType);\n  enumBody(this, node);\n}\n\n_c19 = EnumBooleanBody;\n\nfunction EnumNumberBody(node) {\n  const {\n    explicitType\n  } = node;\n  enumExplicitType(this, \"number\", explicitType);\n  enumBody(this, node);\n}\n\n_c20 = EnumNumberBody;\n\nfunction EnumStringBody(node) {\n  const {\n    explicitType\n  } = node;\n  enumExplicitType(this, \"string\", explicitType);\n  enumBody(this, node);\n}\n\n_c21 = EnumStringBody;\n\nfunction EnumSymbolBody(node) {\n  enumExplicitType(this, \"symbol\", true);\n  enumBody(this, node);\n}\n\n_c22 = EnumSymbolBody;\n\nfunction EnumDefaultedMember(node) {\n  const {\n    id\n  } = node;\n  this.print(id, node);\n  this.token(\",\");\n}\n\n_c23 = EnumDefaultedMember;\n\nfunction enumInitializedMember(context, node) {\n  const {\n    id,\n    init\n  } = node;\n  context.print(id, node);\n  context.space();\n  context.token(\"=\");\n  context.space();\n  context.print(init, node);\n  context.token(\",\");\n}\n\nfunction EnumBooleanMember(node) {\n  enumInitializedMember(this, node);\n}\n\n_c24 = EnumBooleanMember;\n\nfunction EnumNumberMember(node) {\n  enumInitializedMember(this, node);\n}\n\n_c25 = EnumNumberMember;\n\nfunction EnumStringMember(node) {\n  enumInitializedMember(this, node);\n}\n\n_c26 = EnumStringMember;\n\nfunction FlowExportDeclaration(node) {\n  if (node.declaration) {\n    const declar = node.declaration;\n    this.print(declar, node);\n    if (!isStatement(declar)) this.semicolon();\n  } else {\n    this.token(\"{\");\n\n    if (node.specifiers.length) {\n      this.space();\n      this.printList(node.specifiers, node);\n      this.space();\n    }\n\n    this.token(\"}\");\n\n    if (node.source) {\n      this.space();\n      this.word(\"from\");\n      this.space();\n      this.print(node.source, node);\n    }\n\n    this.semicolon();\n  }\n}\n\n_c27 = FlowExportDeclaration;\n\nfunction ExistsTypeAnnotation() {\n  this.token(\"*\");\n}\n\n_c28 = ExistsTypeAnnotation;\n\nfunction FunctionTypeAnnotation(node, parent) {\n  this.print(node.typeParameters, node);\n  this.token(\"(\");\n\n  if (node.this) {\n    this.word(\"this\");\n    this.token(\":\");\n    this.space();\n    this.print(node.this.typeAnnotation, node);\n\n    if (node.params.length || node.rest) {\n      this.token(\",\");\n      this.space();\n    }\n  }\n\n  this.printList(node.params, node);\n\n  if (node.rest) {\n    if (node.params.length) {\n      this.token(\",\");\n      this.space();\n    }\n\n    this.token(\"...\");\n    this.print(node.rest, node);\n  }\n\n  this.token(\")\");\n\n  if (parent.type === \"ObjectTypeCallProperty\" || parent.type === \"DeclareFunction\" || parent.type === \"ObjectTypeProperty\" && parent.method) {\n    this.token(\":\");\n  } else {\n    this.space();\n    this.token(\"=>\");\n  }\n\n  this.space();\n  this.print(node.returnType, node);\n}\n\n_c29 = FunctionTypeAnnotation;\n\nfunction FunctionTypeParam(node) {\n  this.print(node.name, node);\n  if (node.optional) this.token(\"?\");\n\n  if (node.name) {\n    this.token(\":\");\n    this.space();\n  }\n\n  this.print(node.typeAnnotation, node);\n}\n\n_c30 = FunctionTypeParam;\n\nfunction InterfaceExtends(node) {\n  this.print(node.id, node);\n  this.print(node.typeParameters, node);\n}\n\n_c31 = InterfaceExtends;\n\nfunction _interfaceish(node) {\n  var _node$extends;\n\n  this.print(node.id, node);\n  this.print(node.typeParameters, node);\n\n  if ((_node$extends = node.extends) != null && _node$extends.length) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.printList(node.extends, node);\n  }\n\n  if (node.mixins && node.mixins.length) {\n    this.space();\n    this.word(\"mixins\");\n    this.space();\n    this.printList(node.mixins, node);\n  }\n\n  if (node.implements && node.implements.length) {\n    this.space();\n    this.word(\"implements\");\n    this.space();\n    this.printList(node.implements, node);\n  }\n\n  this.space();\n  this.print(node.body, node);\n}\n\nfunction _variance(node) {\n  if (node.variance) {\n    if (node.variance.kind === \"plus\") {\n      this.token(\"+\");\n    } else if (node.variance.kind === \"minus\") {\n      this.token(\"-\");\n    }\n  }\n}\n\nfunction InterfaceDeclaration(node) {\n  this.word(\"interface\");\n  this.space();\n\n  this._interfaceish(node);\n}\n\n_c32 = InterfaceDeclaration;\n\nfunction andSeparator() {\n  this.space();\n  this.token(\"&\");\n  this.space();\n}\n\nfunction InterfaceTypeAnnotation(node) {\n  this.word(\"interface\");\n\n  if (node.extends && node.extends.length) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.printList(node.extends, node);\n  }\n\n  this.space();\n  this.print(node.body, node);\n}\n\n_c33 = InterfaceTypeAnnotation;\n\nfunction IntersectionTypeAnnotation(node) {\n  this.printJoin(node.types, node, {\n    separator: andSeparator\n  });\n}\n\n_c34 = IntersectionTypeAnnotation;\n\nfunction MixedTypeAnnotation() {\n  this.word(\"mixed\");\n}\n\n_c35 = MixedTypeAnnotation;\n\nfunction EmptyTypeAnnotation() {\n  this.word(\"empty\");\n}\n\n_c36 = EmptyTypeAnnotation;\n\nfunction NullableTypeAnnotation(node) {\n  this.token(\"?\");\n  this.print(node.typeAnnotation, node);\n}\n\n_c37 = NullableTypeAnnotation;\n\nfunction NumberTypeAnnotation() {\n  this.word(\"number\");\n}\n\n_c38 = NumberTypeAnnotation;\n\nfunction StringTypeAnnotation() {\n  this.word(\"string\");\n}\n\n_c39 = StringTypeAnnotation;\n\nfunction ThisTypeAnnotation() {\n  this.word(\"this\");\n}\n\n_c40 = ThisTypeAnnotation;\n\nfunction TupleTypeAnnotation(node) {\n  this.token(\"[\");\n  this.printList(node.types, node);\n  this.token(\"]\");\n}\n\n_c41 = TupleTypeAnnotation;\n\nfunction TypeofTypeAnnotation(node) {\n  this.word(\"typeof\");\n  this.space();\n  this.print(node.argument, node);\n}\n\n_c42 = TypeofTypeAnnotation;\n\nfunction TypeAlias(node) {\n  this.word(\"type\");\n  this.space();\n  this.print(node.id, node);\n  this.print(node.typeParameters, node);\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(node.right, node);\n  this.semicolon();\n}\n\n_c43 = TypeAlias;\n\nfunction TypeAnnotation(node) {\n  this.token(\":\");\n  this.space();\n  if (node.optional) this.token(\"?\");\n  this.print(node.typeAnnotation, node);\n}\n\n_c44 = TypeAnnotation;\n\nfunction TypeParameterInstantiation(node) {\n  this.token(\"<\");\n  this.printList(node.params, node, {});\n  this.token(\">\");\n}\n\n_c45 = TypeParameterInstantiation;\n\nfunction TypeParameter(node) {\n  this._variance(node);\n\n  this.word(node.name);\n\n  if (node.bound) {\n    this.print(node.bound, node);\n  }\n\n  if (node.default) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.default, node);\n  }\n}\n\n_c46 = TypeParameter;\n\nfunction OpaqueType(node) {\n  this.word(\"opaque\");\n  this.space();\n  this.word(\"type\");\n  this.space();\n  this.print(node.id, node);\n  this.print(node.typeParameters, node);\n\n  if (node.supertype) {\n    this.token(\":\");\n    this.space();\n    this.print(node.supertype, node);\n  }\n\n  if (node.impltype) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.impltype, node);\n  }\n\n  this.semicolon();\n}\n\n_c47 = OpaqueType;\n\nfunction ObjectTypeAnnotation(node) {\n  if (node.exact) {\n    this.token(\"{|\");\n  } else {\n    this.token(\"{\");\n  }\n\n  const props = [...node.properties, ...(node.callProperties || []), ...(node.indexers || []), ...(node.internalSlots || [])];\n\n  if (props.length) {\n    this.space();\n    this.printJoin(props, node, {\n      addNewlines(leading) {\n        if (leading && !props[0]) return 1;\n      },\n\n      indent: true,\n      statement: true,\n      iterator: () => {\n        if (props.length !== 1 || node.inexact) {\n          this.token(\",\");\n          this.space();\n        }\n      }\n    });\n    this.space();\n  }\n\n  if (node.inexact) {\n    this.indent();\n    this.token(\"...\");\n\n    if (props.length) {\n      this.newline();\n    }\n\n    this.dedent();\n  }\n\n  if (node.exact) {\n    this.token(\"|}\");\n  } else {\n    this.token(\"}\");\n  }\n}\n\n_c48 = ObjectTypeAnnotation;\n\nfunction ObjectTypeInternalSlot(node) {\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n\n  this.token(\"[\");\n  this.token(\"[\");\n  this.print(node.id, node);\n  this.token(\"]\");\n  this.token(\"]\");\n  if (node.optional) this.token(\"?\");\n\n  if (!node.method) {\n    this.token(\":\");\n    this.space();\n  }\n\n  this.print(node.value, node);\n}\n\n_c49 = ObjectTypeInternalSlot;\n\nfunction ObjectTypeCallProperty(node) {\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n\n  this.print(node.value, node);\n}\n\n_c50 = ObjectTypeCallProperty;\n\nfunction ObjectTypeIndexer(node) {\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n\n  this._variance(node);\n\n  this.token(\"[\");\n\n  if (node.id) {\n    this.print(node.id, node);\n    this.token(\":\");\n    this.space();\n  }\n\n  this.print(node.key, node);\n  this.token(\"]\");\n  this.token(\":\");\n  this.space();\n  this.print(node.value, node);\n}\n\n_c51 = ObjectTypeIndexer;\n\nfunction ObjectTypeProperty(node) {\n  if (node.proto) {\n    this.word(\"proto\");\n    this.space();\n  }\n\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n\n  if (node.kind === \"get\" || node.kind === \"set\") {\n    this.word(node.kind);\n    this.space();\n  }\n\n  this._variance(node);\n\n  this.print(node.key, node);\n  if (node.optional) this.token(\"?\");\n\n  if (!node.method) {\n    this.token(\":\");\n    this.space();\n  }\n\n  this.print(node.value, node);\n}\n\n_c52 = ObjectTypeProperty;\n\nfunction ObjectTypeSpreadProperty(node) {\n  this.token(\"...\");\n  this.print(node.argument, node);\n}\n\n_c53 = ObjectTypeSpreadProperty;\n\nfunction QualifiedTypeIdentifier(node) {\n  this.print(node.qualification, node);\n  this.token(\".\");\n  this.print(node.id, node);\n}\n\n_c54 = QualifiedTypeIdentifier;\n\nfunction SymbolTypeAnnotation() {\n  this.word(\"symbol\");\n}\n\n_c55 = SymbolTypeAnnotation;\n\nfunction orSeparator() {\n  this.space();\n  this.token(\"|\");\n  this.space();\n}\n\nfunction UnionTypeAnnotation(node) {\n  this.printJoin(node.types, node, {\n    separator: orSeparator\n  });\n}\n\n_c56 = UnionTypeAnnotation;\n\nfunction TypeCastExpression(node) {\n  this.token(\"(\");\n  this.print(node.expression, node);\n  this.print(node.typeAnnotation, node);\n  this.token(\")\");\n}\n\n_c57 = TypeCastExpression;\n\nfunction Variance(node) {\n  if (node.kind === \"plus\") {\n    this.token(\"+\");\n  } else {\n    this.token(\"-\");\n  }\n}\n\n_c58 = Variance;\n\nfunction VoidTypeAnnotation() {\n  this.word(\"void\");\n}\n\n_c59 = VoidTypeAnnotation;\n\nfunction IndexedAccessType(node) {\n  this.print(node.objectType, node);\n  this.token(\"[\");\n  this.print(node.indexType, node);\n  this.token(\"]\");\n}\n\n_c60 = IndexedAccessType;\n\nfunction OptionalIndexedAccessType(node) {\n  this.print(node.objectType, node);\n\n  if (node.optional) {\n    this.token(\"?.\");\n  }\n\n  this.token(\"[\");\n  this.print(node.indexType, node);\n  this.token(\"]\");\n}\n\n_c61 = OptionalIndexedAccessType;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20, _c21, _c22, _c23, _c24, _c25, _c26, _c27, _c28, _c29, _c30, _c31, _c32, _c33, _c34, _c35, _c36, _c37, _c38, _c39, _c40, _c41, _c42, _c43, _c44, _c45, _c46, _c47, _c48, _c49, _c50, _c51, _c52, _c53, _c54, _c55, _c56, _c57, _c58, _c59, _c60, _c61;\n\n$RefreshReg$(_c, \"AnyTypeAnnotation\");\n$RefreshReg$(_c2, \"ArrayTypeAnnotation\");\n$RefreshReg$(_c3, \"BooleanTypeAnnotation\");\n$RefreshReg$(_c4, \"BooleanLiteralTypeAnnotation\");\n$RefreshReg$(_c5, \"NullLiteralTypeAnnotation\");\n$RefreshReg$(_c6, \"DeclareClass\");\n$RefreshReg$(_c7, \"DeclareFunction\");\n$RefreshReg$(_c8, \"InferredPredicate\");\n$RefreshReg$(_c9, \"DeclaredPredicate\");\n$RefreshReg$(_c10, \"DeclareInterface\");\n$RefreshReg$(_c11, \"DeclareModule\");\n$RefreshReg$(_c12, \"DeclareModuleExports\");\n$RefreshReg$(_c13, \"DeclareTypeAlias\");\n$RefreshReg$(_c14, \"DeclareOpaqueType\");\n$RefreshReg$(_c15, \"DeclareVariable\");\n$RefreshReg$(_c16, \"DeclareExportDeclaration\");\n$RefreshReg$(_c17, \"DeclareExportAllDeclaration\");\n$RefreshReg$(_c18, \"EnumDeclaration\");\n$RefreshReg$(_c19, \"EnumBooleanBody\");\n$RefreshReg$(_c20, \"EnumNumberBody\");\n$RefreshReg$(_c21, \"EnumStringBody\");\n$RefreshReg$(_c22, \"EnumSymbolBody\");\n$RefreshReg$(_c23, \"EnumDefaultedMember\");\n$RefreshReg$(_c24, \"EnumBooleanMember\");\n$RefreshReg$(_c25, \"EnumNumberMember\");\n$RefreshReg$(_c26, \"EnumStringMember\");\n$RefreshReg$(_c27, \"FlowExportDeclaration\");\n$RefreshReg$(_c28, \"ExistsTypeAnnotation\");\n$RefreshReg$(_c29, \"FunctionTypeAnnotation\");\n$RefreshReg$(_c30, \"FunctionTypeParam\");\n$RefreshReg$(_c31, \"InterfaceExtends\");\n$RefreshReg$(_c32, \"InterfaceDeclaration\");\n$RefreshReg$(_c33, \"InterfaceTypeAnnotation\");\n$RefreshReg$(_c34, \"IntersectionTypeAnnotation\");\n$RefreshReg$(_c35, \"MixedTypeAnnotation\");\n$RefreshReg$(_c36, \"EmptyTypeAnnotation\");\n$RefreshReg$(_c37, \"NullableTypeAnnotation\");\n$RefreshReg$(_c38, \"NumberTypeAnnotation\");\n$RefreshReg$(_c39, \"StringTypeAnnotation\");\n$RefreshReg$(_c40, \"ThisTypeAnnotation\");\n$RefreshReg$(_c41, \"TupleTypeAnnotation\");\n$RefreshReg$(_c42, \"TypeofTypeAnnotation\");\n$RefreshReg$(_c43, \"TypeAlias\");\n$RefreshReg$(_c44, \"TypeAnnotation\");\n$RefreshReg$(_c45, \"TypeParameterInstantiation\");\n$RefreshReg$(_c46, \"TypeParameter\");\n$RefreshReg$(_c47, \"OpaqueType\");\n$RefreshReg$(_c48, \"ObjectTypeAnnotation\");\n$RefreshReg$(_c49, \"ObjectTypeInternalSlot\");\n$RefreshReg$(_c50, \"ObjectTypeCallProperty\");\n$RefreshReg$(_c51, \"ObjectTypeIndexer\");\n$RefreshReg$(_c52, \"ObjectTypeProperty\");\n$RefreshReg$(_c53, \"ObjectTypeSpreadProperty\");\n$RefreshReg$(_c54, \"QualifiedTypeIdentifier\");\n$RefreshReg$(_c55, \"SymbolTypeAnnotation\");\n$RefreshReg$(_c56, \"UnionTypeAnnotation\");\n$RefreshReg$(_c57, \"TypeCastExpression\");\n$RefreshReg$(_c58, \"Variance\");\n$RefreshReg$(_c59, \"VoidTypeAnnotation\");\n$RefreshReg$(_c60, \"IndexedAccessType\");\n$RefreshReg$(_c61, \"OptionalIndexedAccessType\");","map":{"version":3,"sources":["/home/react/Blookers-Blogging-Website/src/login2/node_modules/@babel/generator/lib/generators/flow.js"],"names":["Object","defineProperty","exports","value","AnyTypeAnnotation","ArrayTypeAnnotation","BooleanTypeAnnotation","BooleanLiteralTypeAnnotation","NullLiteralTypeAnnotation","DeclareClass","DeclareFunction","InferredPredicate","DeclaredPredicate","DeclareInterface","DeclareModule","DeclareModuleExports","DeclareTypeAlias","DeclareOpaqueType","DeclareVariable","DeclareExportDeclaration","DeclareExportAllDeclaration","EnumDeclaration","EnumBooleanBody","EnumNumberBody","EnumStringBody","EnumSymbolBody","EnumDefaultedMember","EnumBooleanMember","EnumNumberMember","EnumStringMember","ExistsTypeAnnotation","FunctionTypeAnnotation","FunctionTypeParam","GenericTypeAnnotation","ClassImplements","InterfaceExtends","_interfaceish","_variance","InterfaceDeclaration","InterfaceTypeAnnotation","IntersectionTypeAnnotation","MixedTypeAnnotation","EmptyTypeAnnotation","NullableTypeAnnotation","NumberTypeAnnotation","StringTypeAnnotation","ThisTypeAnnotation","TupleTypeAnnotation","TypeofTypeAnnotation","TypeAlias","TypeAnnotation","TypeParameterDeclaration","TypeParameterInstantiation","TypeParameter","OpaqueType","ObjectTypeAnnotation","ObjectTypeInternalSlot","ObjectTypeCallProperty","ObjectTypeIndexer","ObjectTypeProperty","ObjectTypeSpreadProperty","QualifiedTypeIdentifier","SymbolTypeAnnotation","UnionTypeAnnotation","TypeCastExpression","Variance","VoidTypeAnnotation","IndexedAccessType","OptionalIndexedAccessType","enumerable","get","_types2","NumericLiteral","StringLiteral","_t","require","_modules","isDeclareExportDeclaration","isStatement","word","node","print","elementType","token","parent","space","id","typeAnnotation","predicate","semicolon","body","default","FlowExportDeclaration","apply","arguments","ExportAllDeclaration","enumExplicitType","context","name","hasExplicitType","enumBody","members","indent","newline","member","hasUnknownMembers","dedent","explicitType","enumInitializedMember","init","declaration","declar","specifiers","length","printList","source","typeParameters","this","params","rest","type","method","returnType","optional","_node$extends","extends","mixins","implements","variance","kind","andSeparator","printJoin","types","separator","argument","right","bound","supertype","impltype","exact","props","properties","callProperties","indexers","internalSlots","addNewlines","leading","statement","iterator","inexact","static","key","proto","qualification","orSeparator","expression","objectType","indexType"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AnyTypeAnnotation = AnyTypeAnnotation;\nexports.ArrayTypeAnnotation = ArrayTypeAnnotation;\nexports.BooleanTypeAnnotation = BooleanTypeAnnotation;\nexports.BooleanLiteralTypeAnnotation = BooleanLiteralTypeAnnotation;\nexports.NullLiteralTypeAnnotation = NullLiteralTypeAnnotation;\nexports.DeclareClass = DeclareClass;\nexports.DeclareFunction = DeclareFunction;\nexports.InferredPredicate = InferredPredicate;\nexports.DeclaredPredicate = DeclaredPredicate;\nexports.DeclareInterface = DeclareInterface;\nexports.DeclareModule = DeclareModule;\nexports.DeclareModuleExports = DeclareModuleExports;\nexports.DeclareTypeAlias = DeclareTypeAlias;\nexports.DeclareOpaqueType = DeclareOpaqueType;\nexports.DeclareVariable = DeclareVariable;\nexports.DeclareExportDeclaration = DeclareExportDeclaration;\nexports.DeclareExportAllDeclaration = DeclareExportAllDeclaration;\nexports.EnumDeclaration = EnumDeclaration;\nexports.EnumBooleanBody = EnumBooleanBody;\nexports.EnumNumberBody = EnumNumberBody;\nexports.EnumStringBody = EnumStringBody;\nexports.EnumSymbolBody = EnumSymbolBody;\nexports.EnumDefaultedMember = EnumDefaultedMember;\nexports.EnumBooleanMember = EnumBooleanMember;\nexports.EnumNumberMember = EnumNumberMember;\nexports.EnumStringMember = EnumStringMember;\nexports.ExistsTypeAnnotation = ExistsTypeAnnotation;\nexports.FunctionTypeAnnotation = FunctionTypeAnnotation;\nexports.FunctionTypeParam = FunctionTypeParam;\nexports.GenericTypeAnnotation = exports.ClassImplements = exports.InterfaceExtends = InterfaceExtends;\nexports._interfaceish = _interfaceish;\nexports._variance = _variance;\nexports.InterfaceDeclaration = InterfaceDeclaration;\nexports.InterfaceTypeAnnotation = InterfaceTypeAnnotation;\nexports.IntersectionTypeAnnotation = IntersectionTypeAnnotation;\nexports.MixedTypeAnnotation = MixedTypeAnnotation;\nexports.EmptyTypeAnnotation = EmptyTypeAnnotation;\nexports.NullableTypeAnnotation = NullableTypeAnnotation;\nexports.NumberTypeAnnotation = NumberTypeAnnotation;\nexports.StringTypeAnnotation = StringTypeAnnotation;\nexports.ThisTypeAnnotation = ThisTypeAnnotation;\nexports.TupleTypeAnnotation = TupleTypeAnnotation;\nexports.TypeofTypeAnnotation = TypeofTypeAnnotation;\nexports.TypeAlias = TypeAlias;\nexports.TypeAnnotation = TypeAnnotation;\nexports.TypeParameterDeclaration = exports.TypeParameterInstantiation = TypeParameterInstantiation;\nexports.TypeParameter = TypeParameter;\nexports.OpaqueType = OpaqueType;\nexports.ObjectTypeAnnotation = ObjectTypeAnnotation;\nexports.ObjectTypeInternalSlot = ObjectTypeInternalSlot;\nexports.ObjectTypeCallProperty = ObjectTypeCallProperty;\nexports.ObjectTypeIndexer = ObjectTypeIndexer;\nexports.ObjectTypeProperty = ObjectTypeProperty;\nexports.ObjectTypeSpreadProperty = ObjectTypeSpreadProperty;\nexports.QualifiedTypeIdentifier = QualifiedTypeIdentifier;\nexports.SymbolTypeAnnotation = SymbolTypeAnnotation;\nexports.UnionTypeAnnotation = UnionTypeAnnotation;\nexports.TypeCastExpression = TypeCastExpression;\nexports.Variance = Variance;\nexports.VoidTypeAnnotation = VoidTypeAnnotation;\nexports.IndexedAccessType = IndexedAccessType;\nexports.OptionalIndexedAccessType = OptionalIndexedAccessType;\nObject.defineProperty(exports, \"NumberLiteralTypeAnnotation\", {\n  enumerable: true,\n  get: function () {\n    return _types2.NumericLiteral;\n  }\n});\nObject.defineProperty(exports, \"StringLiteralTypeAnnotation\", {\n  enumerable: true,\n  get: function () {\n    return _types2.StringLiteral;\n  }\n});\n\nvar _t = require(\"@babel/types\");\n\nvar _modules = require(\"./modules\");\n\nvar _types2 = require(\"./types\");\n\nconst {\n  isDeclareExportDeclaration,\n  isStatement\n} = _t;\n\nfunction AnyTypeAnnotation() {\n  this.word(\"any\");\n}\n\nfunction ArrayTypeAnnotation(node) {\n  this.print(node.elementType, node);\n  this.token(\"[\");\n  this.token(\"]\");\n}\n\nfunction BooleanTypeAnnotation() {\n  this.word(\"boolean\");\n}\n\nfunction BooleanLiteralTypeAnnotation(node) {\n  this.word(node.value ? \"true\" : \"false\");\n}\n\nfunction NullLiteralTypeAnnotation() {\n  this.word(\"null\");\n}\n\nfunction DeclareClass(node, parent) {\n  if (!isDeclareExportDeclaration(parent)) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this.word(\"class\");\n  this.space();\n\n  this._interfaceish(node);\n}\n\nfunction DeclareFunction(node, parent) {\n  if (!isDeclareExportDeclaration(parent)) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this.word(\"function\");\n  this.space();\n  this.print(node.id, node);\n  this.print(node.id.typeAnnotation.typeAnnotation, node);\n\n  if (node.predicate) {\n    this.space();\n    this.print(node.predicate, node);\n  }\n\n  this.semicolon();\n}\n\nfunction InferredPredicate() {\n  this.token(\"%\");\n  this.word(\"checks\");\n}\n\nfunction DeclaredPredicate(node) {\n  this.token(\"%\");\n  this.word(\"checks\");\n  this.token(\"(\");\n  this.print(node.value, node);\n  this.token(\")\");\n}\n\nfunction DeclareInterface(node) {\n  this.word(\"declare\");\n  this.space();\n  this.InterfaceDeclaration(node);\n}\n\nfunction DeclareModule(node) {\n  this.word(\"declare\");\n  this.space();\n  this.word(\"module\");\n  this.space();\n  this.print(node.id, node);\n  this.space();\n  this.print(node.body, node);\n}\n\nfunction DeclareModuleExports(node) {\n  this.word(\"declare\");\n  this.space();\n  this.word(\"module\");\n  this.token(\".\");\n  this.word(\"exports\");\n  this.print(node.typeAnnotation, node);\n}\n\nfunction DeclareTypeAlias(node) {\n  this.word(\"declare\");\n  this.space();\n  this.TypeAlias(node);\n}\n\nfunction DeclareOpaqueType(node, parent) {\n  if (!isDeclareExportDeclaration(parent)) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this.OpaqueType(node);\n}\n\nfunction DeclareVariable(node, parent) {\n  if (!isDeclareExportDeclaration(parent)) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this.word(\"var\");\n  this.space();\n  this.print(node.id, node);\n  this.print(node.id.typeAnnotation, node);\n  this.semicolon();\n}\n\nfunction DeclareExportDeclaration(node) {\n  this.word(\"declare\");\n  this.space();\n  this.word(\"export\");\n  this.space();\n\n  if (node.default) {\n    this.word(\"default\");\n    this.space();\n  }\n\n  FlowExportDeclaration.apply(this, arguments);\n}\n\nfunction DeclareExportAllDeclaration() {\n  this.word(\"declare\");\n  this.space();\n\n  _modules.ExportAllDeclaration.apply(this, arguments);\n}\n\nfunction EnumDeclaration(node) {\n  const {\n    id,\n    body\n  } = node;\n  this.word(\"enum\");\n  this.space();\n  this.print(id, node);\n  this.print(body, node);\n}\n\nfunction enumExplicitType(context, name, hasExplicitType) {\n  if (hasExplicitType) {\n    context.space();\n    context.word(\"of\");\n    context.space();\n    context.word(name);\n  }\n\n  context.space();\n}\n\nfunction enumBody(context, node) {\n  const {\n    members\n  } = node;\n  context.token(\"{\");\n  context.indent();\n  context.newline();\n\n  for (const member of members) {\n    context.print(member, node);\n    context.newline();\n  }\n\n  if (node.hasUnknownMembers) {\n    context.token(\"...\");\n    context.newline();\n  }\n\n  context.dedent();\n  context.token(\"}\");\n}\n\nfunction EnumBooleanBody(node) {\n  const {\n    explicitType\n  } = node;\n  enumExplicitType(this, \"boolean\", explicitType);\n  enumBody(this, node);\n}\n\nfunction EnumNumberBody(node) {\n  const {\n    explicitType\n  } = node;\n  enumExplicitType(this, \"number\", explicitType);\n  enumBody(this, node);\n}\n\nfunction EnumStringBody(node) {\n  const {\n    explicitType\n  } = node;\n  enumExplicitType(this, \"string\", explicitType);\n  enumBody(this, node);\n}\n\nfunction EnumSymbolBody(node) {\n  enumExplicitType(this, \"symbol\", true);\n  enumBody(this, node);\n}\n\nfunction EnumDefaultedMember(node) {\n  const {\n    id\n  } = node;\n  this.print(id, node);\n  this.token(\",\");\n}\n\nfunction enumInitializedMember(context, node) {\n  const {\n    id,\n    init\n  } = node;\n  context.print(id, node);\n  context.space();\n  context.token(\"=\");\n  context.space();\n  context.print(init, node);\n  context.token(\",\");\n}\n\nfunction EnumBooleanMember(node) {\n  enumInitializedMember(this, node);\n}\n\nfunction EnumNumberMember(node) {\n  enumInitializedMember(this, node);\n}\n\nfunction EnumStringMember(node) {\n  enumInitializedMember(this, node);\n}\n\nfunction FlowExportDeclaration(node) {\n  if (node.declaration) {\n    const declar = node.declaration;\n    this.print(declar, node);\n    if (!isStatement(declar)) this.semicolon();\n  } else {\n    this.token(\"{\");\n\n    if (node.specifiers.length) {\n      this.space();\n      this.printList(node.specifiers, node);\n      this.space();\n    }\n\n    this.token(\"}\");\n\n    if (node.source) {\n      this.space();\n      this.word(\"from\");\n      this.space();\n      this.print(node.source, node);\n    }\n\n    this.semicolon();\n  }\n}\n\nfunction ExistsTypeAnnotation() {\n  this.token(\"*\");\n}\n\nfunction FunctionTypeAnnotation(node, parent) {\n  this.print(node.typeParameters, node);\n  this.token(\"(\");\n\n  if (node.this) {\n    this.word(\"this\");\n    this.token(\":\");\n    this.space();\n    this.print(node.this.typeAnnotation, node);\n\n    if (node.params.length || node.rest) {\n      this.token(\",\");\n      this.space();\n    }\n  }\n\n  this.printList(node.params, node);\n\n  if (node.rest) {\n    if (node.params.length) {\n      this.token(\",\");\n      this.space();\n    }\n\n    this.token(\"...\");\n    this.print(node.rest, node);\n  }\n\n  this.token(\")\");\n\n  if (parent.type === \"ObjectTypeCallProperty\" || parent.type === \"DeclareFunction\" || parent.type === \"ObjectTypeProperty\" && parent.method) {\n    this.token(\":\");\n  } else {\n    this.space();\n    this.token(\"=>\");\n  }\n\n  this.space();\n  this.print(node.returnType, node);\n}\n\nfunction FunctionTypeParam(node) {\n  this.print(node.name, node);\n  if (node.optional) this.token(\"?\");\n\n  if (node.name) {\n    this.token(\":\");\n    this.space();\n  }\n\n  this.print(node.typeAnnotation, node);\n}\n\nfunction InterfaceExtends(node) {\n  this.print(node.id, node);\n  this.print(node.typeParameters, node);\n}\n\nfunction _interfaceish(node) {\n  var _node$extends;\n\n  this.print(node.id, node);\n  this.print(node.typeParameters, node);\n\n  if ((_node$extends = node.extends) != null && _node$extends.length) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.printList(node.extends, node);\n  }\n\n  if (node.mixins && node.mixins.length) {\n    this.space();\n    this.word(\"mixins\");\n    this.space();\n    this.printList(node.mixins, node);\n  }\n\n  if (node.implements && node.implements.length) {\n    this.space();\n    this.word(\"implements\");\n    this.space();\n    this.printList(node.implements, node);\n  }\n\n  this.space();\n  this.print(node.body, node);\n}\n\nfunction _variance(node) {\n  if (node.variance) {\n    if (node.variance.kind === \"plus\") {\n      this.token(\"+\");\n    } else if (node.variance.kind === \"minus\") {\n      this.token(\"-\");\n    }\n  }\n}\n\nfunction InterfaceDeclaration(node) {\n  this.word(\"interface\");\n  this.space();\n\n  this._interfaceish(node);\n}\n\nfunction andSeparator() {\n  this.space();\n  this.token(\"&\");\n  this.space();\n}\n\nfunction InterfaceTypeAnnotation(node) {\n  this.word(\"interface\");\n\n  if (node.extends && node.extends.length) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.printList(node.extends, node);\n  }\n\n  this.space();\n  this.print(node.body, node);\n}\n\nfunction IntersectionTypeAnnotation(node) {\n  this.printJoin(node.types, node, {\n    separator: andSeparator\n  });\n}\n\nfunction MixedTypeAnnotation() {\n  this.word(\"mixed\");\n}\n\nfunction EmptyTypeAnnotation() {\n  this.word(\"empty\");\n}\n\nfunction NullableTypeAnnotation(node) {\n  this.token(\"?\");\n  this.print(node.typeAnnotation, node);\n}\n\nfunction NumberTypeAnnotation() {\n  this.word(\"number\");\n}\n\nfunction StringTypeAnnotation() {\n  this.word(\"string\");\n}\n\nfunction ThisTypeAnnotation() {\n  this.word(\"this\");\n}\n\nfunction TupleTypeAnnotation(node) {\n  this.token(\"[\");\n  this.printList(node.types, node);\n  this.token(\"]\");\n}\n\nfunction TypeofTypeAnnotation(node) {\n  this.word(\"typeof\");\n  this.space();\n  this.print(node.argument, node);\n}\n\nfunction TypeAlias(node) {\n  this.word(\"type\");\n  this.space();\n  this.print(node.id, node);\n  this.print(node.typeParameters, node);\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(node.right, node);\n  this.semicolon();\n}\n\nfunction TypeAnnotation(node) {\n  this.token(\":\");\n  this.space();\n  if (node.optional) this.token(\"?\");\n  this.print(node.typeAnnotation, node);\n}\n\nfunction TypeParameterInstantiation(node) {\n  this.token(\"<\");\n  this.printList(node.params, node, {});\n  this.token(\">\");\n}\n\nfunction TypeParameter(node) {\n  this._variance(node);\n\n  this.word(node.name);\n\n  if (node.bound) {\n    this.print(node.bound, node);\n  }\n\n  if (node.default) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.default, node);\n  }\n}\n\nfunction OpaqueType(node) {\n  this.word(\"opaque\");\n  this.space();\n  this.word(\"type\");\n  this.space();\n  this.print(node.id, node);\n  this.print(node.typeParameters, node);\n\n  if (node.supertype) {\n    this.token(\":\");\n    this.space();\n    this.print(node.supertype, node);\n  }\n\n  if (node.impltype) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.impltype, node);\n  }\n\n  this.semicolon();\n}\n\nfunction ObjectTypeAnnotation(node) {\n  if (node.exact) {\n    this.token(\"{|\");\n  } else {\n    this.token(\"{\");\n  }\n\n  const props = [...node.properties, ...(node.callProperties || []), ...(node.indexers || []), ...(node.internalSlots || [])];\n\n  if (props.length) {\n    this.space();\n    this.printJoin(props, node, {\n      addNewlines(leading) {\n        if (leading && !props[0]) return 1;\n      },\n\n      indent: true,\n      statement: true,\n      iterator: () => {\n        if (props.length !== 1 || node.inexact) {\n          this.token(\",\");\n          this.space();\n        }\n      }\n    });\n    this.space();\n  }\n\n  if (node.inexact) {\n    this.indent();\n    this.token(\"...\");\n\n    if (props.length) {\n      this.newline();\n    }\n\n    this.dedent();\n  }\n\n  if (node.exact) {\n    this.token(\"|}\");\n  } else {\n    this.token(\"}\");\n  }\n}\n\nfunction ObjectTypeInternalSlot(node) {\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n\n  this.token(\"[\");\n  this.token(\"[\");\n  this.print(node.id, node);\n  this.token(\"]\");\n  this.token(\"]\");\n  if (node.optional) this.token(\"?\");\n\n  if (!node.method) {\n    this.token(\":\");\n    this.space();\n  }\n\n  this.print(node.value, node);\n}\n\nfunction ObjectTypeCallProperty(node) {\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n\n  this.print(node.value, node);\n}\n\nfunction ObjectTypeIndexer(node) {\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n\n  this._variance(node);\n\n  this.token(\"[\");\n\n  if (node.id) {\n    this.print(node.id, node);\n    this.token(\":\");\n    this.space();\n  }\n\n  this.print(node.key, node);\n  this.token(\"]\");\n  this.token(\":\");\n  this.space();\n  this.print(node.value, node);\n}\n\nfunction ObjectTypeProperty(node) {\n  if (node.proto) {\n    this.word(\"proto\");\n    this.space();\n  }\n\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n\n  if (node.kind === \"get\" || node.kind === \"set\") {\n    this.word(node.kind);\n    this.space();\n  }\n\n  this._variance(node);\n\n  this.print(node.key, node);\n  if (node.optional) this.token(\"?\");\n\n  if (!node.method) {\n    this.token(\":\");\n    this.space();\n  }\n\n  this.print(node.value, node);\n}\n\nfunction ObjectTypeSpreadProperty(node) {\n  this.token(\"...\");\n  this.print(node.argument, node);\n}\n\nfunction QualifiedTypeIdentifier(node) {\n  this.print(node.qualification, node);\n  this.token(\".\");\n  this.print(node.id, node);\n}\n\nfunction SymbolTypeAnnotation() {\n  this.word(\"symbol\");\n}\n\nfunction orSeparator() {\n  this.space();\n  this.token(\"|\");\n  this.space();\n}\n\nfunction UnionTypeAnnotation(node) {\n  this.printJoin(node.types, node, {\n    separator: orSeparator\n  });\n}\n\nfunction TypeCastExpression(node) {\n  this.token(\"(\");\n  this.print(node.expression, node);\n  this.print(node.typeAnnotation, node);\n  this.token(\")\");\n}\n\nfunction Variance(node) {\n  if (node.kind === \"plus\") {\n    this.token(\"+\");\n  } else {\n    this.token(\"-\");\n  }\n}\n\nfunction VoidTypeAnnotation() {\n  this.word(\"void\");\n}\n\nfunction IndexedAccessType(node) {\n  this.print(node.objectType, node);\n  this.token(\"[\");\n  this.print(node.indexType, node);\n  this.token(\"]\");\n}\n\nfunction OptionalIndexedAccessType(node) {\n  this.print(node.objectType, node);\n\n  if (node.optional) {\n    this.token(\"?.\");\n  }\n\n  this.token(\"[\");\n  this.print(node.indexType, node);\n  this.token(\"]\");\n}"]},"metadata":{},"sourceType":"module"}